
PP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000562c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005874  08005874  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005874  08005874  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005874  08005874  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800587c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  080058ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080058ec  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e51b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba6  00000000  00000000  0002e5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00030168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00030d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f41  00000000  00000000  000318e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb8b  00000000  00000000  00046821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085bc2  00000000  00000000  000553ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000daf6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003694  00000000  00000000  000dafc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057a4 	.word	0x080057a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080057a4 	.word	0x080057a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fd68 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f818 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f9c8 	bl	8000610 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f926 	bl	80004d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f994 	bl	80005b0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000288:	f000 f86e 	bl	8000368 <MX_TIM1_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800028c:	4806      	ldr	r0, [pc, #24]	; (80002a8 <main+0x38>)
 800028e:	f002 fd1d 	bl	8002ccc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000292:	2100      	movs	r1, #0
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <main+0x38>)
 8000296:	f002 ff17 	bl	80030c8 <HAL_TIM_IC_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Verificar os valores de entrada dos pinos PB 1, 6 e 7
	Check_Pin();
 800029a:	f000 faa9 	bl	80007f0 <Check_Pin>

	// Verifica a combinação dos pinos PB 1, 6 e 7
	Config_PWM();
 800029e:	f000 faef 	bl	8000880 <Config_PWM>

    // Verifica o valor da variável Frequency_Local
	Check_Frequency();
 80002a2:	f000 fb77 	bl	8000994 <Check_Frequency>
	Check_Pin();
 80002a6:	e7f8      	b.n	800029a <main+0x2a>
 80002a8:	200000d8 	.word	0x200000d8

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b09c      	sub	sp, #112	; 0x70
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002b6:	2228      	movs	r2, #40	; 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f004 fdfc 	bl	8004eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2230      	movs	r2, #48	; 0x30
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f004 fdee 	bl	8004eb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002dc:	2302      	movs	r3, #2
 80002de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e4:	2310      	movs	r3, #16
 80002e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	2302      	movs	r3, #2
 80002ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ec:	2300      	movs	r3, #0
 80002ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002f0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 f862 	bl	80013c4 <HAL_RCC_OscConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000306:	f000 fb77 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	230f      	movs	r3, #15
 800030c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030e:	2302      	movs	r3, #2
 8000310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000320:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000324:	2102      	movs	r1, #2
 8000326:	4618      	mov	r0, r3
 8000328:	f002 f88a 	bl	8002440 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000332:	f000 fb61 	bl	80009f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800033c:	2300      	movs	r3, #0
 800033e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f002 fae6 	bl	8002914 <HAL_RCCEx_PeriphCLKConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800034e:	f000 fb53 	bl	80009f8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000352:	2200      	movs	r2, #0
 8000354:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000358:	2000      	movs	r0, #0
 800035a:	f002 f9ed 	bl	8002738 <HAL_RCC_MCOConfig>
}
 800035e:	bf00      	nop
 8000360:	3770      	adds	r7, #112	; 0x70
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b09a      	sub	sp, #104	; 0x68
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800036e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000388:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
 8000398:	615a      	str	r2, [r3, #20]
 800039a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	222c      	movs	r2, #44	; 0x2c
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f004 fd88 	bl	8004eb8 <memset>
   *   -> f_base = 20 kHz = 64 MHz / (PSC + 1) => PSC = (64 MHz / 20 kHz) - 1 = 3199
   * - PWM (ARR) = (T_pwm * f_base) - 1 ----- htim1.Init.Period = Freq_Timer1;
   * - CCR4 = ARR / 2                   ----- sConfigOC.Pulse = (htim1.Init.Period+1)/2; */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003a8:	4b46      	ldr	r3, [pc, #280]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003aa:	4a47      	ldr	r2, [pc, #284]	; (80004c8 <MX_TIM1_Init+0x160>)
 80003ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3199;
 80003ae:	4b45      	ldr	r3, [pc, #276]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003b0:	f640 427f 	movw	r2, #3199	; 0xc7f
 80003b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b6:	4b43      	ldr	r3, [pc, #268]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = Freq_Timer1;
 80003bc:	4b43      	ldr	r3, [pc, #268]	; (80004cc <MX_TIM1_Init+0x164>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a40      	ldr	r2, [pc, #256]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003c2:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c4:	4b3f      	ldr	r3, [pc, #252]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003ca:	4b3e      	ldr	r3, [pc, #248]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d0:	4b3c      	ldr	r3, [pc, #240]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003d6:	483b      	ldr	r0, [pc, #236]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003d8:	f002 fc20 	bl	8002c1c <HAL_TIM_Base_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80003e2:	f000 fb09 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ea:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003f0:	4619      	mov	r1, r3
 80003f2:	4834      	ldr	r0, [pc, #208]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003f4:	f003 fa66 	bl	80038c4 <HAL_TIM_ConfigClockSource>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80003fe:	f000 fafb 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000402:	4830      	ldr	r0, [pc, #192]	; (80004c4 <MX_TIM1_Init+0x15c>)
 8000404:	f002 fcb6 	bl	8002d74 <HAL_TIM_PWM_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800040e:	f000 faf3 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000412:	2300      	movs	r3, #0
 8000414:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000416:	2300      	movs	r3, #0
 8000418:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800041e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000422:	4619      	mov	r1, r3
 8000424:	4827      	ldr	r0, [pc, #156]	; (80004c4 <MX_TIM1_Init+0x15c>)
 8000426:	f004 f859 	bl	80044dc <HAL_TIMEx_MasterConfigSynchronization>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000430:	f000 fae2 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000434:	2360      	movs	r3, #96	; 0x60
 8000436:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = (htim1.Init.Period + 1)/2;
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <MX_TIM1_Init+0x15c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	3301      	adds	r3, #1
 800043e:	085b      	lsrs	r3, r3, #1
 8000440:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000442:	2300      	movs	r3, #0
 8000444:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000446:	2300      	movs	r3, #0
 8000448:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800044a:	2300      	movs	r3, #0
 800044c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800044e:	2300      	movs	r3, #0
 8000450:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000452:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000456:	220c      	movs	r2, #12
 8000458:	4619      	mov	r1, r3
 800045a:	481a      	ldr	r0, [pc, #104]	; (80004c4 <MX_TIM1_Init+0x15c>)
 800045c:	f003 f91e 	bl	800369c <HAL_TIM_PWM_ConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000466:	f000 fac7 	bl	80009f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800046e:	2300      	movs	r3, #0
 8000470:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800047e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000482:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800048c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000490:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4619      	mov	r1, r3
 800049e:	4809      	ldr	r0, [pc, #36]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80004a0:	f004 f882 	bl	80045a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80004aa:	f000 faa5 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //Iniciar a saída PWM
 80004ae:	210c      	movs	r1, #12
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80004b2:	f002 fcc1 	bl	8002e38 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004b6:	4803      	ldr	r0, [pc, #12]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80004b8:	f000 fb26 	bl	8000b08 <HAL_TIM_MspPostInit>

}
 80004bc:	bf00      	nop
 80004be:	3768      	adds	r7, #104	; 0x68
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	2000008c 	.word	0x2000008c
 80004c8:	40012c00 	.word	0x40012c00
 80004cc:	20000214 	.word	0x20000214

080004d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	; 0x30
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004d6:	f107 0320 	add.w	r3, r7, #32
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004fc:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <MX_TIM2_Init+0xdc>)
 80004fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000504:	4b29      	ldr	r3, [pc, #164]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	4b28      	ldr	r3, [pc, #160]	; (80005ac <MX_TIM2_Init+0xdc>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000510:	4b26      	ldr	r3, [pc, #152]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000512:	f04f 32ff 	mov.w	r2, #4294967295
 8000516:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_TIM2_Init+0xdc>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000524:	4821      	ldr	r0, [pc, #132]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000526:	f002 fb79 	bl	8002c1c <HAL_TIM_Base_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000530:	f000 fa62 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000538:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	4619      	mov	r1, r3
 8000540:	481a      	ldr	r0, [pc, #104]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000542:	f003 f9bf 	bl	80038c4 <HAL_TIM_ConfigClockSource>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800054c:	f000 fa54 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000550:	4816      	ldr	r0, [pc, #88]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000552:	f002 fd57 	bl	8003004 <HAL_TIM_IC_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800055c:	f000 fa4c 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4619      	mov	r1, r3
 800056e:	480f      	ldr	r0, [pc, #60]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000570:	f003 ffb4 	bl	80044dc <HAL_TIMEx_MasterConfigSynchronization>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800057a:	f000 fa3d 	bl	80009f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000582:	2301      	movs	r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000596:	f002 ffe4 	bl	8003562 <HAL_TIM_IC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80005a0:	f000 fa2a 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	3730      	adds	r7, #48	; 0x30
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000d8 	.word	0x200000d8

080005b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005b6:	4a15      	ldr	r2, [pc, #84]	; (800060c <MX_USART2_UART_Init+0x5c>)
 80005b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005f4:	f004 f86e 	bl	80046d4 <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005fe:	f000 f9fb 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000124 	.word	0x20000124
 800060c:	40004400 	.word	0x40004400

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <MX_GPIO_Init+0xc8>)
 800062c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_GPIO_Init+0xc8>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a1f      	ldr	r2, [pc, #124]	; (80006d8 <MX_GPIO_Init+0xc8>)
 800065c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2108      	movs	r1, #8
 8000672:	481a      	ldr	r0, [pc, #104]	; (80006dc <MX_GPIO_Init+0xcc>)
 8000674:	f000 fe8e 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000678:	23c2      	movs	r3, #194	; 0xc2
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <MX_GPIO_Init+0xcc>)
 800068c:	f000 fcf8 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f000 fce6 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006b4:	2308      	movs	r3, #8
 80006b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_GPIO_Init+0xcc>)
 80006cc:	f000 fcd8 	bl	8001080 <HAL_GPIO_Init>

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	48000400 	.word	0x48000400

080006e0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* Captura de tempo quando há uma borda de subida */
  sample[Ind]=(uint32_t) HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80006ea:	681c      	ldr	r4, [r3, #0]
 80006ec:	2100      	movs	r1, #0
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f003 f9b2 	bl	8003a58 <HAL_TIM_ReadCapturedValue>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a28      	ldr	r2, [pc, #160]	; (8000798 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006f8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  Ind++;
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000704:	6013      	str	r3, [r2, #0]

  /* Processamento dos dados para calcular a frequência */
  if (Ind == 5){
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b05      	cmp	r3, #5
 800070c:	d13e      	bne.n	800078c <HAL_TIM_IC_CaptureCallback+0xac>
    Ind = 0;
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
    DeltaT = sample[4] + Overflow*4294967295 - sample[0];
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000716:	691a      	ldr	r2, [r3, #16]
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <HAL_TIM_IC_CaptureCallback+0xbc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	1ad2      	subs	r2, r2, r3
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	4a1e      	ldr	r2, [pc, #120]	; (80007a0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000726:	6013      	str	r3, [r2, #0]
    Overflow = 0;
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <HAL_TIM_IC_CaptureCallback+0xbc>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
    Frequency = 4*64000000/((htim->Init.Prescaler + 1)*DeltaT);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	4a1a      	ldr	r2, [pc, #104]	; (80007a0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000736:	6812      	ldr	r2, [r2, #0]
 8000738:	fb02 f303 	mul.w	r3, r2, r3
 800073c:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000744:	6013      	str	r3, [r2, #0]
    Capacity = 1000000/Frequency;
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <HAL_TIM_IC_CaptureCallback+0xcc>)
 800074c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000752:	6013      	str	r3, [r2, #0]

    /* Tipo Volatile não pode ser usado na função main(), pois o tipo volatile não garante a estabilidade da variável "Frequency" */
    Frequency_Local = Frequency;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800075a:	6013      	str	r3, [r2, #0]

    /* Formatação dos espaços de exibição */
    sprintf(Text, "Frequency = %d Hz - Note Musical = %s\n", Frequency, Note_Musical);
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000762:	4916      	ldr	r1, [pc, #88]	; (80007bc <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000764:	4816      	ldr	r0, [pc, #88]	; (80007c0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000766:	f004 fbaf 	bl	8004ec8 <siprintf>

    /* Display com uma velocidade 30 vezes menor para a legibilidade */
    if(Show++ == 30){
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	4914      	ldr	r1, [pc, #80]	; (80007c4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000772:	600a      	str	r2, [r1, #0]
 8000774:	2b1e      	cmp	r3, #30
 8000776:	d109      	bne.n	800078c <HAL_TIM_IC_CaptureCallback+0xac>
      Show = 0;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
	    HAL_UART_Transmit(&huart2, Text, 60, 1000);
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	223c      	movs	r2, #60	; 0x3c
 8000784:	490e      	ldr	r1, [pc, #56]	; (80007c0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000786:	4810      	ldr	r0, [pc, #64]	; (80007c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000788:	f003 fff2 	bl	8004770 <HAL_UART_Transmit>
    }
  }
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	200001d0 	.word	0x200001d0
 8000798:	200001b4 	.word	0x200001b4
 800079c:	200001cc 	.word	0x200001cc
 80007a0:	200001c8 	.word	0x200001c8
 80007a4:	0f424000 	.word	0x0f424000
 80007a8:	200001ac 	.word	0x200001ac
 80007ac:	000f4240 	.word	0x000f4240
 80007b0:	200001b0 	.word	0x200001b0
 80007b4:	200001a8 	.word	0x200001a8
 80007b8:	20000220 	.word	0x20000220
 80007bc:	080057bc 	.word	0x080057bc
 80007c0:	200001d8 	.word	0x200001d8
 80007c4:	200001d4 	.word	0x200001d4
 80007c8:	20000124 	.word	0x20000124

080007cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  Overflow++;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007dc:	6013      	str	r3, [r2, #0]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200001cc 	.word	0x200001cc

080007f0 <Check_Pin>:
/* USER CODE END 4 */

void Check_Pin(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	/* Leitura dos pinos e atribuição de valores às variáveis */
	Input_Pin_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET ? 1 : 0;
 80007f4:	2102      	movs	r1, #2
 80007f6:	481d      	ldr	r0, [pc, #116]	; (800086c <Check_Pin+0x7c>)
 80007f8:	f000 fdb4 	bl	8001364 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <Check_Pin+0x80>)
 800080c:	701a      	strb	r2, [r3, #0]
	Input_Pin_2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET ? 1 : 0;
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	4816      	ldr	r0, [pc, #88]	; (800086c <Check_Pin+0x7c>)
 8000812:	f000 fda7 	bl	8001364 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	bf0c      	ite	eq
 800081c:	2301      	moveq	r3, #1
 800081e:	2300      	movne	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <Check_Pin+0x84>)
 8000826:	701a      	strb	r2, [r3, #0]
	Input_Pin_3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET ? 1 : 0;
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <Check_Pin+0x7c>)
 800082c:	f000 fd9a 	bl	8001364 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	bf0c      	ite	eq
 8000836:	2301      	moveq	r3, #1
 8000838:	2300      	movne	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	461a      	mov	r2, r3
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <Check_Pin+0x88>)
 8000840:	701a      	strb	r2, [r3, #0]

	/* Calcula a combinação presente nos pinos */
	Sum_Current = (Input_Pin_1 << 2) | (Input_Pin_2 << 1) | Input_Pin_3;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <Check_Pin+0x80>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	b25a      	sxtb	r2, r3
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <Check_Pin+0x84>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	b25b      	sxtb	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b25a      	sxtb	r2, r3
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <Check_Pin+0x88>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b25b      	sxtb	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b25b      	sxtb	r3, r3
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <Check_Pin+0x8c>)
 8000864:	701a      	strb	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	48000400 	.word	0x48000400
 8000870:	20000218 	.word	0x20000218
 8000874:	20000219 	.word	0x20000219
 8000878:	2000021a 	.word	0x2000021a
 800087c:	2000021b 	.word	0x2000021b

08000880 <Config_PWM>:

void Config_PWM(void) {
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	/* A partir do valor somado em combinação, será gerado uma frequência para a nota musical */
	switch (Sum_Current) {
 8000884:	4b39      	ldr	r3, [pc, #228]	; (800096c <Config_PWM+0xec>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b07      	cmp	r3, #7
 800088a:	d86a      	bhi.n	8000962 <Config_PWM+0xe2>
 800088c:	a201      	add	r2, pc, #4	; (adr r2, 8000894 <Config_PWM+0x14>)
 800088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000892:	bf00      	nop
 8000894:	080008b5 	.word	0x080008b5
 8000898:	080008cb 	.word	0x080008cb
 800089c:	080008e3 	.word	0x080008e3
 80008a0:	080008fb 	.word	0x080008fb
 80008a4:	08000913 	.word	0x08000913
 80008a8:	08000929 	.word	0x08000929
 80008ac:	0800093f 	.word	0x0800093f
 80008b0:	0800094d 	.word	0x0800094d
	    case 0:
	    	Freq_Timer1 = 0;    // Nulo
 80008b4:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <Config_PWM+0xf0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
	    	strcpy(Note_Musical, "Null");
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <Config_PWM+0xf4>)
 80008bc:	4a2e      	ldr	r2, [pc, #184]	; (8000978 <Config_PWM+0xf8>)
 80008be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c2:	6018      	str	r0, [r3, #0]
 80008c4:	3304      	adds	r3, #4
 80008c6:	7019      	strb	r1, [r3, #0]
	        break;
 80008c8:	e04b      	b.n	8000962 <Config_PWM+0xe2>
	    case 1:
	    	Freq_Timer1 = 136;  // Ré
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <Config_PWM+0xf0>)
 80008cc:	2288      	movs	r2, #136	; 0x88
 80008ce:	601a      	str	r2, [r3, #0]
	    	strcpy(Note_Musical, "Re");
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <Config_PWM+0xf4>)
 80008d2:	4a2a      	ldr	r2, [pc, #168]	; (800097c <Config_PWM+0xfc>)
 80008d4:	6812      	ldr	r2, [r2, #0]
 80008d6:	4611      	mov	r1, r2
 80008d8:	8019      	strh	r1, [r3, #0]
 80008da:	3302      	adds	r3, #2
 80008dc:	0c12      	lsrs	r2, r2, #16
 80008de:	701a      	strb	r2, [r3, #0]
	        break;
 80008e0:	e03f      	b.n	8000962 <Config_PWM+0xe2>
	    case 2:
	    	Freq_Timer1 = 182;  // Lá
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <Config_PWM+0xf0>)
 80008e4:	22b6      	movs	r2, #182	; 0xb6
 80008e6:	601a      	str	r2, [r3, #0]
	    	strcpy(Note_Musical, "La");
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <Config_PWM+0xf4>)
 80008ea:	4a25      	ldr	r2, [pc, #148]	; (8000980 <Config_PWM+0x100>)
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	4611      	mov	r1, r2
 80008f0:	8019      	strh	r1, [r3, #0]
 80008f2:	3302      	adds	r3, #2
 80008f4:	0c12      	lsrs	r2, r2, #16
 80008f6:	701a      	strb	r2, [r3, #0]
	        break;
 80008f8:	e033      	b.n	8000962 <Config_PWM+0xe2>
	    case 3:
	    	Freq_Timer1 = 81;   // Si
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <Config_PWM+0xf0>)
 80008fc:	2251      	movs	r2, #81	; 0x51
 80008fe:	601a      	str	r2, [r3, #0]
	    	strcpy(Note_Musical, "Si");
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <Config_PWM+0xf4>)
 8000902:	4a20      	ldr	r2, [pc, #128]	; (8000984 <Config_PWM+0x104>)
 8000904:	6812      	ldr	r2, [r2, #0]
 8000906:	4611      	mov	r1, r2
 8000908:	8019      	strh	r1, [r3, #0]
 800090a:	3302      	adds	r3, #2
 800090c:	0c12      	lsrs	r2, r2, #16
 800090e:	701a      	strb	r2, [r3, #0]
	        break;
 8000910:	e027      	b.n	8000962 <Config_PWM+0xe2>
	    case 4:
	    	Freq_Timer1 = 243;  // Mi-g
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <Config_PWM+0xf0>)
 8000914:	22f3      	movs	r2, #243	; 0xf3
 8000916:	601a      	str	r2, [r3, #0]
	    	strcpy(Note_Musical, "Mi-g");
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <Config_PWM+0xf4>)
 800091a:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <Config_PWM+0x108>)
 800091c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000920:	6018      	str	r0, [r3, #0]
 8000922:	3304      	adds	r3, #4
 8000924:	7019      	strb	r1, [r3, #0]
	        break;
 8000926:	e01c      	b.n	8000962 <Config_PWM+0xe2>
	    case 5:
	    	Freq_Timer1 = 61;   // Mi-a
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <Config_PWM+0xf0>)
 800092a:	223d      	movs	r2, #61	; 0x3d
 800092c:	601a      	str	r2, [r3, #0]
	    	strcpy(Note_Musical, "Mi-a");
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <Config_PWM+0xf4>)
 8000930:	4a16      	ldr	r2, [pc, #88]	; (800098c <Config_PWM+0x10c>)
 8000932:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000936:	6018      	str	r0, [r3, #0]
 8000938:	3304      	adds	r3, #4
 800093a:	7019      	strb	r1, [r3, #0]
	        break;
 800093c:	e011      	b.n	8000962 <Config_PWM+0xe2>
	    case 6:
	    	Freq_Timer1 = 102;  // Sol
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <Config_PWM+0xf0>)
 8000940:	2266      	movs	r2, #102	; 0x66
 8000942:	601a      	str	r2, [r3, #0]
	    	strcpy(Note_Musical, "Sol");
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <Config_PWM+0xf4>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <Config_PWM+0x110>)
 8000948:	601a      	str	r2, [r3, #0]
	    	break;
 800094a:	e00a      	b.n	8000962 <Config_PWM+0xe2>
	    case 7:
	    	Freq_Timer1 = 0;    // Nulo
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <Config_PWM+0xf0>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
	    	strcpy(Note_Musical, "Null");
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <Config_PWM+0xf4>)
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <Config_PWM+0xf8>)
 8000956:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095a:	6018      	str	r0, [r3, #0]
 800095c:	3304      	adds	r3, #4
 800095e:	7019      	strb	r1, [r3, #0]
	}
}
 8000960:	e7ff      	b.n	8000962 <Config_PWM+0xe2>
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	2000021b 	.word	0x2000021b
 8000970:	20000214 	.word	0x20000214
 8000974:	20000220 	.word	0x20000220
 8000978:	080057e4 	.word	0x080057e4
 800097c:	080057ec 	.word	0x080057ec
 8000980:	080057f0 	.word	0x080057f0
 8000984:	080057f4 	.word	0x080057f4
 8000988:	080057f8 	.word	0x080057f8
 800098c:	08005800 	.word	0x08005800
 8000990:	006c6f53 	.word	0x006c6f53

08000994 <Check_Frequency>:

void Check_Frequency(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	/* Verifica se a frequência é menor do que 42kHz, ou seja, se há a presença da mão. Além disso, verifica se Freq_Timer1 é diferente de zero para emitir um som */
	if (Frequency_Local < 42000 && Sum_Current != 0 && Freq_Timer1 != 0) {
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <Check_Frequency+0x54>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d814      	bhi.n	80009ce <Check_Frequency+0x3a>
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <Check_Frequency+0x58>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d010      	beq.n	80009ce <Check_Frequency+0x3a>
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <Check_Frequency+0x5c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00c      	beq.n	80009ce <Check_Frequency+0x3a>

		/* Verifica o estado anterior para saber se a mesma nota musical está sendo requisitada */
		if(Sum_Current != Sum_Before){
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <Check_Frequency+0x58>)
 80009b6:	781a      	ldrb	r2, [r3, #0]
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <Check_Frequency+0x60>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d00e      	beq.n	80009de <Check_Frequency+0x4a>
			Sum_Before = Sum_Current;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <Check_Frequency+0x58>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <Check_Frequency+0x60>)
 80009c6:	701a      	strb	r2, [r3, #0]

			/* Alteração da frequência do PWM */
			MX_TIM1_Init();
 80009c8:	f7ff fcce 	bl	8000368 <MX_TIM1_Init>
		if(Sum_Current != Sum_Before){
 80009cc:	e007      	b.n	80009de <Check_Frequency+0x4a>
		}
	}
	else {
		/* Frequência nula */
		Freq_Timer1 = 0;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <Check_Frequency+0x5c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
		Sum_Before = 0;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <Check_Frequency+0x60>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]

		/* Alteração da frequência do PWM */
		MX_TIM1_Init();
 80009da:	f7ff fcc5 	bl	8000368 <MX_TIM1_Init>
	}

	/* Aguarda um tempo (em milisegundos) para realizar o próximo ciclo */
	HAL_Delay(100);
 80009de:	2064      	movs	r0, #100	; 0x64
 80009e0:	f000 fa18 	bl	8000e14 <HAL_Delay>
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200001a8 	.word	0x200001a8
 80009ec:	2000021b 	.word	0x2000021b
 80009f0:	20000214 	.word	0x20000214
 80009f4:	2000021c 	.word	0x2000021c

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_MspInit+0x44>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_MspInit+0x44>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6193      	str	r3, [r2, #24]
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_MspInit+0x44>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_MspInit+0x44>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_MspInit+0x44>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	61d3      	str	r3, [r2, #28]
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MspInit+0x44>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a24      	ldr	r2, [pc, #144]	; (8000b00 <HAL_TIM_Base_MspInit+0xb0>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d10c      	bne.n	8000a8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a72:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <HAL_TIM_Base_MspInit+0xb4>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a23      	ldr	r2, [pc, #140]	; (8000b04 <HAL_TIM_Base_MspInit+0xb4>)
 8000a78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <HAL_TIM_Base_MspInit+0xb4>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a8a:	e035      	b.n	8000af8 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a94:	d130      	bne.n	8000af8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <HAL_TIM_Base_MspInit+0xb4>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <HAL_TIM_Base_MspInit+0xb4>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	61d3      	str	r3, [r2, #28]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_TIM_Base_MspInit+0xb4>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_TIM_Base_MspInit+0xb4>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <HAL_TIM_Base_MspInit+0xb4>)
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	6153      	str	r3, [r2, #20]
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_TIM_Base_MspInit+0xb4>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae4:	f000 facc 	bl	8001080 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	201c      	movs	r0, #28
 8000aee:	f000 fa90 	bl	8001012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000af2:	201c      	movs	r0, #28
 8000af4:	f000 faa9 	bl	800104a <HAL_NVIC_EnableIRQ>
}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	; 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40012c00 	.word	0x40012c00
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <HAL_TIM_MspPostInit+0x68>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d11d      	bne.n	8000b66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_TIM_MspPostInit+0x6c>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <HAL_TIM_MspPostInit+0x6c>)
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	6153      	str	r3, [r2, #20]
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_TIM_MspPostInit+0x6c>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000b54:	230b      	movs	r3, #11
 8000b56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f000 fa8d 	bl	8001080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40012c00 	.word	0x40012c00
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_UART_MspInit+0x7c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d128      	bne.n	8000bec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f000 fa4a 	bl	8001080 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	40021000 	.word	0x40021000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f8c4 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM2_IRQHandler+0x10>)
 8000c56:	f002 fb65 	bl	8003324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000d8 	.word	0x200000d8

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f004 f8e6 	bl	8004e64 <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20004000 	.word	0x20004000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	20000224 	.word	0x20000224
 8000ccc:	20000240 	.word	0x20000240

08000cd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d2c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <LoopForever+0xe>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d10:	4c0b      	ldr	r4, [pc, #44]	; (8000d40 <LoopForever+0x16>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d1e:	f7ff ffd7 	bl	8000cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f004 f8a5 	bl	8004e70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d26:	f7ff faa3 	bl	8000270 <main>

08000d2a <LoopForever>:

LoopForever:
    b LoopForever
 8000d2a:	e7fe      	b.n	8000d2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d2c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d38:	0800587c 	.word	0x0800587c
  ldr r2, =_sbss
 8000d3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d40:	2000023c 	.word	0x2000023c

08000d44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_Init+0x28>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_Init+0x28>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f94f 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fe50 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f967 	bl	8001066 <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f92f 	bl	8001012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000228 	.word	0x20000228

08000dfc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000228 	.word	0x20000228

08000e14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff29 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff3e 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff8e 	bl	8000f50 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff31 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffa2 	bl	8000fb8 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108e:	e14e      	b.n	800132e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8140 	beq.w	8001328 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d005      	beq.n	80010c0 <HAL_GPIO_Init+0x40>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d130      	bne.n	8001122 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f6:	2201      	movs	r2, #1
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	f003 0201 	and.w	r2, r3, #1
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b03      	cmp	r3, #3
 800112c:	d017      	beq.n	800115e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d123      	bne.n	80011b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	08da      	lsrs	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3208      	adds	r2, #8
 8001172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	691a      	ldr	r2, [r3, #16]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	6939      	ldr	r1, [r7, #16]
 80011ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0203 	and.w	r2, r3, #3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 809a 	beq.w	8001328 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f4:	4b55      	ldr	r3, [pc, #340]	; (800134c <HAL_GPIO_Init+0x2cc>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a54      	ldr	r2, [pc, #336]	; (800134c <HAL_GPIO_Init+0x2cc>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b52      	ldr	r3, [pc, #328]	; (800134c <HAL_GPIO_Init+0x2cc>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800120c:	4a50      	ldr	r2, [pc, #320]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001236:	d013      	beq.n	8001260 <HAL_GPIO_Init+0x1e0>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a46      	ldr	r2, [pc, #280]	; (8001354 <HAL_GPIO_Init+0x2d4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d00d      	beq.n	800125c <HAL_GPIO_Init+0x1dc>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a45      	ldr	r2, [pc, #276]	; (8001358 <HAL_GPIO_Init+0x2d8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d007      	beq.n	8001258 <HAL_GPIO_Init+0x1d8>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a44      	ldr	r2, [pc, #272]	; (800135c <HAL_GPIO_Init+0x2dc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d101      	bne.n	8001254 <HAL_GPIO_Init+0x1d4>
 8001250:	2303      	movs	r3, #3
 8001252:	e006      	b.n	8001262 <HAL_GPIO_Init+0x1e2>
 8001254:	2305      	movs	r3, #5
 8001256:	e004      	b.n	8001262 <HAL_GPIO_Init+0x1e2>
 8001258:	2302      	movs	r3, #2
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0x1e2>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <HAL_GPIO_Init+0x1e2>
 8001260:	2300      	movs	r3, #0
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	f002 0203 	and.w	r2, r2, #3
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	4093      	lsls	r3, r2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001272:	4937      	ldr	r1, [pc, #220]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001280:	4b37      	ldr	r3, [pc, #220]	; (8001360 <HAL_GPIO_Init+0x2e0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012a4:	4a2e      	ldr	r2, [pc, #184]	; (8001360 <HAL_GPIO_Init+0x2e0>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_GPIO_Init+0x2e0>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012ce:	4a24      	ldr	r2, [pc, #144]	; (8001360 <HAL_GPIO_Init+0x2e0>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <HAL_GPIO_Init+0x2e0>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012f8:	4a19      	ldr	r2, [pc, #100]	; (8001360 <HAL_GPIO_Init+0x2e0>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_GPIO_Init+0x2e0>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <HAL_GPIO_Init+0x2e0>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	f47f aea9 	bne.w	8001090 <HAL_GPIO_Init+0x10>
  }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	48000400 	.word	0x48000400
 8001358:	48000800 	.word	0x48000800
 800135c:	48000c00 	.word	0x48000c00
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e001      	b.n	8001386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f001 b823 	b.w	8002430 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 817d 	beq.w	80016fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001400:	4bbc      	ldr	r3, [pc, #752]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b04      	cmp	r3, #4
 800140a:	d00c      	beq.n	8001426 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800140c:	4bb9      	ldr	r3, [pc, #740]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b08      	cmp	r3, #8
 8001416:	d15c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x10e>
 8001418:	4bb6      	ldr	r3, [pc, #728]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001424:	d155      	bne.n	80014d2 <HAL_RCC_OscConfig+0x10e>
 8001426:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800142a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800143a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	095b      	lsrs	r3, r3, #5
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d102      	bne.n	8001458 <HAL_RCC_OscConfig+0x94>
 8001452:	4ba8      	ldr	r3, [pc, #672]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	e015      	b.n	8001484 <HAL_RCC_OscConfig+0xc0>
 8001458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800145c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800146c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001470:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001474:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001480:	4b9c      	ldr	r3, [pc, #624]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001488:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800148c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001490:	fa92 f2a2 	rbit	r2, r2
 8001494:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001498:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800149c:	fab2 f282 	clz	r2, r2
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	f042 0220 	orr.w	r2, r2, #32
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	f002 021f 	and.w	r2, r2, #31
 80014ac:	2101      	movs	r1, #1
 80014ae:	fa01 f202 	lsl.w	r2, r1, r2
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 811f 	beq.w	80016f8 <HAL_RCC_OscConfig+0x334>
 80014ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f040 8116 	bne.w	80016f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f000 bfaf 	b.w	8002430 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x12e>
 80014e4:	4b83      	ldr	r3, [pc, #524]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a82      	ldr	r2, [pc, #520]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 80014ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e036      	b.n	8001560 <HAL_RCC_OscConfig+0x19c>
 80014f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0x158>
 8001502:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a7b      	ldr	r2, [pc, #492]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b79      	ldr	r3, [pc, #484]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a78      	ldr	r2, [pc, #480]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e021      	b.n	8001560 <HAL_RCC_OscConfig+0x19c>
 800151c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001520:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x184>
 800152e:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a70      	ldr	r2, [pc, #448]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b6e      	ldr	r3, [pc, #440]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6d      	ldr	r2, [pc, #436]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0x19c>
 8001548:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a69      	ldr	r2, [pc, #420]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b67      	ldr	r3, [pc, #412]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a66      	ldr	r2, [pc, #408]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001560:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	f023 020f 	bic.w	r2, r3, #15
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	495f      	ldr	r1, [pc, #380]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001576:	4313      	orrs	r3, r2
 8001578:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d059      	beq.n	800163e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fc37 	bl	8000dfc <HAL_GetTick>
 800158e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fc32 	bl	8000dfc <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b64      	cmp	r3, #100	; 0x64
 80015a2:	d902      	bls.n	80015aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	f000 bf43 	b.w	8002430 <HAL_RCC_OscConfig+0x106c>
 80015aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80015b6:	fa93 f3a3 	rbit	r3, r3
 80015ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80015be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	fab3 f383 	clz	r3, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	095b      	lsrs	r3, r3, #5
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d102      	bne.n	80015dc <HAL_RCC_OscConfig+0x218>
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	e015      	b.n	8001608 <HAL_RCC_OscConfig+0x244>
 80015dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015e0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80015e8:	fa93 f3a3 	rbit	r3, r3
 80015ec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80015fc:	fa93 f3a3 	rbit	r3, r3
 8001600:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001604:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800160c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001610:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001614:	fa92 f2a2 	rbit	r2, r2
 8001618:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800161c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001620:	fab2 f282 	clz	r2, r2
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	f042 0220 	orr.w	r2, r2, #32
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	f002 021f 	and.w	r2, r2, #31
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ab      	beq.n	8001594 <HAL_RCC_OscConfig+0x1d0>
 800163c:	e05d      	b.n	80016fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fbdd 	bl	8000dfc <HAL_GetTick>
 8001642:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	e00a      	b.n	800165e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fbd8 	bl	8000dfc <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b64      	cmp	r3, #100	; 0x64
 8001656:	d902      	bls.n	800165e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	f000 bee9 	b.w	8002430 <HAL_RCC_OscConfig+0x106c>
 800165e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001662:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001666:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001672:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	095b      	lsrs	r3, r3, #5
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b01      	cmp	r3, #1
 8001688:	d102      	bne.n	8001690 <HAL_RCC_OscConfig+0x2cc>
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	e015      	b.n	80016bc <HAL_RCC_OscConfig+0x2f8>
 8001690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001694:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001698:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800169c:	fa93 f3a3 	rbit	r3, r3
 80016a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80016a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_RCC_OscConfig+0x330>)
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80016c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80016c8:	fa92 f2a2 	rbit	r2, r2
 80016cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80016d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80016d4:	fab2 f282 	clz	r2, r2
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	f042 0220 	orr.w	r2, r2, #32
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	f002 021f 	and.w	r2, r2, #31
 80016e4:	2101      	movs	r1, #1
 80016e6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1ab      	bne.n	8001648 <HAL_RCC_OscConfig+0x284>
 80016f0:	e003      	b.n	80016fa <HAL_RCC_OscConfig+0x336>
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 817d 	beq.w	8001a0a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001710:	4ba6      	ldr	r3, [pc, #664]	; (80019ac <HAL_RCC_OscConfig+0x5e8>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00b      	beq.n	8001734 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800171c:	4ba3      	ldr	r3, [pc, #652]	; (80019ac <HAL_RCC_OscConfig+0x5e8>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	d172      	bne.n	800180e <HAL_RCC_OscConfig+0x44a>
 8001728:	4ba0      	ldr	r3, [pc, #640]	; (80019ac <HAL_RCC_OscConfig+0x5e8>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d16c      	bne.n	800180e <HAL_RCC_OscConfig+0x44a>
 8001734:	2302      	movs	r3, #2
 8001736:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800173e:	fa93 f3a3 	rbit	r3, r3
 8001742:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001746:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	095b      	lsrs	r3, r3, #5
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d102      	bne.n	8001764 <HAL_RCC_OscConfig+0x3a0>
 800175e:	4b93      	ldr	r3, [pc, #588]	; (80019ac <HAL_RCC_OscConfig+0x5e8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	e013      	b.n	800178c <HAL_RCC_OscConfig+0x3c8>
 8001764:	2302      	movs	r3, #2
 8001766:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800177c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001788:	4b88      	ldr	r3, [pc, #544]	; (80019ac <HAL_RCC_OscConfig+0x5e8>)
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	2202      	movs	r2, #2
 800178e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001792:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001796:	fa92 f2a2 	rbit	r2, r2
 800179a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800179e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80017a2:	fab2 f282 	clz	r2, r2
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	f042 0220 	orr.w	r2, r2, #32
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	f002 021f 	and.w	r2, r2, #31
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00a      	beq.n	80017d4 <HAL_RCC_OscConfig+0x410>
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d002      	beq.n	80017d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f000 be2e 	b.w	8002430 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d4:	4b75      	ldr	r3, [pc, #468]	; (80019ac <HAL_RCC_OscConfig+0x5e8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	21f8      	movs	r1, #248	; 0xf8
 80017ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80017f2:	fa91 f1a1 	rbit	r1, r1
 80017f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80017fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80017fe:	fab1 f181 	clz	r1, r1
 8001802:	b2c9      	uxtb	r1, r1
 8001804:	408b      	lsls	r3, r1
 8001806:	4969      	ldr	r1, [pc, #420]	; (80019ac <HAL_RCC_OscConfig+0x5e8>)
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180c:	e0fd      	b.n	8001a0a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8088 	beq.w	8001930 <HAL_RCC_OscConfig+0x56c>
 8001820:	2301      	movs	r3, #1
 8001822:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001832:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001840:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	461a      	mov	r2, r3
 8001848:	2301      	movs	r3, #1
 800184a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fad6 	bl	8000dfc <HAL_GetTick>
 8001850:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff fad1 	bl	8000dfc <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d902      	bls.n	800186c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	f000 bde2 	b.w	8002430 <HAL_RCC_OscConfig+0x106c>
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800187e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	095b      	lsrs	r3, r3, #5
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d102      	bne.n	800189c <HAL_RCC_OscConfig+0x4d8>
 8001896:	4b45      	ldr	r3, [pc, #276]	; (80019ac <HAL_RCC_OscConfig+0x5e8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	e013      	b.n	80018c4 <HAL_RCC_OscConfig+0x500>
 800189c:	2302      	movs	r3, #2
 800189e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80018ae:	2302      	movs	r3, #2
 80018b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80018b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80018c0:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <HAL_RCC_OscConfig+0x5e8>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	2202      	movs	r2, #2
 80018c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80018ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018ce:	fa92 f2a2 	rbit	r2, r2
 80018d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80018d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80018da:	fab2 f282 	clz	r2, r2
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	f042 0220 	orr.w	r2, r2, #32
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	f002 021f 	and.w	r2, r2, #31
 80018ea:	2101      	movs	r1, #1
 80018ec:	fa01 f202 	lsl.w	r2, r1, r2
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0af      	beq.n	8001856 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_RCC_OscConfig+0x5e8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	21f8      	movs	r1, #248	; 0xf8
 800190c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001914:	fa91 f1a1 	rbit	r1, r1
 8001918:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800191c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001920:	fab1 f181 	clz	r1, r1
 8001924:	b2c9      	uxtb	r1, r1
 8001926:	408b      	lsls	r3, r1
 8001928:	4920      	ldr	r1, [pc, #128]	; (80019ac <HAL_RCC_OscConfig+0x5e8>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
 800192e:	e06c      	b.n	8001a0a <HAL_RCC_OscConfig+0x646>
 8001930:	2301      	movs	r3, #1
 8001932:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001942:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001950:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	461a      	mov	r2, r3
 8001958:	2300      	movs	r3, #0
 800195a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fa4e 	bl	8000dfc <HAL_GetTick>
 8001960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff fa49 	bl	8000dfc <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d902      	bls.n	800197c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	f000 bd5a 	b.w	8002430 <HAL_RCC_OscConfig+0x106c>
 800197c:	2302      	movs	r3, #2
 800197e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800198e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	095b      	lsrs	r3, r3, #5
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d104      	bne.n	80019b0 <HAL_RCC_OscConfig+0x5ec>
 80019a6:	4b01      	ldr	r3, [pc, #4]	; (80019ac <HAL_RCC_OscConfig+0x5e8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	e015      	b.n	80019d8 <HAL_RCC_OscConfig+0x614>
 80019ac:	40021000 	.word	0x40021000
 80019b0:	2302      	movs	r3, #2
 80019b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80019c2:	2302      	movs	r3, #2
 80019c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80019c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80019d4:	4bc8      	ldr	r3, [pc, #800]	; (8001cf8 <HAL_RCC_OscConfig+0x934>)
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	2202      	movs	r2, #2
 80019da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80019de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019e2:	fa92 f2a2 	rbit	r2, r2
 80019e6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80019ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80019ee:	fab2 f282 	clz	r2, r2
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	f042 0220 	orr.w	r2, r2, #32
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	f002 021f 	and.w	r2, r2, #31
 80019fe:	2101      	movs	r1, #1
 8001a00:	fa01 f202 	lsl.w	r2, r1, r2
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1ad      	bne.n	8001966 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8110 	beq.w	8001c40 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d079      	beq.n	8001b24 <HAL_RCC_OscConfig+0x760>
 8001a30:	2301      	movs	r3, #1
 8001a32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a3a:	fa93 f3a3 	rbit	r3, r3
 8001a3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4bab      	ldr	r3, [pc, #684]	; (8001cfc <HAL_RCC_OscConfig+0x938>)
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	461a      	mov	r2, r3
 8001a56:	2301      	movs	r3, #1
 8001a58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f9cf 	bl	8000dfc <HAL_GetTick>
 8001a5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff f9ca 	bl	8000dfc <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d902      	bls.n	8001a7a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	f000 bcdb 	b.w	8002430 <HAL_RCC_OscConfig+0x106c>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a94:	2202      	movs	r2, #2
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f2a3 	rbit	r2, r3
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ab8:	2202      	movs	r2, #2
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	fa93 f2a3 	rbit	r2, r3
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ad2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad4:	4b88      	ldr	r3, [pc, #544]	; (8001cf8 <HAL_RCC_OscConfig+0x934>)
 8001ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	6019      	str	r1, [r3, #0]
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f1a3 	rbit	r1, r3
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001afa:	6019      	str	r1, [r3, #0]
  return result;
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0a0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x6a0>
 8001b22:	e08d      	b.n	8001c40 <HAL_RCC_OscConfig+0x87c>
 8001b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b46:	601a      	str	r2, [r3, #0]
  return result;
 8001b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b50:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <HAL_RCC_OscConfig+0x938>)
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	461a      	mov	r2, r3
 8001b62:	2300      	movs	r3, #0
 8001b64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7ff f949 	bl	8000dfc <HAL_GetTick>
 8001b6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff f944 	bl	8000dfc <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d902      	bls.n	8001b86 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	f000 bc55 	b.w	8002430 <HAL_RCC_OscConfig+0x106c>
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b8e:	2202      	movs	r2, #2
 8001b90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b96:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	fa93 f2a3 	rbit	r2, r3
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fa93 f2a3 	rbit	r2, r3
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001bf0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf2:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <HAL_RCC_OscConfig+0x934>)
 8001bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001bfe:	2102      	movs	r1, #2
 8001c00:	6019      	str	r1, [r3, #0]
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	fa93 f1a3 	rbit	r1, r3
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c18:	6019      	str	r1, [r3, #0]
  return result;
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	2101      	movs	r1, #1
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d197      	bne.n	8001b70 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 81a1 	beq.w	8001f98 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5c:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <HAL_RCC_OscConfig+0x934>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d116      	bne.n	8001c96 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c68:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <HAL_RCC_OscConfig+0x934>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	4a22      	ldr	r2, [pc, #136]	; (8001cf8 <HAL_RCC_OscConfig+0x934>)
 8001c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c72:	61d3      	str	r3, [r2, #28]
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_RCC_OscConfig+0x934>)
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c8e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCC_OscConfig+0x93c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d11a      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <HAL_RCC_OscConfig+0x93c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <HAL_RCC_OscConfig+0x93c>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cae:	f7ff f8a5 	bl	8000dfc <HAL_GetTick>
 8001cb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	e009      	b.n	8001ccc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb8:	f7ff f8a0 	bl	8000dfc <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b64      	cmp	r3, #100	; 0x64
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e3b1      	b.n	8002430 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_RCC_OscConfig+0x93c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ef      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10d      	bne.n	8001d04 <HAL_RCC_OscConfig+0x940>
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_OscConfig+0x934>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a02      	ldr	r2, [pc, #8]	; (8001cf8 <HAL_RCC_OscConfig+0x934>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	e03c      	b.n	8001d70 <HAL_RCC_OscConfig+0x9ac>
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	10908120 	.word	0x10908120
 8001d00:	40007000 	.word	0x40007000
 8001d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x96a>
 8001d14:	4bc1      	ldr	r3, [pc, #772]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4ac0      	ldr	r2, [pc, #768]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6213      	str	r3, [r2, #32]
 8001d20:	4bbe      	ldr	r3, [pc, #760]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4abd      	ldr	r2, [pc, #756]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6213      	str	r3, [r2, #32]
 8001d2c:	e020      	b.n	8001d70 <HAL_RCC_OscConfig+0x9ac>
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b05      	cmp	r3, #5
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x994>
 8001d3e:	4bb7      	ldr	r3, [pc, #732]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4ab6      	ldr	r2, [pc, #728]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	4bb4      	ldr	r3, [pc, #720]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4ab3      	ldr	r2, [pc, #716]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6213      	str	r3, [r2, #32]
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0x9ac>
 8001d58:	4bb0      	ldr	r3, [pc, #704]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4aaf      	ldr	r2, [pc, #700]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	6213      	str	r3, [r2, #32]
 8001d64:	4bad      	ldr	r3, [pc, #692]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4aac      	ldr	r2, [pc, #688]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001d6a:	f023 0304 	bic.w	r3, r3, #4
 8001d6e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 8081 	beq.w	8001e84 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7ff f83b 	bl	8000dfc <HAL_GetTick>
 8001d86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7ff f836 	bl	8000dfc <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e345      	b.n	8002430 <HAL_RCC_OscConfig+0x106c>
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001dac:	2202      	movs	r2, #2
 8001dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	fa93 f2a3 	rbit	r2, r3
 8001dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dcc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	fa93 f2a3 	rbit	r2, r3
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001dea:	601a      	str	r2, [r3, #0]
  return result;
 8001dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001df4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d102      	bne.n	8001e10 <HAL_RCC_OscConfig+0xa4c>
 8001e0a:	4b84      	ldr	r3, [pc, #528]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	e013      	b.n	8001e38 <HAL_RCC_OscConfig+0xa74>
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e20:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f2a3 	rbit	r2, r3
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	4b79      	ldr	r3, [pc, #484]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e40:	2102      	movs	r1, #2
 8001e42:	6011      	str	r1, [r2, #0]
 8001e44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e48:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	fa92 f1a2 	rbit	r1, r2
 8001e52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e56:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e5a:	6011      	str	r1, [r2, #0]
  return result;
 8001e5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e60:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	fab2 f282 	clz	r2, r2
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f002 021f 	and.w	r2, r2, #31
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d084      	beq.n	8001d8c <HAL_RCC_OscConfig+0x9c8>
 8001e82:	e07f      	b.n	8001f84 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7fe ffba 	bl	8000dfc <HAL_GetTick>
 8001e88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8c:	e00b      	b.n	8001ea6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7fe ffb5 	bl	8000dfc <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e2c4      	b.n	8002430 <HAL_RCC_OscConfig+0x106c>
 8001ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eaa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001eae:	2202      	movs	r2, #2
 8001eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eda:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	fa93 f2a3 	rbit	r2, r3
 8001ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001eec:	601a      	str	r2, [r3, #0]
  return result;
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ef6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d102      	bne.n	8001f12 <HAL_RCC_OscConfig+0xb4e>
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	e013      	b.n	8001f3a <HAL_RCC_OscConfig+0xb76>
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f2a3 	rbit	r2, r3
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f3e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f42:	2102      	movs	r1, #2
 8001f44:	6011      	str	r1, [r2, #0]
 8001f46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f4a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	fa92 f1a2 	rbit	r1, r2
 8001f54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f58:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f5c:	6011      	str	r1, [r2, #0]
  return result;
 8001f5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f62:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	fab2 f282 	clz	r2, r2
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f002 021f 	and.w	r2, r2, #31
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d184      	bne.n	8001e8e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	4a22      	ldr	r2, [pc, #136]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8242 	beq.w	800242e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_RCC_OscConfig+0xc58>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	f000 8213 	beq.w	80023de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	f040 8162 	bne.w	800228e <HAL_RCC_OscConfig+0xeca>
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001fd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fdc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	fa93 f2a3 	rbit	r2, r3
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fee:	601a      	str	r2, [r3, #0]
  return result;
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ff8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002004:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	461a      	mov	r2, r3
 800200c:	2300      	movs	r3, #0
 800200e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe fef4 	bl	8000dfc <HAL_GetTick>
 8002014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002018:	e00c      	b.n	8002034 <HAL_RCC_OscConfig+0xc70>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe feec 	bl	8000dfc <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e1fd      	b.n	8002430 <HAL_RCC_OscConfig+0x106c>
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800203c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fa93 f2a3 	rbit	r2, r3
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002058:	601a      	str	r2, [r3, #0]
  return result;
 800205a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002062:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d102      	bne.n	800207e <HAL_RCC_OscConfig+0xcba>
 8002078:	4bb0      	ldr	r3, [pc, #704]	; (800233c <HAL_RCC_OscConfig+0xf78>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	e027      	b.n	80020ce <HAL_RCC_OscConfig+0xd0a>
 800207e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002082:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002086:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800208a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	fa93 f2a3 	rbit	r2, r3
 800209a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	fa93 f2a3 	rbit	r2, r3
 80020c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	4b9c      	ldr	r3, [pc, #624]	; (800233c <HAL_RCC_OscConfig+0xf78>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020d2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80020d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020da:	6011      	str	r1, [r2, #0]
 80020dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	fa92 f1a2 	rbit	r1, r2
 80020ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020f2:	6011      	str	r1, [r2, #0]
  return result;
 80020f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d182      	bne.n	8002020 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211a:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_OscConfig+0xf78>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002126:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800212e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	430b      	orrs	r3, r1
 800213c:	497f      	ldr	r1, [pc, #508]	; (800233c <HAL_RCC_OscConfig+0xf78>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
 8002142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002146:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800214a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800214e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002154:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	fa93 f2a3 	rbit	r2, r3
 800215e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002162:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002166:	601a      	str	r2, [r3, #0]
  return result;
 8002168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002170:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800217c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	461a      	mov	r2, r3
 8002184:	2301      	movs	r3, #1
 8002186:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe fe38 	bl	8000dfc <HAL_GetTick>
 800218c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002190:	e009      	b.n	80021a6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002192:	f7fe fe33 	bl	8000dfc <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e144      	b.n	8002430 <HAL_RCC_OscConfig+0x106c>
 80021a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	fa93 f2a3 	rbit	r2, r3
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021ca:	601a      	str	r2, [r3, #0]
  return result;
 80021cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d102      	bne.n	80021f0 <HAL_RCC_OscConfig+0xe2c>
 80021ea:	4b54      	ldr	r3, [pc, #336]	; (800233c <HAL_RCC_OscConfig+0xf78>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	e027      	b.n	8002240 <HAL_RCC_OscConfig+0xe7c>
 80021f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80021f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002202:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800221e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002236:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	4b3f      	ldr	r3, [pc, #252]	; (800233c <HAL_RCC_OscConfig+0xf78>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002244:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002248:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800224c:	6011      	str	r1, [r2, #0]
 800224e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002252:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	fa92 f1a2 	rbit	r1, r2
 800225c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002260:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002264:	6011      	str	r1, [r2, #0]
  return result;
 8002266:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800226a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	fab2 f282 	clz	r2, r2
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	f042 0220 	orr.w	r2, r2, #32
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	f002 021f 	and.w	r2, r2, #31
 8002280:	2101      	movs	r1, #1
 8002282:	fa01 f202 	lsl.w	r2, r1, r2
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d082      	beq.n	8002192 <HAL_RCC_OscConfig+0xdce>
 800228c:	e0cf      	b.n	800242e <HAL_RCC_OscConfig+0x106a>
 800228e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002292:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002296:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800229a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022b2:	601a      	str	r2, [r3, #0]
  return result;
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	461a      	mov	r2, r3
 80022d0:	2300      	movs	r3, #0
 80022d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fd92 	bl	8000dfc <HAL_GetTick>
 80022d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe fd8d 	bl	8000dfc <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e09e      	b.n	8002430 <HAL_RCC_OscConfig+0x106c>
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80022fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002312:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002316:	601a      	str	r2, [r3, #0]
  return result;
 8002318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002320:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d104      	bne.n	8002340 <HAL_RCC_OscConfig+0xf7c>
 8002336:	4b01      	ldr	r3, [pc, #4]	; (800233c <HAL_RCC_OscConfig+0xf78>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	e029      	b.n	8002390 <HAL_RCC_OscConfig+0xfcc>
 800233c:	40021000 	.word	0x40021000
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002348:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800234c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800236e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	fa93 f2a3 	rbit	r2, r3
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_OscConfig+0x1078>)
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002394:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002398:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800239c:	6011      	str	r1, [r2, #0]
 800239e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023a2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	fa92 f1a2 	rbit	r1, r2
 80023ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023b4:	6011      	str	r1, [r2, #0]
  return result;
 80023b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	fab2 f282 	clz	r2, r2
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	f042 0220 	orr.w	r2, r2, #32
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	f002 021f 	and.w	r2, r2, #31
 80023d0:	2101      	movs	r1, #1
 80023d2:	fa01 f202 	lsl.w	r2, r1, r2
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d180      	bne.n	80022de <HAL_RCC_OscConfig+0xf1a>
 80023dc:	e027      	b.n	800242e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e01e      	b.n	8002430 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCC_OscConfig+0x1078>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	429a      	cmp	r2, r3
 8002410:	d10b      	bne.n	800242a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002412:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002416:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002426:	429a      	cmp	r2, r3
 8002428:	d001      	beq.n	800242e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b09e      	sub	sp, #120	; 0x78
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e162      	b.n	800271e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002458:	4b90      	ldr	r3, [pc, #576]	; (800269c <HAL_RCC_ClockConfig+0x25c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d910      	bls.n	8002488 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b8d      	ldr	r3, [pc, #564]	; (800269c <HAL_RCC_ClockConfig+0x25c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 0207 	bic.w	r2, r3, #7
 800246e:	498b      	ldr	r1, [pc, #556]	; (800269c <HAL_RCC_ClockConfig+0x25c>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b89      	ldr	r3, [pc, #548]	; (800269c <HAL_RCC_ClockConfig+0x25c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e14a      	b.n	800271e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b82      	ldr	r3, [pc, #520]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	497f      	ldr	r1, [pc, #508]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80dc 	beq.w	800266c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d13c      	bne.n	8002536 <HAL_RCC_ClockConfig+0xf6>
 80024bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d102      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xa6>
 80024e0:	4b6f      	ldr	r3, [pc, #444]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	e00f      	b.n	8002506 <HAL_RCC_ClockConfig+0xc6>
 80024e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	667b      	str	r3, [r7, #100]	; 0x64
 80024f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f8:	663b      	str	r3, [r7, #96]	; 0x60
 80024fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002502:	4b67      	ldr	r3, [pc, #412]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800250a:	65ba      	str	r2, [r7, #88]	; 0x58
 800250c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800250e:	fa92 f2a2 	rbit	r2, r2
 8002512:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002514:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002516:	fab2 f282 	clz	r2, r2
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	f042 0220 	orr.w	r2, r2, #32
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	f002 021f 	and.w	r2, r2, #31
 8002526:	2101      	movs	r1, #1
 8002528:	fa01 f202 	lsl.w	r2, r1, r2
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d17b      	bne.n	800262a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0f3      	b.n	800271e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d13c      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x178>
 800253e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002542:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	095b      	lsrs	r3, r3, #5
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d102      	bne.n	8002568 <HAL_RCC_ClockConfig+0x128>
 8002562:	4b4f      	ldr	r3, [pc, #316]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	e00f      	b.n	8002588 <HAL_RCC_ClockConfig+0x148>
 8002568:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800256c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	647b      	str	r3, [r7, #68]	; 0x44
 8002576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800257a:	643b      	str	r3, [r7, #64]	; 0x40
 800257c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002584:	4b46      	ldr	r3, [pc, #280]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800258c:	63ba      	str	r2, [r7, #56]	; 0x38
 800258e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002590:	fa92 f2a2 	rbit	r2, r2
 8002594:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002598:	fab2 f282 	clz	r2, r2
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	f042 0220 	orr.w	r2, r2, #32
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	f002 021f 	and.w	r2, r2, #31
 80025a8:	2101      	movs	r1, #1
 80025aa:	fa01 f202 	lsl.w	r2, r1, r2
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d13a      	bne.n	800262a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b2      	b.n	800271e <HAL_RCC_ClockConfig+0x2de>
 80025b8:	2302      	movs	r3, #2
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	095b      	lsrs	r3, r3, #5
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d102      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x1a0>
 80025da:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	e00d      	b.n	80025fc <HAL_RCC_ClockConfig+0x1bc>
 80025e0:	2302      	movs	r3, #2
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
 80025ec:	2302      	movs	r3, #2
 80025ee:	623b      	str	r3, [r7, #32]
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	2202      	movs	r2, #2
 80025fe:	61ba      	str	r2, [r7, #24]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	fa92 f2a2 	rbit	r2, r2
 8002606:	617a      	str	r2, [r7, #20]
  return result;
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	fab2 f282 	clz	r2, r2
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f042 0220 	orr.w	r2, r2, #32
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f002 021f 	and.w	r2, r2, #31
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e079      	b.n	800271e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f023 0203 	bic.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	491a      	ldr	r1, [pc, #104]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800263c:	f7fe fbde 	bl	8000dfc <HAL_GetTick>
 8002640:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	e00a      	b.n	800265a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002644:	f7fe fbda 	bl	8000dfc <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e061      	b.n	800271e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 020c 	and.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d1eb      	bne.n	8002644 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_ClockConfig+0x25c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d214      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_RCC_ClockConfig+0x25c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 0207 	bic.w	r2, r3, #7
 8002682:	4906      	ldr	r1, [pc, #24]	; (800269c <HAL_RCC_ClockConfig+0x25c>)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <HAL_RCC_ClockConfig+0x25c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e040      	b.n	800271e <HAL_RCC_ClockConfig+0x2de>
 800269c:	40022000 	.word	0x40022000
 80026a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_RCC_ClockConfig+0x2e8>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	491a      	ldr	r1, [pc, #104]	; (8002728 <HAL_RCC_ClockConfig+0x2e8>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <HAL_RCC_ClockConfig+0x2e8>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4912      	ldr	r1, [pc, #72]	; (8002728 <HAL_RCC_ClockConfig+0x2e8>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026e2:	f000 f85d 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 80026e6:	4601      	mov	r1, r0
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <HAL_RCC_ClockConfig+0x2e8>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f0:	22f0      	movs	r2, #240	; 0xf0
 80026f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	fa92 f2a2 	rbit	r2, r2
 80026fa:	60fa      	str	r2, [r7, #12]
  return result;
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	40d3      	lsrs	r3, r2
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_RCC_ClockConfig+0x2ec>)
 8002708:	5cd3      	ldrb	r3, [r2, r3]
 800270a:	fa21 f303 	lsr.w	r3, r1, r3
 800270e:	4a08      	ldr	r2, [pc, #32]	; (8002730 <HAL_RCC_ClockConfig+0x2f0>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_RCC_ClockConfig+0x2f4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fb2c 	bl	8000d74 <HAL_InitTick>
  
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3778      	adds	r7, #120	; 0x78
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	08005808 	.word	0x08005808
 8002730:	20000000 	.word	0x20000000
 8002734:	20000004 	.word	0x20000004

08002738 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002748:	2303      	movs	r3, #3
 800274a:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002754:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_RCC_MCOConfig+0x64>)
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	4a0f      	ldr	r2, [pc, #60]	; (800279c <HAL_RCC_MCOConfig+0x64>)
 8002760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002764:	6153      	str	r3, [r2, #20]
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_RCC_MCOConfig+0x64>)
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	4619      	mov	r1, r3
 8002778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800277c:	f7fe fc80 	bl	8001080 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_RCC_MCOConfig+0x64>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	430b      	orrs	r3, r1
 800278e:	4903      	ldr	r1, [pc, #12]	; (800279c <HAL_RCC_MCOConfig+0x64>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
}
 8002794:	bf00      	nop
 8002796:	3728      	adds	r7, #40	; 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000

080027a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b08b      	sub	sp, #44	; 0x2c
 80027a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027ba:	4b29      	ldr	r3, [pc, #164]	; (8002860 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x30>
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x36>
 80027ce:	e03c      	b.n	800284a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d0:	4b24      	ldr	r3, [pc, #144]	; (8002864 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027d2:	623b      	str	r3, [r7, #32]
      break;
 80027d4:	e03c      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	fa92 f2a2 	rbit	r2, r2
 80027e8:	607a      	str	r2, [r7, #4]
  return result;
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	fab2 f282 	clz	r2, r2
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	40d3      	lsrs	r3, r2
 80027f4:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	220f      	movs	r2, #15
 8002804:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	fa92 f2a2 	rbit	r2, r2
 800280c:	60fa      	str	r2, [r7, #12]
  return result;
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	fab2 f282 	clz	r2, r2
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	40d3      	lsrs	r3, r2
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_RCC_GetSysClockFreq+0xcc>)
 800281a:	5cd3      	ldrb	r3, [r2, r3]
 800281c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002828:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <HAL_RCC_GetSysClockFreq+0xc4>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
 8002838:	e004      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <HAL_RCC_GetSysClockFreq+0xd0>)
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	623b      	str	r3, [r7, #32]
      break;
 8002848:	e002      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCC_GetSysClockFreq+0xc4>)
 800284c:	623b      	str	r3, [r7, #32]
      break;
 800284e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002850:	6a3b      	ldr	r3, [r7, #32]
}
 8002852:	4618      	mov	r0, r3
 8002854:	372c      	adds	r7, #44	; 0x2c
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	007a1200 	.word	0x007a1200
 8002868:	08005820 	.word	0x08005820
 800286c:	08005830 	.word	0x08005830
 8002870:	003d0900 	.word	0x003d0900

08002874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_RCC_GetHCLKFreq+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000000 	.word	0x20000000

0800288c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002892:	f7ff ffef 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 8002896:	4601      	mov	r1, r0
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	fa92 f2a2 	rbit	r2, r2
 80028ac:	603a      	str	r2, [r7, #0]
  return result;
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	fab2 f282 	clz	r2, r2
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	40d3      	lsrs	r3, r2
 80028b8:	4a04      	ldr	r2, [pc, #16]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80028ba:	5cd3      	ldrb	r3, [r2, r3]
 80028bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08005818 	.word	0x08005818

080028d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028d6:	f7ff ffcd 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 80028da:	4601      	mov	r1, r0
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	fa92 f2a2 	rbit	r2, r2
 80028f0:	603a      	str	r2, [r7, #0]
  return result;
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	fab2 f282 	clz	r2, r2
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	40d3      	lsrs	r3, r2
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <HAL_RCC_GetPCLK2Freq+0x40>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	08005818 	.word	0x08005818

08002914 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b092      	sub	sp, #72	; 0x48
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002924:	2300      	movs	r3, #0
 8002926:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80d4 	beq.w	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002938:	4b4e      	ldr	r3, [pc, #312]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10e      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002944:	4b4b      	ldr	r3, [pc, #300]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	4a4a      	ldr	r2, [pc, #296]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294e:	61d3      	str	r3, [r2, #28]
 8002950:	4b48      	ldr	r3, [pc, #288]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	4b45      	ldr	r3, [pc, #276]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d118      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296e:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a41      	ldr	r2, [pc, #260]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297a:	f7fe fa3f 	bl	8000dfc <HAL_GetTick>
 800297e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	e008      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002982:	f7fe fa3b 	bl	8000dfc <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b64      	cmp	r3, #100	; 0x64
 800298e:	d901      	bls.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e13c      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029a0:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8084 	beq.w	8002aba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029bc:	429a      	cmp	r2, r3
 80029be:	d07c      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029c0:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	461a      	mov	r2, r3
 80029ea:	2301      	movs	r3, #1
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2300      	movs	r3, #0
 8002a10:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a12:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a16:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d04b      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7fe f9eb 	bl	8000dfc <HAL_GetTick>
 8002a26:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2a:	f7fe f9e7 	bl	8000dfc <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e0e6      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002a40:	2302      	movs	r3, #2
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	61fb      	str	r3, [r7, #28]
  return result;
 8002a58:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d108      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a6e:	4b01      	ldr	r3, [pc, #4]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	e00d      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40007000 	.word	0x40007000
 8002a7c:	10908100 	.word	0x10908100
 8002a80:	2302      	movs	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	4b62      	ldr	r3, [pc, #392]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2202      	movs	r2, #2
 8002a92:	613a      	str	r2, [r7, #16]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	fa92 f2a2 	rbit	r2, r2
 8002a9a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	fab2 f282 	clz	r2, r2
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f002 021f 	and.w	r2, r2, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0b7      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002aba:	4b57      	ldr	r3, [pc, #348]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4954      	ldr	r1, [pc, #336]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002acc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad4:	4b50      	ldr	r3, [pc, #320]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4a4f      	ldr	r2, [pc, #316]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ade:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aec:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	f023 0203 	bic.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4947      	ldr	r1, [pc, #284]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b0a:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f023 0210 	bic.w	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4940      	ldr	r1, [pc, #256]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b28:	4b3b      	ldr	r3, [pc, #236]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	f023 0220 	bic.w	r2, r3, #32
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	4938      	ldr	r1, [pc, #224]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4931      	ldr	r1, [pc, #196]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b64:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	4929      	ldr	r1, [pc, #164]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	4922      	ldr	r1, [pc, #136]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	491a      	ldr	r1, [pc, #104]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	4913      	ldr	r1, [pc, #76]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	490b      	ldr	r1, [pc, #44]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	4904      	ldr	r1, [pc, #16]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3748      	adds	r7, #72	; 0x48
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000

08002c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e049      	b.n	8002cc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd ff04 	bl	8000a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f000 ff5e 	bl	8003b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e03b      	b.n	8002d5c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d009      	beq.n	8002d1a <HAL_TIM_Base_Start_IT+0x4e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0e:	d004      	beq.n	8002d1a <HAL_TIM_Base_Start_IT+0x4e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <HAL_TIM_Base_Start_IT+0xa0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d115      	bne.n	8002d46 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <HAL_TIM_Base_Start_IT+0xa4>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d015      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x8c>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d011      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d44:	e008      	b.n	8002d58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e000      	b.n	8002d5a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	00010007 	.word	0x00010007

08002d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e049      	b.n	8002e1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f841 	bl	8002e22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f000 feb2 	bl	8003b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_TIM_PWM_Start+0x24>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e03c      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d109      	bne.n	8002e76 <HAL_TIM_PWM_Start+0x3e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	e02f      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d109      	bne.n	8002e90 <HAL_TIM_PWM_Start+0x58>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	bf14      	ite	ne
 8002e88:	2301      	movne	r3, #1
 8002e8a:	2300      	moveq	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e022      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d109      	bne.n	8002eaa <HAL_TIM_PWM_Start+0x72>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e015      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d109      	bne.n	8002ec4 <HAL_TIM_PWM_Start+0x8c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e008      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e083      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <HAL_TIM_PWM_Start+0xb6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eec:	e023      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d104      	bne.n	8002efe <HAL_TIM_PWM_Start+0xc6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002efc:	e01b      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_PWM_Start+0xd6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f0c:	e013      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b0c      	cmp	r3, #12
 8002f12:	d104      	bne.n	8002f1e <HAL_TIM_PWM_Start+0xe6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f1c:	e00b      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_PWM_Start+0xf6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f2c:	e003      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	6839      	ldr	r1, [r7, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f001 faa6 	bl	8004490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a29      	ldr	r2, [pc, #164]	; (8002ff0 <HAL_TIM_PWM_Start+0x1b8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00e      	beq.n	8002f6c <HAL_TIM_PWM_Start+0x134>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a28      	ldr	r2, [pc, #160]	; (8002ff4 <HAL_TIM_PWM_Start+0x1bc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d009      	beq.n	8002f6c <HAL_TIM_PWM_Start+0x134>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <HAL_TIM_PWM_Start+0x1c0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <HAL_TIM_PWM_Start+0x134>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a25      	ldr	r2, [pc, #148]	; (8002ffc <HAL_TIM_PWM_Start+0x1c4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_TIM_PWM_Start+0x138>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_TIM_PWM_Start+0x13a>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a19      	ldr	r2, [pc, #100]	; (8002ff0 <HAL_TIM_PWM_Start+0x1b8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_TIM_PWM_Start+0x16c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f98:	d004      	beq.n	8002fa4 <HAL_TIM_PWM_Start+0x16c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <HAL_TIM_PWM_Start+0x1bc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d115      	bne.n	8002fd0 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_TIM_PWM_Start+0x1c8>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d015      	beq.n	8002fe2 <HAL_TIM_PWM_Start+0x1aa>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d011      	beq.n	8002fe2 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fce:	e008      	b.n	8002fe2 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e000      	b.n	8002fe4 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40012c00 	.word	0x40012c00
 8002ff4:	40014000 	.word	0x40014000
 8002ff8:	40014400 	.word	0x40014400
 8002ffc:	40014800 	.word	0x40014800
 8003000:	00010007 	.word	0x00010007

08003004 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e049      	b.n	80030aa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f841 	bl	80030b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	4619      	mov	r1, r3
 8003042:	4610      	mov	r0, r2
 8003044:	f000 fd6a 	bl	8003b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d104      	bne.n	80030e6 <HAL_TIM_IC_Start_IT+0x1e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e023      	b.n	800312e <HAL_TIM_IC_Start_IT+0x66>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_IC_Start_IT+0x2e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	e01b      	b.n	800312e <HAL_TIM_IC_Start_IT+0x66>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_IC_Start_IT+0x3e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003102:	b2db      	uxtb	r3, r3
 8003104:	e013      	b.n	800312e <HAL_TIM_IC_Start_IT+0x66>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b0c      	cmp	r3, #12
 800310a:	d104      	bne.n	8003116 <HAL_TIM_IC_Start_IT+0x4e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e00b      	b.n	800312e <HAL_TIM_IC_Start_IT+0x66>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b10      	cmp	r3, #16
 800311a:	d104      	bne.n	8003126 <HAL_TIM_IC_Start_IT+0x5e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003122:	b2db      	uxtb	r3, r3
 8003124:	e003      	b.n	800312e <HAL_TIM_IC_Start_IT+0x66>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800312c:	b2db      	uxtb	r3, r3
 800312e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d104      	bne.n	8003140 <HAL_TIM_IC_Start_IT+0x78>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800313c:	b2db      	uxtb	r3, r3
 800313e:	e013      	b.n	8003168 <HAL_TIM_IC_Start_IT+0xa0>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b04      	cmp	r3, #4
 8003144:	d104      	bne.n	8003150 <HAL_TIM_IC_Start_IT+0x88>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e00b      	b.n	8003168 <HAL_TIM_IC_Start_IT+0xa0>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b08      	cmp	r3, #8
 8003154:	d104      	bne.n	8003160 <HAL_TIM_IC_Start_IT+0x98>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e003      	b.n	8003168 <HAL_TIM_IC_Start_IT+0xa0>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003166:	b2db      	uxtb	r3, r3
 8003168:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800316a:	7bbb      	ldrb	r3, [r7, #14]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d102      	bne.n	8003176 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003170:	7b7b      	ldrb	r3, [r7, #13]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d001      	beq.n	800317a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e0c9      	b.n	800330e <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <HAL_TIM_IC_Start_IT+0xc2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003188:	e023      	b.n	80031d2 <HAL_TIM_IC_Start_IT+0x10a>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b04      	cmp	r3, #4
 800318e:	d104      	bne.n	800319a <HAL_TIM_IC_Start_IT+0xd2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003198:	e01b      	b.n	80031d2 <HAL_TIM_IC_Start_IT+0x10a>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d104      	bne.n	80031aa <HAL_TIM_IC_Start_IT+0xe2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a8:	e013      	b.n	80031d2 <HAL_TIM_IC_Start_IT+0x10a>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_IC_Start_IT+0xf2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031b8:	e00b      	b.n	80031d2 <HAL_TIM_IC_Start_IT+0x10a>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d104      	bne.n	80031ca <HAL_TIM_IC_Start_IT+0x102>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c8:	e003      	b.n	80031d2 <HAL_TIM_IC_Start_IT+0x10a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <HAL_TIM_IC_Start_IT+0x11a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e0:	e013      	b.n	800320a <HAL_TIM_IC_Start_IT+0x142>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d104      	bne.n	80031f2 <HAL_TIM_IC_Start_IT+0x12a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031f0:	e00b      	b.n	800320a <HAL_TIM_IC_Start_IT+0x142>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_IC_Start_IT+0x13a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003200:	e003      	b.n	800320a <HAL_TIM_IC_Start_IT+0x142>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b0c      	cmp	r3, #12
 800320e:	d841      	bhi.n	8003294 <HAL_TIM_IC_Start_IT+0x1cc>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_TIM_IC_Start_IT+0x150>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	0800324d 	.word	0x0800324d
 800321c:	08003295 	.word	0x08003295
 8003220:	08003295 	.word	0x08003295
 8003224:	08003295 	.word	0x08003295
 8003228:	0800325f 	.word	0x0800325f
 800322c:	08003295 	.word	0x08003295
 8003230:	08003295 	.word	0x08003295
 8003234:	08003295 	.word	0x08003295
 8003238:	08003271 	.word	0x08003271
 800323c:	08003295 	.word	0x08003295
 8003240:	08003295 	.word	0x08003295
 8003244:	08003295 	.word	0x08003295
 8003248:	08003283 	.word	0x08003283
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0202 	orr.w	r2, r2, #2
 800325a:	60da      	str	r2, [r3, #12]
      break;
 800325c:	e01d      	b.n	800329a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0204 	orr.w	r2, r2, #4
 800326c:	60da      	str	r2, [r3, #12]
      break;
 800326e:	e014      	b.n	800329a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0208 	orr.w	r2, r2, #8
 800327e:	60da      	str	r2, [r3, #12]
      break;
 8003280:	e00b      	b.n	800329a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0210 	orr.w	r2, r2, #16
 8003290:	60da      	str	r2, [r3, #12]
      break;
 8003292:	e002      	b.n	800329a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	bf00      	nop
  }

  if (status == HAL_OK)
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d135      	bne.n	800330c <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2201      	movs	r2, #1
 80032a6:	6839      	ldr	r1, [r7, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f001 f8f1 	bl	8004490 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a19      	ldr	r2, [pc, #100]	; (8003318 <HAL_TIM_IC_Start_IT+0x250>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d009      	beq.n	80032cc <HAL_TIM_IC_Start_IT+0x204>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c0:	d004      	beq.n	80032cc <HAL_TIM_IC_Start_IT+0x204>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <HAL_TIM_IC_Start_IT+0x254>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d115      	bne.n	80032f8 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	4b13      	ldr	r3, [pc, #76]	; (8003320 <HAL_TIM_IC_Start_IT+0x258>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d015      	beq.n	800330a <HAL_TIM_IC_Start_IT+0x242>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d011      	beq.n	800330a <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0201 	orr.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f6:	e008      	b.n	800330a <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e000      	b.n	800330c <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40014000 	.word	0x40014000
 8003320:	00010007 	.word	0x00010007

08003324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d122      	bne.n	8003380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b02      	cmp	r3, #2
 8003346:	d11b      	bne.n	8003380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0202 	mvn.w	r2, #2
 8003350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd f9ba 	bl	80006e0 <HAL_TIM_IC_CaptureCallback>
 800336c:	e005      	b.n	800337a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fbb6 	bl	8003ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fbbd 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b04      	cmp	r3, #4
 800338c:	d122      	bne.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b04      	cmp	r3, #4
 800339a:	d11b      	bne.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0204 	mvn.w	r2, #4
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd f990 	bl	80006e0 <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fb8c 	bl	8003ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fb93 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d122      	bne.n	8003428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d11b      	bne.n	8003428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0208 	mvn.w	r2, #8
 80033f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2204      	movs	r2, #4
 80033fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fd f966 	bl	80006e0 <HAL_TIM_IC_CaptureCallback>
 8003414:	e005      	b.n	8003422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fb62 	bl	8003ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fb69 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b10      	cmp	r3, #16
 8003434:	d122      	bne.n	800347c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b10      	cmp	r3, #16
 8003442:	d11b      	bne.n	800347c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0210 	mvn.w	r2, #16
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2208      	movs	r2, #8
 8003452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd f93c 	bl	80006e0 <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fb38 	bl	8003ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fb3f 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d10e      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d107      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0201 	mvn.w	r2, #1
 80034a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd f992 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b80      	cmp	r3, #128	; 0x80
 80034b4:	d10e      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	2b80      	cmp	r3, #128	; 0x80
 80034c2:	d107      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f001 f8ec 	bl	80046ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e2:	d10e      	bne.n	8003502 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d107      	bne.n	8003502 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f001 f8df 	bl	80046c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d10e      	bne.n	800352e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b40      	cmp	r3, #64	; 0x40
 800351c:	d107      	bne.n	800352e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 faed 	bl	8003b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b20      	cmp	r3, #32
 800353a:	d10e      	bne.n	800355a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b20      	cmp	r3, #32
 8003548:	d107      	bne.n	800355a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f06f 0220 	mvn.w	r2, #32
 8003552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f001 f89f 	bl	8004698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_TIM_IC_ConfigChannel+0x1e>
 800357c:	2302      	movs	r3, #2
 800357e:	e088      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x130>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11b      	bne.n	80035c6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	6819      	ldr	r1, [r3, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f000 fdd1 	bl	8004144 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 020c 	bic.w	r2, r2, #12
 80035b0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6999      	ldr	r1, [r3, #24]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	619a      	str	r2, [r3, #24]
 80035c4:	e060      	b.n	8003688 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d11c      	bne.n	8003606 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f000 fe37 	bl	800424e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035ee:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6999      	ldr	r1, [r3, #24]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	021a      	lsls	r2, r3, #8
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	619a      	str	r2, [r3, #24]
 8003604:	e040      	b.n	8003688 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b08      	cmp	r3, #8
 800360a:	d11b      	bne.n	8003644 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	6819      	ldr	r1, [r3, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f000 fe84 	bl	8004328 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 020c 	bic.w	r2, r2, #12
 800362e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69d9      	ldr	r1, [r3, #28]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	61da      	str	r2, [r3, #28]
 8003642:	e021      	b.n	8003688 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d11c      	bne.n	8003684 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f000 fea1 	bl	80043a0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69da      	ldr	r2, [r3, #28]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800366c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69d9      	ldr	r1, [r3, #28]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	021a      	lsls	r2, r3, #8
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	61da      	str	r2, [r3, #28]
 8003682:	e001      	b.n	8003688 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003690:	7dfb      	ldrb	r3, [r7, #23]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e0ff      	b.n	80038ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b14      	cmp	r3, #20
 80036c6:	f200 80f0 	bhi.w	80038aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80036ca:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	08003725 	.word	0x08003725
 80036d4:	080038ab 	.word	0x080038ab
 80036d8:	080038ab 	.word	0x080038ab
 80036dc:	080038ab 	.word	0x080038ab
 80036e0:	08003765 	.word	0x08003765
 80036e4:	080038ab 	.word	0x080038ab
 80036e8:	080038ab 	.word	0x080038ab
 80036ec:	080038ab 	.word	0x080038ab
 80036f0:	080037a7 	.word	0x080037a7
 80036f4:	080038ab 	.word	0x080038ab
 80036f8:	080038ab 	.word	0x080038ab
 80036fc:	080038ab 	.word	0x080038ab
 8003700:	080037e7 	.word	0x080037e7
 8003704:	080038ab 	.word	0x080038ab
 8003708:	080038ab 	.word	0x080038ab
 800370c:	080038ab 	.word	0x080038ab
 8003710:	08003829 	.word	0x08003829
 8003714:	080038ab 	.word	0x080038ab
 8003718:	080038ab 	.word	0x080038ab
 800371c:	080038ab 	.word	0x080038ab
 8003720:	08003869 	.word	0x08003869
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fa64 	bl	8003bf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0208 	orr.w	r2, r2, #8
 800373e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0204 	bic.w	r2, r2, #4
 800374e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6999      	ldr	r1, [r3, #24]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	619a      	str	r2, [r3, #24]
      break;
 8003762:	e0a5      	b.n	80038b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 faca 	bl	8003d04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6999      	ldr	r1, [r3, #24]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	619a      	str	r2, [r3, #24]
      break;
 80037a4:	e084      	b.n	80038b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fb29 	bl	8003e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0208 	orr.w	r2, r2, #8
 80037c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0204 	bic.w	r2, r2, #4
 80037d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69d9      	ldr	r1, [r3, #28]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	61da      	str	r2, [r3, #28]
      break;
 80037e4:	e064      	b.n	80038b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fb87 	bl	8003f00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69d9      	ldr	r1, [r3, #28]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	021a      	lsls	r2, r3, #8
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	61da      	str	r2, [r3, #28]
      break;
 8003826:	e043      	b.n	80038b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fbca 	bl	8003fc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0208 	orr.w	r2, r2, #8
 8003842:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0204 	bic.w	r2, r2, #4
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003866:	e023      	b.n	80038b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fc08 	bl	8004084 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003882:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	021a      	lsls	r2, r3, #8
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038a8:	e002      	b.n	80038b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	75fb      	strb	r3, [r7, #23]
      break;
 80038ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop

080038c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_TIM_ConfigClockSource+0x1c>
 80038dc:	2302      	movs	r3, #2
 80038de:	e0b6      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x18a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800390a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391c:	d03e      	beq.n	800399c <HAL_TIM_ConfigClockSource+0xd8>
 800391e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003922:	f200 8087 	bhi.w	8003a34 <HAL_TIM_ConfigClockSource+0x170>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392a:	f000 8086 	beq.w	8003a3a <HAL_TIM_ConfigClockSource+0x176>
 800392e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003932:	d87f      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x170>
 8003934:	2b70      	cmp	r3, #112	; 0x70
 8003936:	d01a      	beq.n	800396e <HAL_TIM_ConfigClockSource+0xaa>
 8003938:	2b70      	cmp	r3, #112	; 0x70
 800393a:	d87b      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x170>
 800393c:	2b60      	cmp	r3, #96	; 0x60
 800393e:	d050      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x11e>
 8003940:	2b60      	cmp	r3, #96	; 0x60
 8003942:	d877      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x170>
 8003944:	2b50      	cmp	r3, #80	; 0x50
 8003946:	d03c      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0xfe>
 8003948:	2b50      	cmp	r3, #80	; 0x50
 800394a:	d873      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x170>
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d058      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x13e>
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d86f      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x170>
 8003954:	2b30      	cmp	r3, #48	; 0x30
 8003956:	d064      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15e>
 8003958:	2b30      	cmp	r3, #48	; 0x30
 800395a:	d86b      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x170>
 800395c:	2b20      	cmp	r3, #32
 800395e:	d060      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15e>
 8003960:	2b20      	cmp	r3, #32
 8003962:	d867      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x170>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d05c      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15e>
 8003968:	2b10      	cmp	r3, #16
 800396a:	d05a      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15e>
 800396c:	e062      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6899      	ldr	r1, [r3, #8]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f000 fd67 	bl	8004450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003990:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	609a      	str	r2, [r3, #8]
      break;
 800399a:	e04f      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	6899      	ldr	r1, [r3, #8]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f000 fd50 	bl	8004450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039be:	609a      	str	r2, [r3, #8]
      break;
 80039c0:	e03c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f000 fc0e 	bl	80041f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2150      	movs	r1, #80	; 0x50
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fd1d 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 80039e0:	e02c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f000 fc6a 	bl	80042c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2160      	movs	r1, #96	; 0x60
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fd0d 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8003a00:	e01c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f000 fbee 	bl	80041f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2140      	movs	r1, #64	; 0x40
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fcfd 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8003a20:	e00c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	f000 fcf4 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8003a32:	e003      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      break;
 8003a38:	e000      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	d831      	bhi.n	8003ad0 <HAL_TIM_ReadCapturedValue+0x78>
 8003a6c:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003aa9 	.word	0x08003aa9
 8003a78:	08003ad1 	.word	0x08003ad1
 8003a7c:	08003ad1 	.word	0x08003ad1
 8003a80:	08003ad1 	.word	0x08003ad1
 8003a84:	08003ab3 	.word	0x08003ab3
 8003a88:	08003ad1 	.word	0x08003ad1
 8003a8c:	08003ad1 	.word	0x08003ad1
 8003a90:	08003ad1 	.word	0x08003ad1
 8003a94:	08003abd 	.word	0x08003abd
 8003a98:	08003ad1 	.word	0x08003ad1
 8003a9c:	08003ad1 	.word	0x08003ad1
 8003aa0:	08003ad1 	.word	0x08003ad1
 8003aa4:	08003ac7 	.word	0x08003ac7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aae:	60fb      	str	r3, [r7, #12]

      break;
 8003ab0:	e00f      	b.n	8003ad2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	60fb      	str	r3, [r7, #12]

      break;
 8003aba:	e00a      	b.n	8003ad2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac2:	60fb      	str	r3, [r7, #12]

      break;
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	60fb      	str	r3, [r7, #12]

      break;
 8003ace:	e000      	b.n	8003ad2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003ad0:	bf00      	nop
  }

  return tmpreg;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a2e      	ldr	r2, [pc, #184]	; (8003be8 <TIM_Base_SetConfig+0xcc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_Base_SetConfig+0x20>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3a:	d108      	bne.n	8003b4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a25      	ldr	r2, [pc, #148]	; (8003be8 <TIM_Base_SetConfig+0xcc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00f      	beq.n	8003b76 <TIM_Base_SetConfig+0x5a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5c:	d00b      	beq.n	8003b76 <TIM_Base_SetConfig+0x5a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a22      	ldr	r2, [pc, #136]	; (8003bec <TIM_Base_SetConfig+0xd0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <TIM_Base_SetConfig+0x5a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a21      	ldr	r2, [pc, #132]	; (8003bf0 <TIM_Base_SetConfig+0xd4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <TIM_Base_SetConfig+0x5a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a20      	ldr	r2, [pc, #128]	; (8003bf4 <TIM_Base_SetConfig+0xd8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d108      	bne.n	8003b88 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a0e      	ldr	r2, [pc, #56]	; (8003be8 <TIM_Base_SetConfig+0xcc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <TIM_Base_SetConfig+0xb0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a0d      	ldr	r2, [pc, #52]	; (8003bec <TIM_Base_SetConfig+0xd0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d007      	beq.n	8003bcc <TIM_Base_SetConfig+0xb0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <TIM_Base_SetConfig+0xd4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_Base_SetConfig+0xb0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0b      	ldr	r2, [pc, #44]	; (8003bf4 <TIM_Base_SetConfig+0xd8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d103      	bne.n	8003bd4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	615a      	str	r2, [r3, #20]
}
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40014000 	.word	0x40014000
 8003bf0:	40014400 	.word	0x40014400
 8003bf4:	40014800 	.word	0x40014800

08003bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f023 0201 	bic.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f023 0302 	bic.w	r3, r3, #2
 8003c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <TIM_OC1_SetConfig+0xfc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00b      	beq.n	8003c70 <TIM_OC1_SetConfig+0x78>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <TIM_OC1_SetConfig+0x100>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d007      	beq.n	8003c70 <TIM_OC1_SetConfig+0x78>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <TIM_OC1_SetConfig+0x104>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_OC1_SetConfig+0x78>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a25      	ldr	r2, [pc, #148]	; (8003d00 <TIM_OC1_SetConfig+0x108>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d10c      	bne.n	8003c8a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f023 0308 	bic.w	r3, r3, #8
 8003c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f023 0304 	bic.w	r3, r3, #4
 8003c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <TIM_OC1_SetConfig+0xfc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00b      	beq.n	8003caa <TIM_OC1_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <TIM_OC1_SetConfig+0x100>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <TIM_OC1_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a17      	ldr	r2, [pc, #92]	; (8003cfc <TIM_OC1_SetConfig+0x104>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d003      	beq.n	8003caa <TIM_OC1_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a16      	ldr	r2, [pc, #88]	; (8003d00 <TIM_OC1_SetConfig+0x108>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d111      	bne.n	8003cce <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	621a      	str	r2, [r3, #32]
}
 8003ce8:	bf00      	nop
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40014000 	.word	0x40014000
 8003cfc:	40014400 	.word	0x40014400
 8003d00:	40014800 	.word	0x40014800

08003d04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f023 0210 	bic.w	r2, r3, #16
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0320 	bic.w	r3, r3, #32
 8003d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a24      	ldr	r2, [pc, #144]	; (8003df4 <TIM_OC2_SetConfig+0xf0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d10d      	bne.n	8003d84 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <TIM_OC2_SetConfig+0xf0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00b      	beq.n	8003da4 <TIM_OC2_SetConfig+0xa0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a1a      	ldr	r2, [pc, #104]	; (8003df8 <TIM_OC2_SetConfig+0xf4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d007      	beq.n	8003da4 <TIM_OC2_SetConfig+0xa0>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <TIM_OC2_SetConfig+0xf8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <TIM_OC2_SetConfig+0xa0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <TIM_OC2_SetConfig+0xfc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d113      	bne.n	8003dcc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003daa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003db2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40014000 	.word	0x40014000
 8003dfc:	40014400 	.word	0x40014400
 8003e00:	40014800 	.word	0x40014800

08003e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <TIM_OC3_SetConfig+0xec>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10d      	bne.n	8003e82 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e80:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a1a      	ldr	r2, [pc, #104]	; (8003ef0 <TIM_OC3_SetConfig+0xec>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00b      	beq.n	8003ea2 <TIM_OC3_SetConfig+0x9e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a19      	ldr	r2, [pc, #100]	; (8003ef4 <TIM_OC3_SetConfig+0xf0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d007      	beq.n	8003ea2 <TIM_OC3_SetConfig+0x9e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <TIM_OC3_SetConfig+0xf4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d003      	beq.n	8003ea2 <TIM_OC3_SetConfig+0x9e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a17      	ldr	r2, [pc, #92]	; (8003efc <TIM_OC3_SetConfig+0xf8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d113      	bne.n	8003eca <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	621a      	str	r2, [r3, #32]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40014000 	.word	0x40014000
 8003ef8:	40014400 	.word	0x40014400
 8003efc:	40014800 	.word	0x40014800

08003f00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	031b      	lsls	r3, r3, #12
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <TIM_OC4_SetConfig+0xb8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00b      	beq.n	8003f7c <TIM_OC4_SetConfig+0x7c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <TIM_OC4_SetConfig+0xbc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <TIM_OC4_SetConfig+0x7c>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <TIM_OC4_SetConfig+0xc0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_OC4_SetConfig+0x7c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a13      	ldr	r2, [pc, #76]	; (8003fc4 <TIM_OC4_SetConfig+0xc4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d109      	bne.n	8003f90 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	019b      	lsls	r3, r3, #6
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800

08003fc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800400c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a15      	ldr	r2, [pc, #84]	; (8004074 <TIM_OC5_SetConfig+0xac>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00b      	beq.n	800403a <TIM_OC5_SetConfig+0x72>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <TIM_OC5_SetConfig+0xb0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d007      	beq.n	800403a <TIM_OC5_SetConfig+0x72>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a13      	ldr	r2, [pc, #76]	; (800407c <TIM_OC5_SetConfig+0xb4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_OC5_SetConfig+0x72>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a12      	ldr	r2, [pc, #72]	; (8004080 <TIM_OC5_SetConfig+0xb8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d109      	bne.n	800404e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004040:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	621a      	str	r2, [r3, #32]
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400
 8004080:	40014800 	.word	0x40014800

08004084 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	051b      	lsls	r3, r3, #20
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a16      	ldr	r2, [pc, #88]	; (8004134 <TIM_OC6_SetConfig+0xb0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00b      	beq.n	80040f8 <TIM_OC6_SetConfig+0x74>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a15      	ldr	r2, [pc, #84]	; (8004138 <TIM_OC6_SetConfig+0xb4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d007      	beq.n	80040f8 <TIM_OC6_SetConfig+0x74>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a14      	ldr	r2, [pc, #80]	; (800413c <TIM_OC6_SetConfig+0xb8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_OC6_SetConfig+0x74>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a13      	ldr	r2, [pc, #76]	; (8004140 <TIM_OC6_SetConfig+0xbc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d109      	bne.n	800410c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	029b      	lsls	r3, r3, #10
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	621a      	str	r2, [r3, #32]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40012c00 	.word	0x40012c00
 8004138:	40014000 	.word	0x40014000
 800413c:	40014400 	.word	0x40014400
 8004140:	40014800 	.word	0x40014800

08004144 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f023 0201 	bic.w	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <TIM_TI1_SetConfig+0xa4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d007      	beq.n	8004182 <TIM_TI1_SetConfig+0x3e>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004178:	d003      	beq.n	8004182 <TIM_TI1_SetConfig+0x3e>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <TIM_TI1_SetConfig+0xa8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <TIM_TI1_SetConfig+0x42>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <TIM_TI1_SetConfig+0x44>
 8004186:	2300      	movs	r3, #0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e003      	b.n	80041a6 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f023 030a 	bic.w	r3, r3, #10
 80041c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f003 030a 	and.w	r3, r3, #10
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	621a      	str	r2, [r3, #32]
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40014000 	.word	0x40014000

080041f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0201 	bic.w	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800421a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f023 030a 	bic.w	r3, r3, #10
 800422c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800424e:	b480      	push	{r7}
 8004250:	b087      	sub	sp, #28
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f023 0210 	bic.w	r2, r3, #16
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800428c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	031b      	lsls	r3, r3, #12
 8004292:	b29b      	uxth	r3, r3
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	621a      	str	r2, [r3, #32]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f023 0210 	bic.w	r2, r3, #16
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	031b      	lsls	r3, r3, #12
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004304:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	621a      	str	r2, [r3, #32]
}
 800431c:	bf00      	nop
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f023 0303 	bic.w	r3, r3, #3
 8004354:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004364:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	b2db      	uxtb	r3, r3
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004378:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	621a      	str	r2, [r3, #32]
}
 8004394:	bf00      	nop
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	031b      	lsls	r3, r3, #12
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80043f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	031b      	lsls	r3, r3, #12
 80043f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	f043 0307 	orr.w	r3, r3, #7
 800443c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800446a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	021a      	lsls	r2, r3, #8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	431a      	orrs	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	609a      	str	r2, [r3, #8]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	2201      	movs	r2, #1
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a1a      	ldr	r2, [r3, #32]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	401a      	ands	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1a      	ldr	r2, [r3, #32]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	431a      	orrs	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e04f      	b.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a21      	ldr	r2, [pc, #132]	; (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004524:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d009      	beq.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455c:	d004      	beq.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a10      	ldr	r2, [pc, #64]	; (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d10c      	bne.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	4313      	orrs	r3, r2
 8004578:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40014000 	.word	0x40014000

080045a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e060      	b.n	8004686 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	041b      	lsls	r3, r3, #16
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a14      	ldr	r2, [pc, #80]	; (8004694 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d115      	bne.n	8004674 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	051b      	lsls	r3, r3, #20
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40012c00 	.word	0x40012c00

08004698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e040      	b.n	8004768 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc fa3e 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2224      	movs	r2, #36	; 0x24
 8004700:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f8c0 	bl	8004898 <UART_SetConfig>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e022      	b.n	8004768 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f9ea 	bl	8004b04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800473e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800474e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fa71 	bl	8004c48 <UART_CheckIdleState>
 8004766:	4603      	mov	r3, r0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	; 0x28
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004784:	2b20      	cmp	r3, #32
 8004786:	f040 8082 	bne.w	800488e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <HAL_UART_Transmit+0x26>
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07a      	b.n	8004890 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_UART_Transmit+0x38>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e073      	b.n	8004890 <HAL_UART_Transmit+0x120>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2221      	movs	r2, #33	; 0x21
 80047bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047be:	f7fc fb1d 	bl	8000dfc <HAL_GetTick>
 80047c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047dc:	d108      	bne.n	80047f0 <HAL_UART_Transmit+0x80>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d104      	bne.n	80047f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	e003      	b.n	80047f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004800:	e02d      	b.n	800485e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2200      	movs	r2, #0
 800480a:	2180      	movs	r1, #128	; 0x80
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 fa64 	bl	8004cda <UART_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e039      	b.n	8004890 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	881a      	ldrh	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800482e:	b292      	uxth	r2, r2
 8004830:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	3302      	adds	r3, #2
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	e008      	b.n	800484c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b292      	uxth	r2, r2
 8004844:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	3301      	adds	r3, #1
 800484a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1cb      	bne.n	8004802 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	2140      	movs	r1, #64	; 0x40
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fa30 	bl	8004cda <UART_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e005      	b.n	8004890 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	e000      	b.n	8004890 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800488e:	2302      	movs	r3, #2
  }
}
 8004890:	4618      	mov	r0, r3
 8004892:	3720      	adds	r7, #32
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4b8a      	ldr	r3, [pc, #552]	; (8004aec <UART_SetConfig+0x254>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	6979      	ldr	r1, [r7, #20]
 80048cc:	430b      	orrs	r3, r1
 80048ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	430a      	orrs	r2, r1
 8004908:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a78      	ldr	r2, [pc, #480]	; (8004af0 <UART_SetConfig+0x258>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d120      	bne.n	8004956 <UART_SetConfig+0xbe>
 8004914:	4b77      	ldr	r3, [pc, #476]	; (8004af4 <UART_SetConfig+0x25c>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	2b03      	cmp	r3, #3
 800491e:	d817      	bhi.n	8004950 <UART_SetConfig+0xb8>
 8004920:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <UART_SetConfig+0x90>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	08004939 	.word	0x08004939
 800492c:	08004945 	.word	0x08004945
 8004930:	0800494b 	.word	0x0800494b
 8004934:	0800493f 	.word	0x0800493f
 8004938:	2300      	movs	r3, #0
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e01d      	b.n	800497a <UART_SetConfig+0xe2>
 800493e:	2302      	movs	r3, #2
 8004940:	77fb      	strb	r3, [r7, #31]
 8004942:	e01a      	b.n	800497a <UART_SetConfig+0xe2>
 8004944:	2304      	movs	r3, #4
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e017      	b.n	800497a <UART_SetConfig+0xe2>
 800494a:	2308      	movs	r3, #8
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e014      	b.n	800497a <UART_SetConfig+0xe2>
 8004950:	2310      	movs	r3, #16
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e011      	b.n	800497a <UART_SetConfig+0xe2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a67      	ldr	r2, [pc, #412]	; (8004af8 <UART_SetConfig+0x260>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d102      	bne.n	8004966 <UART_SetConfig+0xce>
 8004960:	2300      	movs	r3, #0
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e009      	b.n	800497a <UART_SetConfig+0xe2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a64      	ldr	r2, [pc, #400]	; (8004afc <UART_SetConfig+0x264>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d102      	bne.n	8004976 <UART_SetConfig+0xde>
 8004970:	2300      	movs	r3, #0
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e001      	b.n	800497a <UART_SetConfig+0xe2>
 8004976:	2310      	movs	r3, #16
 8004978:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004982:	d15b      	bne.n	8004a3c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004984:	7ffb      	ldrb	r3, [r7, #31]
 8004986:	2b08      	cmp	r3, #8
 8004988:	d827      	bhi.n	80049da <UART_SetConfig+0x142>
 800498a:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <UART_SetConfig+0xf8>)
 800498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004990:	080049b5 	.word	0x080049b5
 8004994:	080049bd 	.word	0x080049bd
 8004998:	080049c5 	.word	0x080049c5
 800499c:	080049db 	.word	0x080049db
 80049a0:	080049cb 	.word	0x080049cb
 80049a4:	080049db 	.word	0x080049db
 80049a8:	080049db 	.word	0x080049db
 80049ac:	080049db 	.word	0x080049db
 80049b0:	080049d3 	.word	0x080049d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b4:	f7fd ff6a 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 80049b8:	61b8      	str	r0, [r7, #24]
        break;
 80049ba:	e013      	b.n	80049e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049bc:	f7fd ff88 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 80049c0:	61b8      	str	r0, [r7, #24]
        break;
 80049c2:	e00f      	b.n	80049e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c4:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <UART_SetConfig+0x268>)
 80049c6:	61bb      	str	r3, [r7, #24]
        break;
 80049c8:	e00c      	b.n	80049e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ca:	f7fd fee9 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 80049ce:	61b8      	str	r0, [r7, #24]
        break;
 80049d0:	e008      	b.n	80049e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d6:	61bb      	str	r3, [r7, #24]
        break;
 80049d8:	e004      	b.n	80049e4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	77bb      	strb	r3, [r7, #30]
        break;
 80049e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d074      	beq.n	8004ad4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	005a      	lsls	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	085b      	lsrs	r3, r3, #1
 80049f4:	441a      	add	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b0f      	cmp	r3, #15
 8004a06:	d916      	bls.n	8004a36 <UART_SetConfig+0x19e>
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0e:	d212      	bcs.n	8004a36 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f023 030f 	bic.w	r3, r3, #15
 8004a18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	89fb      	ldrh	r3, [r7, #14]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	89fa      	ldrh	r2, [r7, #14]
 8004a32:	60da      	str	r2, [r3, #12]
 8004a34:	e04e      	b.n	8004ad4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	77bb      	strb	r3, [r7, #30]
 8004a3a:	e04b      	b.n	8004ad4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a3c:	7ffb      	ldrb	r3, [r7, #31]
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d827      	bhi.n	8004a92 <UART_SetConfig+0x1fa>
 8004a42:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <UART_SetConfig+0x1b0>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a75 	.word	0x08004a75
 8004a50:	08004a7d 	.word	0x08004a7d
 8004a54:	08004a93 	.word	0x08004a93
 8004a58:	08004a83 	.word	0x08004a83
 8004a5c:	08004a93 	.word	0x08004a93
 8004a60:	08004a93 	.word	0x08004a93
 8004a64:	08004a93 	.word	0x08004a93
 8004a68:	08004a8b 	.word	0x08004a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a6c:	f7fd ff0e 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 8004a70:	61b8      	str	r0, [r7, #24]
        break;
 8004a72:	e013      	b.n	8004a9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a74:	f7fd ff2c 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 8004a78:	61b8      	str	r0, [r7, #24]
        break;
 8004a7a:	e00f      	b.n	8004a9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <UART_SetConfig+0x268>)
 8004a7e:	61bb      	str	r3, [r7, #24]
        break;
 8004a80:	e00c      	b.n	8004a9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a82:	f7fd fe8d 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8004a86:	61b8      	str	r0, [r7, #24]
        break;
 8004a88:	e008      	b.n	8004a9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8e:	61bb      	str	r3, [r7, #24]
        break;
 8004a90:	e004      	b.n	8004a9c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	77bb      	strb	r3, [r7, #30]
        break;
 8004a9a:	bf00      	nop
    }

    if (pclk != 0U)
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d018      	beq.n	8004ad4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	085a      	lsrs	r2, r3, #1
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	441a      	add	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	d908      	bls.n	8004ad0 <UART_SetConfig+0x238>
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac4:	d204      	bcs.n	8004ad0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	e001      	b.n	8004ad4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ae0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3720      	adds	r7, #32
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	efff69f3 	.word	0xefff69f3
 8004af0:	40013800 	.word	0x40013800
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40004400 	.word	0x40004400
 8004afc:	40004800 	.word	0x40004800
 8004b00:	007a1200 	.word	0x007a1200

08004b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01a      	beq.n	8004c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c02:	d10a      	bne.n	8004c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c58:	f7fc f8d0 	bl	8000dfc <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d10e      	bne.n	8004c8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f82d 	bl	8004cda <UART_WaitOnFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e023      	b.n	8004cd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d10e      	bne.n	8004cb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f817 	bl	8004cda <UART_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e00d      	b.n	8004cd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b09c      	sub	sp, #112	; 0x70
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cea:	e0a5      	b.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	f000 80a1 	beq.w	8004e38 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf6:	f7fc f881 	bl	8000dfc <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d302      	bcc.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x32>
 8004d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d13e      	bne.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d20:	667b      	str	r3, [r7, #100]	; 0x64
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e6      	bne.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3308      	adds	r3, #8
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	663b      	str	r3, [r7, #96]	; 0x60
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e5      	bne.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e067      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d04f      	beq.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da6:	d147      	bne.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004db0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e6      	bne.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	613b      	str	r3, [r7, #16]
   return(result);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3308      	adds	r3, #8
 8004e02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e04:	623a      	str	r2, [r7, #32]
 8004e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	69f9      	ldr	r1, [r7, #28]
 8004e0a:	6a3a      	ldr	r2, [r7, #32]
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e5      	bne.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e010      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4013      	ands	r3, r2
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	bf0c      	ite	eq
 8004e48:	2301      	moveq	r3, #1
 8004e4a:	2300      	movne	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	f43f af4a 	beq.w	8004cec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3770      	adds	r7, #112	; 0x70
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <__errno>:
 8004e64:	4b01      	ldr	r3, [pc, #4]	; (8004e6c <__errno+0x8>)
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	2000000c 	.word	0x2000000c

08004e70 <__libc_init_array>:
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	4d0d      	ldr	r5, [pc, #52]	; (8004ea8 <__libc_init_array+0x38>)
 8004e74:	4c0d      	ldr	r4, [pc, #52]	; (8004eac <__libc_init_array+0x3c>)
 8004e76:	1b64      	subs	r4, r4, r5
 8004e78:	10a4      	asrs	r4, r4, #2
 8004e7a:	2600      	movs	r6, #0
 8004e7c:	42a6      	cmp	r6, r4
 8004e7e:	d109      	bne.n	8004e94 <__libc_init_array+0x24>
 8004e80:	4d0b      	ldr	r5, [pc, #44]	; (8004eb0 <__libc_init_array+0x40>)
 8004e82:	4c0c      	ldr	r4, [pc, #48]	; (8004eb4 <__libc_init_array+0x44>)
 8004e84:	f000 fc8e 	bl	80057a4 <_init>
 8004e88:	1b64      	subs	r4, r4, r5
 8004e8a:	10a4      	asrs	r4, r4, #2
 8004e8c:	2600      	movs	r6, #0
 8004e8e:	42a6      	cmp	r6, r4
 8004e90:	d105      	bne.n	8004e9e <__libc_init_array+0x2e>
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
 8004e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e98:	4798      	blx	r3
 8004e9a:	3601      	adds	r6, #1
 8004e9c:	e7ee      	b.n	8004e7c <__libc_init_array+0xc>
 8004e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea2:	4798      	blx	r3
 8004ea4:	3601      	adds	r6, #1
 8004ea6:	e7f2      	b.n	8004e8e <__libc_init_array+0x1e>
 8004ea8:	08005874 	.word	0x08005874
 8004eac:	08005874 	.word	0x08005874
 8004eb0:	08005874 	.word	0x08005874
 8004eb4:	08005878 	.word	0x08005878

08004eb8 <memset>:
 8004eb8:	4402      	add	r2, r0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d100      	bne.n	8004ec2 <memset+0xa>
 8004ec0:	4770      	bx	lr
 8004ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ec6:	e7f9      	b.n	8004ebc <memset+0x4>

08004ec8 <siprintf>:
 8004ec8:	b40e      	push	{r1, r2, r3}
 8004eca:	b500      	push	{lr}
 8004ecc:	b09c      	sub	sp, #112	; 0x70
 8004ece:	ab1d      	add	r3, sp, #116	; 0x74
 8004ed0:	9002      	str	r0, [sp, #8]
 8004ed2:	9006      	str	r0, [sp, #24]
 8004ed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ed8:	4809      	ldr	r0, [pc, #36]	; (8004f00 <siprintf+0x38>)
 8004eda:	9107      	str	r1, [sp, #28]
 8004edc:	9104      	str	r1, [sp, #16]
 8004ede:	4909      	ldr	r1, [pc, #36]	; (8004f04 <siprintf+0x3c>)
 8004ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ee4:	9105      	str	r1, [sp, #20]
 8004ee6:	6800      	ldr	r0, [r0, #0]
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	a902      	add	r1, sp, #8
 8004eec:	f000 f868 	bl	8004fc0 <_svfiprintf_r>
 8004ef0:	9b02      	ldr	r3, [sp, #8]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	b01c      	add	sp, #112	; 0x70
 8004ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004efc:	b003      	add	sp, #12
 8004efe:	4770      	bx	lr
 8004f00:	2000000c 	.word	0x2000000c
 8004f04:	ffff0208 	.word	0xffff0208

08004f08 <__ssputs_r>:
 8004f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0c:	688e      	ldr	r6, [r1, #8]
 8004f0e:	429e      	cmp	r6, r3
 8004f10:	4682      	mov	sl, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	4690      	mov	r8, r2
 8004f16:	461f      	mov	r7, r3
 8004f18:	d838      	bhi.n	8004f8c <__ssputs_r+0x84>
 8004f1a:	898a      	ldrh	r2, [r1, #12]
 8004f1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f20:	d032      	beq.n	8004f88 <__ssputs_r+0x80>
 8004f22:	6825      	ldr	r5, [r4, #0]
 8004f24:	6909      	ldr	r1, [r1, #16]
 8004f26:	eba5 0901 	sub.w	r9, r5, r1
 8004f2a:	6965      	ldr	r5, [r4, #20]
 8004f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f34:	3301      	adds	r3, #1
 8004f36:	444b      	add	r3, r9
 8004f38:	106d      	asrs	r5, r5, #1
 8004f3a:	429d      	cmp	r5, r3
 8004f3c:	bf38      	it	cc
 8004f3e:	461d      	movcc	r5, r3
 8004f40:	0553      	lsls	r3, r2, #21
 8004f42:	d531      	bpl.n	8004fa8 <__ssputs_r+0xa0>
 8004f44:	4629      	mov	r1, r5
 8004f46:	f000 fb63 	bl	8005610 <_malloc_r>
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	b950      	cbnz	r0, 8004f64 <__ssputs_r+0x5c>
 8004f4e:	230c      	movs	r3, #12
 8004f50:	f8ca 3000 	str.w	r3, [sl]
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f5a:	81a3      	strh	r3, [r4, #12]
 8004f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f64:	6921      	ldr	r1, [r4, #16]
 8004f66:	464a      	mov	r2, r9
 8004f68:	f000 fabe 	bl	80054e8 <memcpy>
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	81a3      	strh	r3, [r4, #12]
 8004f78:	6126      	str	r6, [r4, #16]
 8004f7a:	6165      	str	r5, [r4, #20]
 8004f7c:	444e      	add	r6, r9
 8004f7e:	eba5 0509 	sub.w	r5, r5, r9
 8004f82:	6026      	str	r6, [r4, #0]
 8004f84:	60a5      	str	r5, [r4, #8]
 8004f86:	463e      	mov	r6, r7
 8004f88:	42be      	cmp	r6, r7
 8004f8a:	d900      	bls.n	8004f8e <__ssputs_r+0x86>
 8004f8c:	463e      	mov	r6, r7
 8004f8e:	6820      	ldr	r0, [r4, #0]
 8004f90:	4632      	mov	r2, r6
 8004f92:	4641      	mov	r1, r8
 8004f94:	f000 fab6 	bl	8005504 <memmove>
 8004f98:	68a3      	ldr	r3, [r4, #8]
 8004f9a:	1b9b      	subs	r3, r3, r6
 8004f9c:	60a3      	str	r3, [r4, #8]
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	4433      	add	r3, r6
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	e7db      	b.n	8004f60 <__ssputs_r+0x58>
 8004fa8:	462a      	mov	r2, r5
 8004faa:	f000 fba5 	bl	80056f8 <_realloc_r>
 8004fae:	4606      	mov	r6, r0
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	d1e1      	bne.n	8004f78 <__ssputs_r+0x70>
 8004fb4:	6921      	ldr	r1, [r4, #16]
 8004fb6:	4650      	mov	r0, sl
 8004fb8:	f000 fabe 	bl	8005538 <_free_r>
 8004fbc:	e7c7      	b.n	8004f4e <__ssputs_r+0x46>
	...

08004fc0 <_svfiprintf_r>:
 8004fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc4:	4698      	mov	r8, r3
 8004fc6:	898b      	ldrh	r3, [r1, #12]
 8004fc8:	061b      	lsls	r3, r3, #24
 8004fca:	b09d      	sub	sp, #116	; 0x74
 8004fcc:	4607      	mov	r7, r0
 8004fce:	460d      	mov	r5, r1
 8004fd0:	4614      	mov	r4, r2
 8004fd2:	d50e      	bpl.n	8004ff2 <_svfiprintf_r+0x32>
 8004fd4:	690b      	ldr	r3, [r1, #16]
 8004fd6:	b963      	cbnz	r3, 8004ff2 <_svfiprintf_r+0x32>
 8004fd8:	2140      	movs	r1, #64	; 0x40
 8004fda:	f000 fb19 	bl	8005610 <_malloc_r>
 8004fde:	6028      	str	r0, [r5, #0]
 8004fe0:	6128      	str	r0, [r5, #16]
 8004fe2:	b920      	cbnz	r0, 8004fee <_svfiprintf_r+0x2e>
 8004fe4:	230c      	movs	r3, #12
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fec:	e0d1      	b.n	8005192 <_svfiprintf_r+0x1d2>
 8004fee:	2340      	movs	r3, #64	; 0x40
 8004ff0:	616b      	str	r3, [r5, #20]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff6:	2320      	movs	r3, #32
 8004ff8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005000:	2330      	movs	r3, #48	; 0x30
 8005002:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80051ac <_svfiprintf_r+0x1ec>
 8005006:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800500a:	f04f 0901 	mov.w	r9, #1
 800500e:	4623      	mov	r3, r4
 8005010:	469a      	mov	sl, r3
 8005012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005016:	b10a      	cbz	r2, 800501c <_svfiprintf_r+0x5c>
 8005018:	2a25      	cmp	r2, #37	; 0x25
 800501a:	d1f9      	bne.n	8005010 <_svfiprintf_r+0x50>
 800501c:	ebba 0b04 	subs.w	fp, sl, r4
 8005020:	d00b      	beq.n	800503a <_svfiprintf_r+0x7a>
 8005022:	465b      	mov	r3, fp
 8005024:	4622      	mov	r2, r4
 8005026:	4629      	mov	r1, r5
 8005028:	4638      	mov	r0, r7
 800502a:	f7ff ff6d 	bl	8004f08 <__ssputs_r>
 800502e:	3001      	adds	r0, #1
 8005030:	f000 80aa 	beq.w	8005188 <_svfiprintf_r+0x1c8>
 8005034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005036:	445a      	add	r2, fp
 8005038:	9209      	str	r2, [sp, #36]	; 0x24
 800503a:	f89a 3000 	ldrb.w	r3, [sl]
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80a2 	beq.w	8005188 <_svfiprintf_r+0x1c8>
 8005044:	2300      	movs	r3, #0
 8005046:	f04f 32ff 	mov.w	r2, #4294967295
 800504a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800504e:	f10a 0a01 	add.w	sl, sl, #1
 8005052:	9304      	str	r3, [sp, #16]
 8005054:	9307      	str	r3, [sp, #28]
 8005056:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800505a:	931a      	str	r3, [sp, #104]	; 0x68
 800505c:	4654      	mov	r4, sl
 800505e:	2205      	movs	r2, #5
 8005060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005064:	4851      	ldr	r0, [pc, #324]	; (80051ac <_svfiprintf_r+0x1ec>)
 8005066:	f7fb f8b3 	bl	80001d0 <memchr>
 800506a:	9a04      	ldr	r2, [sp, #16]
 800506c:	b9d8      	cbnz	r0, 80050a6 <_svfiprintf_r+0xe6>
 800506e:	06d0      	lsls	r0, r2, #27
 8005070:	bf44      	itt	mi
 8005072:	2320      	movmi	r3, #32
 8005074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005078:	0711      	lsls	r1, r2, #28
 800507a:	bf44      	itt	mi
 800507c:	232b      	movmi	r3, #43	; 0x2b
 800507e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005082:	f89a 3000 	ldrb.w	r3, [sl]
 8005086:	2b2a      	cmp	r3, #42	; 0x2a
 8005088:	d015      	beq.n	80050b6 <_svfiprintf_r+0xf6>
 800508a:	9a07      	ldr	r2, [sp, #28]
 800508c:	4654      	mov	r4, sl
 800508e:	2000      	movs	r0, #0
 8005090:	f04f 0c0a 	mov.w	ip, #10
 8005094:	4621      	mov	r1, r4
 8005096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800509a:	3b30      	subs	r3, #48	; 0x30
 800509c:	2b09      	cmp	r3, #9
 800509e:	d94e      	bls.n	800513e <_svfiprintf_r+0x17e>
 80050a0:	b1b0      	cbz	r0, 80050d0 <_svfiprintf_r+0x110>
 80050a2:	9207      	str	r2, [sp, #28]
 80050a4:	e014      	b.n	80050d0 <_svfiprintf_r+0x110>
 80050a6:	eba0 0308 	sub.w	r3, r0, r8
 80050aa:	fa09 f303 	lsl.w	r3, r9, r3
 80050ae:	4313      	orrs	r3, r2
 80050b0:	9304      	str	r3, [sp, #16]
 80050b2:	46a2      	mov	sl, r4
 80050b4:	e7d2      	b.n	800505c <_svfiprintf_r+0x9c>
 80050b6:	9b03      	ldr	r3, [sp, #12]
 80050b8:	1d19      	adds	r1, r3, #4
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	9103      	str	r1, [sp, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bfbb      	ittet	lt
 80050c2:	425b      	neglt	r3, r3
 80050c4:	f042 0202 	orrlt.w	r2, r2, #2
 80050c8:	9307      	strge	r3, [sp, #28]
 80050ca:	9307      	strlt	r3, [sp, #28]
 80050cc:	bfb8      	it	lt
 80050ce:	9204      	strlt	r2, [sp, #16]
 80050d0:	7823      	ldrb	r3, [r4, #0]
 80050d2:	2b2e      	cmp	r3, #46	; 0x2e
 80050d4:	d10c      	bne.n	80050f0 <_svfiprintf_r+0x130>
 80050d6:	7863      	ldrb	r3, [r4, #1]
 80050d8:	2b2a      	cmp	r3, #42	; 0x2a
 80050da:	d135      	bne.n	8005148 <_svfiprintf_r+0x188>
 80050dc:	9b03      	ldr	r3, [sp, #12]
 80050de:	1d1a      	adds	r2, r3, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	9203      	str	r2, [sp, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bfb8      	it	lt
 80050e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80050ec:	3402      	adds	r4, #2
 80050ee:	9305      	str	r3, [sp, #20]
 80050f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80051bc <_svfiprintf_r+0x1fc>
 80050f4:	7821      	ldrb	r1, [r4, #0]
 80050f6:	2203      	movs	r2, #3
 80050f8:	4650      	mov	r0, sl
 80050fa:	f7fb f869 	bl	80001d0 <memchr>
 80050fe:	b140      	cbz	r0, 8005112 <_svfiprintf_r+0x152>
 8005100:	2340      	movs	r3, #64	; 0x40
 8005102:	eba0 000a 	sub.w	r0, r0, sl
 8005106:	fa03 f000 	lsl.w	r0, r3, r0
 800510a:	9b04      	ldr	r3, [sp, #16]
 800510c:	4303      	orrs	r3, r0
 800510e:	3401      	adds	r4, #1
 8005110:	9304      	str	r3, [sp, #16]
 8005112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005116:	4826      	ldr	r0, [pc, #152]	; (80051b0 <_svfiprintf_r+0x1f0>)
 8005118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800511c:	2206      	movs	r2, #6
 800511e:	f7fb f857 	bl	80001d0 <memchr>
 8005122:	2800      	cmp	r0, #0
 8005124:	d038      	beq.n	8005198 <_svfiprintf_r+0x1d8>
 8005126:	4b23      	ldr	r3, [pc, #140]	; (80051b4 <_svfiprintf_r+0x1f4>)
 8005128:	bb1b      	cbnz	r3, 8005172 <_svfiprintf_r+0x1b2>
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	3307      	adds	r3, #7
 800512e:	f023 0307 	bic.w	r3, r3, #7
 8005132:	3308      	adds	r3, #8
 8005134:	9303      	str	r3, [sp, #12]
 8005136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005138:	4433      	add	r3, r6
 800513a:	9309      	str	r3, [sp, #36]	; 0x24
 800513c:	e767      	b.n	800500e <_svfiprintf_r+0x4e>
 800513e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005142:	460c      	mov	r4, r1
 8005144:	2001      	movs	r0, #1
 8005146:	e7a5      	b.n	8005094 <_svfiprintf_r+0xd4>
 8005148:	2300      	movs	r3, #0
 800514a:	3401      	adds	r4, #1
 800514c:	9305      	str	r3, [sp, #20]
 800514e:	4619      	mov	r1, r3
 8005150:	f04f 0c0a 	mov.w	ip, #10
 8005154:	4620      	mov	r0, r4
 8005156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800515a:	3a30      	subs	r2, #48	; 0x30
 800515c:	2a09      	cmp	r2, #9
 800515e:	d903      	bls.n	8005168 <_svfiprintf_r+0x1a8>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0c5      	beq.n	80050f0 <_svfiprintf_r+0x130>
 8005164:	9105      	str	r1, [sp, #20]
 8005166:	e7c3      	b.n	80050f0 <_svfiprintf_r+0x130>
 8005168:	fb0c 2101 	mla	r1, ip, r1, r2
 800516c:	4604      	mov	r4, r0
 800516e:	2301      	movs	r3, #1
 8005170:	e7f0      	b.n	8005154 <_svfiprintf_r+0x194>
 8005172:	ab03      	add	r3, sp, #12
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	462a      	mov	r2, r5
 8005178:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <_svfiprintf_r+0x1f8>)
 800517a:	a904      	add	r1, sp, #16
 800517c:	4638      	mov	r0, r7
 800517e:	f3af 8000 	nop.w
 8005182:	1c42      	adds	r2, r0, #1
 8005184:	4606      	mov	r6, r0
 8005186:	d1d6      	bne.n	8005136 <_svfiprintf_r+0x176>
 8005188:	89ab      	ldrh	r3, [r5, #12]
 800518a:	065b      	lsls	r3, r3, #25
 800518c:	f53f af2c 	bmi.w	8004fe8 <_svfiprintf_r+0x28>
 8005190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005192:	b01d      	add	sp, #116	; 0x74
 8005194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005198:	ab03      	add	r3, sp, #12
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	462a      	mov	r2, r5
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <_svfiprintf_r+0x1f8>)
 80051a0:	a904      	add	r1, sp, #16
 80051a2:	4638      	mov	r0, r7
 80051a4:	f000 f87a 	bl	800529c <_printf_i>
 80051a8:	e7eb      	b.n	8005182 <_svfiprintf_r+0x1c2>
 80051aa:	bf00      	nop
 80051ac:	08005840 	.word	0x08005840
 80051b0:	0800584a 	.word	0x0800584a
 80051b4:	00000000 	.word	0x00000000
 80051b8:	08004f09 	.word	0x08004f09
 80051bc:	08005846 	.word	0x08005846

080051c0 <_printf_common>:
 80051c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	4616      	mov	r6, r2
 80051c6:	4699      	mov	r9, r3
 80051c8:	688a      	ldr	r2, [r1, #8]
 80051ca:	690b      	ldr	r3, [r1, #16]
 80051cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051d0:	4293      	cmp	r3, r2
 80051d2:	bfb8      	it	lt
 80051d4:	4613      	movlt	r3, r2
 80051d6:	6033      	str	r3, [r6, #0]
 80051d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051dc:	4607      	mov	r7, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	b10a      	cbz	r2, 80051e6 <_printf_common+0x26>
 80051e2:	3301      	adds	r3, #1
 80051e4:	6033      	str	r3, [r6, #0]
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	0699      	lsls	r1, r3, #26
 80051ea:	bf42      	ittt	mi
 80051ec:	6833      	ldrmi	r3, [r6, #0]
 80051ee:	3302      	addmi	r3, #2
 80051f0:	6033      	strmi	r3, [r6, #0]
 80051f2:	6825      	ldr	r5, [r4, #0]
 80051f4:	f015 0506 	ands.w	r5, r5, #6
 80051f8:	d106      	bne.n	8005208 <_printf_common+0x48>
 80051fa:	f104 0a19 	add.w	sl, r4, #25
 80051fe:	68e3      	ldr	r3, [r4, #12]
 8005200:	6832      	ldr	r2, [r6, #0]
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	42ab      	cmp	r3, r5
 8005206:	dc26      	bgt.n	8005256 <_printf_common+0x96>
 8005208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800520c:	1e13      	subs	r3, r2, #0
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	bf18      	it	ne
 8005212:	2301      	movne	r3, #1
 8005214:	0692      	lsls	r2, r2, #26
 8005216:	d42b      	bmi.n	8005270 <_printf_common+0xb0>
 8005218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800521c:	4649      	mov	r1, r9
 800521e:	4638      	mov	r0, r7
 8005220:	47c0      	blx	r8
 8005222:	3001      	adds	r0, #1
 8005224:	d01e      	beq.n	8005264 <_printf_common+0xa4>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	68e5      	ldr	r5, [r4, #12]
 800522a:	6832      	ldr	r2, [r6, #0]
 800522c:	f003 0306 	and.w	r3, r3, #6
 8005230:	2b04      	cmp	r3, #4
 8005232:	bf08      	it	eq
 8005234:	1aad      	subeq	r5, r5, r2
 8005236:	68a3      	ldr	r3, [r4, #8]
 8005238:	6922      	ldr	r2, [r4, #16]
 800523a:	bf0c      	ite	eq
 800523c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005240:	2500      	movne	r5, #0
 8005242:	4293      	cmp	r3, r2
 8005244:	bfc4      	itt	gt
 8005246:	1a9b      	subgt	r3, r3, r2
 8005248:	18ed      	addgt	r5, r5, r3
 800524a:	2600      	movs	r6, #0
 800524c:	341a      	adds	r4, #26
 800524e:	42b5      	cmp	r5, r6
 8005250:	d11a      	bne.n	8005288 <_printf_common+0xc8>
 8005252:	2000      	movs	r0, #0
 8005254:	e008      	b.n	8005268 <_printf_common+0xa8>
 8005256:	2301      	movs	r3, #1
 8005258:	4652      	mov	r2, sl
 800525a:	4649      	mov	r1, r9
 800525c:	4638      	mov	r0, r7
 800525e:	47c0      	blx	r8
 8005260:	3001      	adds	r0, #1
 8005262:	d103      	bne.n	800526c <_printf_common+0xac>
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526c:	3501      	adds	r5, #1
 800526e:	e7c6      	b.n	80051fe <_printf_common+0x3e>
 8005270:	18e1      	adds	r1, r4, r3
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	2030      	movs	r0, #48	; 0x30
 8005276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800527a:	4422      	add	r2, r4
 800527c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005284:	3302      	adds	r3, #2
 8005286:	e7c7      	b.n	8005218 <_printf_common+0x58>
 8005288:	2301      	movs	r3, #1
 800528a:	4622      	mov	r2, r4
 800528c:	4649      	mov	r1, r9
 800528e:	4638      	mov	r0, r7
 8005290:	47c0      	blx	r8
 8005292:	3001      	adds	r0, #1
 8005294:	d0e6      	beq.n	8005264 <_printf_common+0xa4>
 8005296:	3601      	adds	r6, #1
 8005298:	e7d9      	b.n	800524e <_printf_common+0x8e>
	...

0800529c <_printf_i>:
 800529c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052a0:	7e0f      	ldrb	r7, [r1, #24]
 80052a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052a4:	2f78      	cmp	r7, #120	; 0x78
 80052a6:	4691      	mov	r9, r2
 80052a8:	4680      	mov	r8, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	469a      	mov	sl, r3
 80052ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052b2:	d807      	bhi.n	80052c4 <_printf_i+0x28>
 80052b4:	2f62      	cmp	r7, #98	; 0x62
 80052b6:	d80a      	bhi.n	80052ce <_printf_i+0x32>
 80052b8:	2f00      	cmp	r7, #0
 80052ba:	f000 80d8 	beq.w	800546e <_printf_i+0x1d2>
 80052be:	2f58      	cmp	r7, #88	; 0x58
 80052c0:	f000 80a3 	beq.w	800540a <_printf_i+0x16e>
 80052c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052cc:	e03a      	b.n	8005344 <_printf_i+0xa8>
 80052ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052d2:	2b15      	cmp	r3, #21
 80052d4:	d8f6      	bhi.n	80052c4 <_printf_i+0x28>
 80052d6:	a101      	add	r1, pc, #4	; (adr r1, 80052dc <_printf_i+0x40>)
 80052d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052dc:	08005335 	.word	0x08005335
 80052e0:	08005349 	.word	0x08005349
 80052e4:	080052c5 	.word	0x080052c5
 80052e8:	080052c5 	.word	0x080052c5
 80052ec:	080052c5 	.word	0x080052c5
 80052f0:	080052c5 	.word	0x080052c5
 80052f4:	08005349 	.word	0x08005349
 80052f8:	080052c5 	.word	0x080052c5
 80052fc:	080052c5 	.word	0x080052c5
 8005300:	080052c5 	.word	0x080052c5
 8005304:	080052c5 	.word	0x080052c5
 8005308:	08005455 	.word	0x08005455
 800530c:	08005379 	.word	0x08005379
 8005310:	08005437 	.word	0x08005437
 8005314:	080052c5 	.word	0x080052c5
 8005318:	080052c5 	.word	0x080052c5
 800531c:	08005477 	.word	0x08005477
 8005320:	080052c5 	.word	0x080052c5
 8005324:	08005379 	.word	0x08005379
 8005328:	080052c5 	.word	0x080052c5
 800532c:	080052c5 	.word	0x080052c5
 8005330:	0800543f 	.word	0x0800543f
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	1d1a      	adds	r2, r3, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	602a      	str	r2, [r5, #0]
 800533c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005344:	2301      	movs	r3, #1
 8005346:	e0a3      	b.n	8005490 <_printf_i+0x1f4>
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	6829      	ldr	r1, [r5, #0]
 800534c:	0606      	lsls	r6, r0, #24
 800534e:	f101 0304 	add.w	r3, r1, #4
 8005352:	d50a      	bpl.n	800536a <_printf_i+0xce>
 8005354:	680e      	ldr	r6, [r1, #0]
 8005356:	602b      	str	r3, [r5, #0]
 8005358:	2e00      	cmp	r6, #0
 800535a:	da03      	bge.n	8005364 <_printf_i+0xc8>
 800535c:	232d      	movs	r3, #45	; 0x2d
 800535e:	4276      	negs	r6, r6
 8005360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005364:	485e      	ldr	r0, [pc, #376]	; (80054e0 <_printf_i+0x244>)
 8005366:	230a      	movs	r3, #10
 8005368:	e019      	b.n	800539e <_printf_i+0x102>
 800536a:	680e      	ldr	r6, [r1, #0]
 800536c:	602b      	str	r3, [r5, #0]
 800536e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005372:	bf18      	it	ne
 8005374:	b236      	sxthne	r6, r6
 8005376:	e7ef      	b.n	8005358 <_printf_i+0xbc>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	6820      	ldr	r0, [r4, #0]
 800537c:	1d19      	adds	r1, r3, #4
 800537e:	6029      	str	r1, [r5, #0]
 8005380:	0601      	lsls	r1, r0, #24
 8005382:	d501      	bpl.n	8005388 <_printf_i+0xec>
 8005384:	681e      	ldr	r6, [r3, #0]
 8005386:	e002      	b.n	800538e <_printf_i+0xf2>
 8005388:	0646      	lsls	r6, r0, #25
 800538a:	d5fb      	bpl.n	8005384 <_printf_i+0xe8>
 800538c:	881e      	ldrh	r6, [r3, #0]
 800538e:	4854      	ldr	r0, [pc, #336]	; (80054e0 <_printf_i+0x244>)
 8005390:	2f6f      	cmp	r7, #111	; 0x6f
 8005392:	bf0c      	ite	eq
 8005394:	2308      	moveq	r3, #8
 8005396:	230a      	movne	r3, #10
 8005398:	2100      	movs	r1, #0
 800539a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800539e:	6865      	ldr	r5, [r4, #4]
 80053a0:	60a5      	str	r5, [r4, #8]
 80053a2:	2d00      	cmp	r5, #0
 80053a4:	bfa2      	ittt	ge
 80053a6:	6821      	ldrge	r1, [r4, #0]
 80053a8:	f021 0104 	bicge.w	r1, r1, #4
 80053ac:	6021      	strge	r1, [r4, #0]
 80053ae:	b90e      	cbnz	r6, 80053b4 <_printf_i+0x118>
 80053b0:	2d00      	cmp	r5, #0
 80053b2:	d04d      	beq.n	8005450 <_printf_i+0x1b4>
 80053b4:	4615      	mov	r5, r2
 80053b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80053ba:	fb03 6711 	mls	r7, r3, r1, r6
 80053be:	5dc7      	ldrb	r7, [r0, r7]
 80053c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053c4:	4637      	mov	r7, r6
 80053c6:	42bb      	cmp	r3, r7
 80053c8:	460e      	mov	r6, r1
 80053ca:	d9f4      	bls.n	80053b6 <_printf_i+0x11a>
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d10b      	bne.n	80053e8 <_printf_i+0x14c>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	07de      	lsls	r6, r3, #31
 80053d4:	d508      	bpl.n	80053e8 <_printf_i+0x14c>
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	6861      	ldr	r1, [r4, #4]
 80053da:	4299      	cmp	r1, r3
 80053dc:	bfde      	ittt	le
 80053de:	2330      	movle	r3, #48	; 0x30
 80053e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053e8:	1b52      	subs	r2, r2, r5
 80053ea:	6122      	str	r2, [r4, #16]
 80053ec:	f8cd a000 	str.w	sl, [sp]
 80053f0:	464b      	mov	r3, r9
 80053f2:	aa03      	add	r2, sp, #12
 80053f4:	4621      	mov	r1, r4
 80053f6:	4640      	mov	r0, r8
 80053f8:	f7ff fee2 	bl	80051c0 <_printf_common>
 80053fc:	3001      	adds	r0, #1
 80053fe:	d14c      	bne.n	800549a <_printf_i+0x1fe>
 8005400:	f04f 30ff 	mov.w	r0, #4294967295
 8005404:	b004      	add	sp, #16
 8005406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540a:	4835      	ldr	r0, [pc, #212]	; (80054e0 <_printf_i+0x244>)
 800540c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005410:	6829      	ldr	r1, [r5, #0]
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	f851 6b04 	ldr.w	r6, [r1], #4
 8005418:	6029      	str	r1, [r5, #0]
 800541a:	061d      	lsls	r5, r3, #24
 800541c:	d514      	bpl.n	8005448 <_printf_i+0x1ac>
 800541e:	07df      	lsls	r7, r3, #31
 8005420:	bf44      	itt	mi
 8005422:	f043 0320 	orrmi.w	r3, r3, #32
 8005426:	6023      	strmi	r3, [r4, #0]
 8005428:	b91e      	cbnz	r6, 8005432 <_printf_i+0x196>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	f023 0320 	bic.w	r3, r3, #32
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	2310      	movs	r3, #16
 8005434:	e7b0      	b.n	8005398 <_printf_i+0xfc>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	f043 0320 	orr.w	r3, r3, #32
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	2378      	movs	r3, #120	; 0x78
 8005440:	4828      	ldr	r0, [pc, #160]	; (80054e4 <_printf_i+0x248>)
 8005442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005446:	e7e3      	b.n	8005410 <_printf_i+0x174>
 8005448:	0659      	lsls	r1, r3, #25
 800544a:	bf48      	it	mi
 800544c:	b2b6      	uxthmi	r6, r6
 800544e:	e7e6      	b.n	800541e <_printf_i+0x182>
 8005450:	4615      	mov	r5, r2
 8005452:	e7bb      	b.n	80053cc <_printf_i+0x130>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	6826      	ldr	r6, [r4, #0]
 8005458:	6961      	ldr	r1, [r4, #20]
 800545a:	1d18      	adds	r0, r3, #4
 800545c:	6028      	str	r0, [r5, #0]
 800545e:	0635      	lsls	r5, r6, #24
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	d501      	bpl.n	8005468 <_printf_i+0x1cc>
 8005464:	6019      	str	r1, [r3, #0]
 8005466:	e002      	b.n	800546e <_printf_i+0x1d2>
 8005468:	0670      	lsls	r0, r6, #25
 800546a:	d5fb      	bpl.n	8005464 <_printf_i+0x1c8>
 800546c:	8019      	strh	r1, [r3, #0]
 800546e:	2300      	movs	r3, #0
 8005470:	6123      	str	r3, [r4, #16]
 8005472:	4615      	mov	r5, r2
 8005474:	e7ba      	b.n	80053ec <_printf_i+0x150>
 8005476:	682b      	ldr	r3, [r5, #0]
 8005478:	1d1a      	adds	r2, r3, #4
 800547a:	602a      	str	r2, [r5, #0]
 800547c:	681d      	ldr	r5, [r3, #0]
 800547e:	6862      	ldr	r2, [r4, #4]
 8005480:	2100      	movs	r1, #0
 8005482:	4628      	mov	r0, r5
 8005484:	f7fa fea4 	bl	80001d0 <memchr>
 8005488:	b108      	cbz	r0, 800548e <_printf_i+0x1f2>
 800548a:	1b40      	subs	r0, r0, r5
 800548c:	6060      	str	r0, [r4, #4]
 800548e:	6863      	ldr	r3, [r4, #4]
 8005490:	6123      	str	r3, [r4, #16]
 8005492:	2300      	movs	r3, #0
 8005494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005498:	e7a8      	b.n	80053ec <_printf_i+0x150>
 800549a:	6923      	ldr	r3, [r4, #16]
 800549c:	462a      	mov	r2, r5
 800549e:	4649      	mov	r1, r9
 80054a0:	4640      	mov	r0, r8
 80054a2:	47d0      	blx	sl
 80054a4:	3001      	adds	r0, #1
 80054a6:	d0ab      	beq.n	8005400 <_printf_i+0x164>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	079b      	lsls	r3, r3, #30
 80054ac:	d413      	bmi.n	80054d6 <_printf_i+0x23a>
 80054ae:	68e0      	ldr	r0, [r4, #12]
 80054b0:	9b03      	ldr	r3, [sp, #12]
 80054b2:	4298      	cmp	r0, r3
 80054b4:	bfb8      	it	lt
 80054b6:	4618      	movlt	r0, r3
 80054b8:	e7a4      	b.n	8005404 <_printf_i+0x168>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4632      	mov	r2, r6
 80054be:	4649      	mov	r1, r9
 80054c0:	4640      	mov	r0, r8
 80054c2:	47d0      	blx	sl
 80054c4:	3001      	adds	r0, #1
 80054c6:	d09b      	beq.n	8005400 <_printf_i+0x164>
 80054c8:	3501      	adds	r5, #1
 80054ca:	68e3      	ldr	r3, [r4, #12]
 80054cc:	9903      	ldr	r1, [sp, #12]
 80054ce:	1a5b      	subs	r3, r3, r1
 80054d0:	42ab      	cmp	r3, r5
 80054d2:	dcf2      	bgt.n	80054ba <_printf_i+0x21e>
 80054d4:	e7eb      	b.n	80054ae <_printf_i+0x212>
 80054d6:	2500      	movs	r5, #0
 80054d8:	f104 0619 	add.w	r6, r4, #25
 80054dc:	e7f5      	b.n	80054ca <_printf_i+0x22e>
 80054de:	bf00      	nop
 80054e0:	08005851 	.word	0x08005851
 80054e4:	08005862 	.word	0x08005862

080054e8 <memcpy>:
 80054e8:	440a      	add	r2, r1
 80054ea:	4291      	cmp	r1, r2
 80054ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80054f0:	d100      	bne.n	80054f4 <memcpy+0xc>
 80054f2:	4770      	bx	lr
 80054f4:	b510      	push	{r4, lr}
 80054f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054fe:	4291      	cmp	r1, r2
 8005500:	d1f9      	bne.n	80054f6 <memcpy+0xe>
 8005502:	bd10      	pop	{r4, pc}

08005504 <memmove>:
 8005504:	4288      	cmp	r0, r1
 8005506:	b510      	push	{r4, lr}
 8005508:	eb01 0402 	add.w	r4, r1, r2
 800550c:	d902      	bls.n	8005514 <memmove+0x10>
 800550e:	4284      	cmp	r4, r0
 8005510:	4623      	mov	r3, r4
 8005512:	d807      	bhi.n	8005524 <memmove+0x20>
 8005514:	1e43      	subs	r3, r0, #1
 8005516:	42a1      	cmp	r1, r4
 8005518:	d008      	beq.n	800552c <memmove+0x28>
 800551a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800551e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005522:	e7f8      	b.n	8005516 <memmove+0x12>
 8005524:	4402      	add	r2, r0
 8005526:	4601      	mov	r1, r0
 8005528:	428a      	cmp	r2, r1
 800552a:	d100      	bne.n	800552e <memmove+0x2a>
 800552c:	bd10      	pop	{r4, pc}
 800552e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005536:	e7f7      	b.n	8005528 <memmove+0x24>

08005538 <_free_r>:
 8005538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800553a:	2900      	cmp	r1, #0
 800553c:	d044      	beq.n	80055c8 <_free_r+0x90>
 800553e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005542:	9001      	str	r0, [sp, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f1a1 0404 	sub.w	r4, r1, #4
 800554a:	bfb8      	it	lt
 800554c:	18e4      	addlt	r4, r4, r3
 800554e:	f000 f913 	bl	8005778 <__malloc_lock>
 8005552:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <_free_r+0x94>)
 8005554:	9801      	ldr	r0, [sp, #4]
 8005556:	6813      	ldr	r3, [r2, #0]
 8005558:	b933      	cbnz	r3, 8005568 <_free_r+0x30>
 800555a:	6063      	str	r3, [r4, #4]
 800555c:	6014      	str	r4, [r2, #0]
 800555e:	b003      	add	sp, #12
 8005560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005564:	f000 b90e 	b.w	8005784 <__malloc_unlock>
 8005568:	42a3      	cmp	r3, r4
 800556a:	d908      	bls.n	800557e <_free_r+0x46>
 800556c:	6825      	ldr	r5, [r4, #0]
 800556e:	1961      	adds	r1, r4, r5
 8005570:	428b      	cmp	r3, r1
 8005572:	bf01      	itttt	eq
 8005574:	6819      	ldreq	r1, [r3, #0]
 8005576:	685b      	ldreq	r3, [r3, #4]
 8005578:	1949      	addeq	r1, r1, r5
 800557a:	6021      	streq	r1, [r4, #0]
 800557c:	e7ed      	b.n	800555a <_free_r+0x22>
 800557e:	461a      	mov	r2, r3
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	b10b      	cbz	r3, 8005588 <_free_r+0x50>
 8005584:	42a3      	cmp	r3, r4
 8005586:	d9fa      	bls.n	800557e <_free_r+0x46>
 8005588:	6811      	ldr	r1, [r2, #0]
 800558a:	1855      	adds	r5, r2, r1
 800558c:	42a5      	cmp	r5, r4
 800558e:	d10b      	bne.n	80055a8 <_free_r+0x70>
 8005590:	6824      	ldr	r4, [r4, #0]
 8005592:	4421      	add	r1, r4
 8005594:	1854      	adds	r4, r2, r1
 8005596:	42a3      	cmp	r3, r4
 8005598:	6011      	str	r1, [r2, #0]
 800559a:	d1e0      	bne.n	800555e <_free_r+0x26>
 800559c:	681c      	ldr	r4, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	6053      	str	r3, [r2, #4]
 80055a2:	4421      	add	r1, r4
 80055a4:	6011      	str	r1, [r2, #0]
 80055a6:	e7da      	b.n	800555e <_free_r+0x26>
 80055a8:	d902      	bls.n	80055b0 <_free_r+0x78>
 80055aa:	230c      	movs	r3, #12
 80055ac:	6003      	str	r3, [r0, #0]
 80055ae:	e7d6      	b.n	800555e <_free_r+0x26>
 80055b0:	6825      	ldr	r5, [r4, #0]
 80055b2:	1961      	adds	r1, r4, r5
 80055b4:	428b      	cmp	r3, r1
 80055b6:	bf04      	itt	eq
 80055b8:	6819      	ldreq	r1, [r3, #0]
 80055ba:	685b      	ldreq	r3, [r3, #4]
 80055bc:	6063      	str	r3, [r4, #4]
 80055be:	bf04      	itt	eq
 80055c0:	1949      	addeq	r1, r1, r5
 80055c2:	6021      	streq	r1, [r4, #0]
 80055c4:	6054      	str	r4, [r2, #4]
 80055c6:	e7ca      	b.n	800555e <_free_r+0x26>
 80055c8:	b003      	add	sp, #12
 80055ca:	bd30      	pop	{r4, r5, pc}
 80055cc:	2000022c 	.word	0x2000022c

080055d0 <sbrk_aligned>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	4e0e      	ldr	r6, [pc, #56]	; (800560c <sbrk_aligned+0x3c>)
 80055d4:	460c      	mov	r4, r1
 80055d6:	6831      	ldr	r1, [r6, #0]
 80055d8:	4605      	mov	r5, r0
 80055da:	b911      	cbnz	r1, 80055e2 <sbrk_aligned+0x12>
 80055dc:	f000 f8bc 	bl	8005758 <_sbrk_r>
 80055e0:	6030      	str	r0, [r6, #0]
 80055e2:	4621      	mov	r1, r4
 80055e4:	4628      	mov	r0, r5
 80055e6:	f000 f8b7 	bl	8005758 <_sbrk_r>
 80055ea:	1c43      	adds	r3, r0, #1
 80055ec:	d00a      	beq.n	8005604 <sbrk_aligned+0x34>
 80055ee:	1cc4      	adds	r4, r0, #3
 80055f0:	f024 0403 	bic.w	r4, r4, #3
 80055f4:	42a0      	cmp	r0, r4
 80055f6:	d007      	beq.n	8005608 <sbrk_aligned+0x38>
 80055f8:	1a21      	subs	r1, r4, r0
 80055fa:	4628      	mov	r0, r5
 80055fc:	f000 f8ac 	bl	8005758 <_sbrk_r>
 8005600:	3001      	adds	r0, #1
 8005602:	d101      	bne.n	8005608 <sbrk_aligned+0x38>
 8005604:	f04f 34ff 	mov.w	r4, #4294967295
 8005608:	4620      	mov	r0, r4
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	20000230 	.word	0x20000230

08005610 <_malloc_r>:
 8005610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005614:	1ccd      	adds	r5, r1, #3
 8005616:	f025 0503 	bic.w	r5, r5, #3
 800561a:	3508      	adds	r5, #8
 800561c:	2d0c      	cmp	r5, #12
 800561e:	bf38      	it	cc
 8005620:	250c      	movcc	r5, #12
 8005622:	2d00      	cmp	r5, #0
 8005624:	4607      	mov	r7, r0
 8005626:	db01      	blt.n	800562c <_malloc_r+0x1c>
 8005628:	42a9      	cmp	r1, r5
 800562a:	d905      	bls.n	8005638 <_malloc_r+0x28>
 800562c:	230c      	movs	r3, #12
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	2600      	movs	r6, #0
 8005632:	4630      	mov	r0, r6
 8005634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005638:	4e2e      	ldr	r6, [pc, #184]	; (80056f4 <_malloc_r+0xe4>)
 800563a:	f000 f89d 	bl	8005778 <__malloc_lock>
 800563e:	6833      	ldr	r3, [r6, #0]
 8005640:	461c      	mov	r4, r3
 8005642:	bb34      	cbnz	r4, 8005692 <_malloc_r+0x82>
 8005644:	4629      	mov	r1, r5
 8005646:	4638      	mov	r0, r7
 8005648:	f7ff ffc2 	bl	80055d0 <sbrk_aligned>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	4604      	mov	r4, r0
 8005650:	d14d      	bne.n	80056ee <_malloc_r+0xde>
 8005652:	6834      	ldr	r4, [r6, #0]
 8005654:	4626      	mov	r6, r4
 8005656:	2e00      	cmp	r6, #0
 8005658:	d140      	bne.n	80056dc <_malloc_r+0xcc>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	4631      	mov	r1, r6
 800565e:	4638      	mov	r0, r7
 8005660:	eb04 0803 	add.w	r8, r4, r3
 8005664:	f000 f878 	bl	8005758 <_sbrk_r>
 8005668:	4580      	cmp	r8, r0
 800566a:	d13a      	bne.n	80056e2 <_malloc_r+0xd2>
 800566c:	6821      	ldr	r1, [r4, #0]
 800566e:	3503      	adds	r5, #3
 8005670:	1a6d      	subs	r5, r5, r1
 8005672:	f025 0503 	bic.w	r5, r5, #3
 8005676:	3508      	adds	r5, #8
 8005678:	2d0c      	cmp	r5, #12
 800567a:	bf38      	it	cc
 800567c:	250c      	movcc	r5, #12
 800567e:	4629      	mov	r1, r5
 8005680:	4638      	mov	r0, r7
 8005682:	f7ff ffa5 	bl	80055d0 <sbrk_aligned>
 8005686:	3001      	adds	r0, #1
 8005688:	d02b      	beq.n	80056e2 <_malloc_r+0xd2>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	442b      	add	r3, r5
 800568e:	6023      	str	r3, [r4, #0]
 8005690:	e00e      	b.n	80056b0 <_malloc_r+0xa0>
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	1b52      	subs	r2, r2, r5
 8005696:	d41e      	bmi.n	80056d6 <_malloc_r+0xc6>
 8005698:	2a0b      	cmp	r2, #11
 800569a:	d916      	bls.n	80056ca <_malloc_r+0xba>
 800569c:	1961      	adds	r1, r4, r5
 800569e:	42a3      	cmp	r3, r4
 80056a0:	6025      	str	r5, [r4, #0]
 80056a2:	bf18      	it	ne
 80056a4:	6059      	strne	r1, [r3, #4]
 80056a6:	6863      	ldr	r3, [r4, #4]
 80056a8:	bf08      	it	eq
 80056aa:	6031      	streq	r1, [r6, #0]
 80056ac:	5162      	str	r2, [r4, r5]
 80056ae:	604b      	str	r3, [r1, #4]
 80056b0:	4638      	mov	r0, r7
 80056b2:	f104 060b 	add.w	r6, r4, #11
 80056b6:	f000 f865 	bl	8005784 <__malloc_unlock>
 80056ba:	f026 0607 	bic.w	r6, r6, #7
 80056be:	1d23      	adds	r3, r4, #4
 80056c0:	1af2      	subs	r2, r6, r3
 80056c2:	d0b6      	beq.n	8005632 <_malloc_r+0x22>
 80056c4:	1b9b      	subs	r3, r3, r6
 80056c6:	50a3      	str	r3, [r4, r2]
 80056c8:	e7b3      	b.n	8005632 <_malloc_r+0x22>
 80056ca:	6862      	ldr	r2, [r4, #4]
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	bf0c      	ite	eq
 80056d0:	6032      	streq	r2, [r6, #0]
 80056d2:	605a      	strne	r2, [r3, #4]
 80056d4:	e7ec      	b.n	80056b0 <_malloc_r+0xa0>
 80056d6:	4623      	mov	r3, r4
 80056d8:	6864      	ldr	r4, [r4, #4]
 80056da:	e7b2      	b.n	8005642 <_malloc_r+0x32>
 80056dc:	4634      	mov	r4, r6
 80056de:	6876      	ldr	r6, [r6, #4]
 80056e0:	e7b9      	b.n	8005656 <_malloc_r+0x46>
 80056e2:	230c      	movs	r3, #12
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	4638      	mov	r0, r7
 80056e8:	f000 f84c 	bl	8005784 <__malloc_unlock>
 80056ec:	e7a1      	b.n	8005632 <_malloc_r+0x22>
 80056ee:	6025      	str	r5, [r4, #0]
 80056f0:	e7de      	b.n	80056b0 <_malloc_r+0xa0>
 80056f2:	bf00      	nop
 80056f4:	2000022c 	.word	0x2000022c

080056f8 <_realloc_r>:
 80056f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fc:	4680      	mov	r8, r0
 80056fe:	4614      	mov	r4, r2
 8005700:	460e      	mov	r6, r1
 8005702:	b921      	cbnz	r1, 800570e <_realloc_r+0x16>
 8005704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005708:	4611      	mov	r1, r2
 800570a:	f7ff bf81 	b.w	8005610 <_malloc_r>
 800570e:	b92a      	cbnz	r2, 800571c <_realloc_r+0x24>
 8005710:	f7ff ff12 	bl	8005538 <_free_r>
 8005714:	4625      	mov	r5, r4
 8005716:	4628      	mov	r0, r5
 8005718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800571c:	f000 f838 	bl	8005790 <_malloc_usable_size_r>
 8005720:	4284      	cmp	r4, r0
 8005722:	4607      	mov	r7, r0
 8005724:	d802      	bhi.n	800572c <_realloc_r+0x34>
 8005726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800572a:	d812      	bhi.n	8005752 <_realloc_r+0x5a>
 800572c:	4621      	mov	r1, r4
 800572e:	4640      	mov	r0, r8
 8005730:	f7ff ff6e 	bl	8005610 <_malloc_r>
 8005734:	4605      	mov	r5, r0
 8005736:	2800      	cmp	r0, #0
 8005738:	d0ed      	beq.n	8005716 <_realloc_r+0x1e>
 800573a:	42bc      	cmp	r4, r7
 800573c:	4622      	mov	r2, r4
 800573e:	4631      	mov	r1, r6
 8005740:	bf28      	it	cs
 8005742:	463a      	movcs	r2, r7
 8005744:	f7ff fed0 	bl	80054e8 <memcpy>
 8005748:	4631      	mov	r1, r6
 800574a:	4640      	mov	r0, r8
 800574c:	f7ff fef4 	bl	8005538 <_free_r>
 8005750:	e7e1      	b.n	8005716 <_realloc_r+0x1e>
 8005752:	4635      	mov	r5, r6
 8005754:	e7df      	b.n	8005716 <_realloc_r+0x1e>
	...

08005758 <_sbrk_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4d06      	ldr	r5, [pc, #24]	; (8005774 <_sbrk_r+0x1c>)
 800575c:	2300      	movs	r3, #0
 800575e:	4604      	mov	r4, r0
 8005760:	4608      	mov	r0, r1
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	f7fb fa7e 	bl	8000c64 <_sbrk>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_sbrk_r+0x1a>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_sbrk_r+0x1a>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	20000234 	.word	0x20000234

08005778 <__malloc_lock>:
 8005778:	4801      	ldr	r0, [pc, #4]	; (8005780 <__malloc_lock+0x8>)
 800577a:	f000 b811 	b.w	80057a0 <__retarget_lock_acquire_recursive>
 800577e:	bf00      	nop
 8005780:	20000238 	.word	0x20000238

08005784 <__malloc_unlock>:
 8005784:	4801      	ldr	r0, [pc, #4]	; (800578c <__malloc_unlock+0x8>)
 8005786:	f000 b80c 	b.w	80057a2 <__retarget_lock_release_recursive>
 800578a:	bf00      	nop
 800578c:	20000238 	.word	0x20000238

08005790 <_malloc_usable_size_r>:
 8005790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005794:	1f18      	subs	r0, r3, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	bfbc      	itt	lt
 800579a:	580b      	ldrlt	r3, [r1, r0]
 800579c:	18c0      	addlt	r0, r0, r3
 800579e:	4770      	bx	lr

080057a0 <__retarget_lock_acquire_recursive>:
 80057a0:	4770      	bx	lr

080057a2 <__retarget_lock_release_recursive>:
 80057a2:	4770      	bx	lr

080057a4 <_init>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	bf00      	nop
 80057a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057aa:	bc08      	pop	{r3}
 80057ac:	469e      	mov	lr, r3
 80057ae:	4770      	bx	lr

080057b0 <_fini>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	bf00      	nop
 80057b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b6:	bc08      	pop	{r3}
 80057b8:	469e      	mov	lr, r3
 80057ba:	4770      	bx	lr
