
PP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057bc  080057bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080057bc  080057bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057bc  080057bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080057c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000070  08005834  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08005834  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4e6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba6  00000000  00000000  0002e586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00030130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00030d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f41  00000000  00000000  000318a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb73  00000000  00000000  000467e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085bb5  00000000  00000000  0005535c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000daf11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003694  00000000  00000000  000daf64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005718 	.word	0x08005718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005718 	.word	0x08005718

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fd22 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f818 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f9c8 	bl	8000610 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f926 	bl	80004d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f994 	bl	80005b0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000288:	f000 f86e 	bl	8000368 <MX_TIM1_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800028c:	4806      	ldr	r0, [pc, #24]	; (80002a8 <main+0x38>)
 800028e:	f002 fcd7 	bl	8002c40 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000292:	2100      	movs	r1, #0
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <main+0x38>)
 8000296:	f002 fed1 	bl	800303c <HAL_TIM_IC_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Verificar os valores de entrada dos pinos PB 1, 6 e 7
	check_pin();
 800029a:	f000 faa9 	bl	80007f0 <check_pin>

	// Verifica a combinação dos pinos PB 1, 6 e 7
	config_pwm();
 800029e:	f000 faef 	bl	8000880 <config_pwm>

    // Verifica o valor da variável Frequency_Local
	check_frequency();
 80002a2:	f000 fb31 	bl	8000908 <check_frequency>
	check_pin();
 80002a6:	e7f8      	b.n	800029a <main+0x2a>
 80002a8:	200000d8 	.word	0x200000d8

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b09c      	sub	sp, #112	; 0x70
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002b6:	2228      	movs	r2, #40	; 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f004 fdb6 	bl	8004e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2230      	movs	r2, #48	; 0x30
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f004 fda8 	bl	8004e2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002dc:	2302      	movs	r3, #2
 80002de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e4:	2310      	movs	r3, #16
 80002e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	2302      	movs	r3, #2
 80002ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ec:	2300      	movs	r3, #0
 80002ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002f0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 f81c 	bl	8001338 <HAL_RCC_OscConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000306:	f000 fb31 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	230f      	movs	r3, #15
 800030c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030e:	2302      	movs	r3, #2
 8000310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000320:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000324:	2102      	movs	r1, #2
 8000326:	4618      	mov	r0, r3
 8000328:	f002 f844 	bl	80023b4 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000332:	f000 fb1b 	bl	800096c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800033c:	2300      	movs	r3, #0
 800033e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f002 faa0 	bl	8002888 <HAL_RCCEx_PeriphCLKConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800034e:	f000 fb0d 	bl	800096c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000352:	2200      	movs	r2, #0
 8000354:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000358:	2000      	movs	r0, #0
 800035a:	f002 f9a7 	bl	80026ac <HAL_RCC_MCOConfig>
}
 800035e:	bf00      	nop
 8000360:	3770      	adds	r7, #112	; 0x70
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b09a      	sub	sp, #104	; 0x68
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800036e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000388:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
 8000398:	615a      	str	r2, [r3, #20]
 800039a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	222c      	movs	r2, #44	; 0x2c
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f004 fd42 	bl	8004e2c <memset>
   *   -> f_base = 20 kHz = 64 MHz / (PSC + 1) => PSC = (64 MHz / 20 kHz) - 1 = 3199
   * - PWM (ARR) = (T_pwm * f_base) - 1
   * - CCR4 = ARR / 2 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003a8:	4b46      	ldr	r3, [pc, #280]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003aa:	4a47      	ldr	r2, [pc, #284]	; (80004c8 <MX_TIM1_Init+0x160>)
 80003ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3199;
 80003ae:	4b45      	ldr	r3, [pc, #276]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003b0:	f640 427f 	movw	r2, #3199	; 0xc7f
 80003b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b6:	4b43      	ldr	r3, [pc, #268]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = Freq_Timer1;
 80003bc:	4b43      	ldr	r3, [pc, #268]	; (80004cc <MX_TIM1_Init+0x164>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a40      	ldr	r2, [pc, #256]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003c2:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c4:	4b3f      	ldr	r3, [pc, #252]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003ca:	4b3e      	ldr	r3, [pc, #248]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d0:	4b3c      	ldr	r3, [pc, #240]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003d6:	483b      	ldr	r0, [pc, #236]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003d8:	f002 fbda 	bl	8002b90 <HAL_TIM_Base_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80003e2:	f000 fac3 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ea:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003f0:	4619      	mov	r1, r3
 80003f2:	4834      	ldr	r0, [pc, #208]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80003f4:	f003 fa20 	bl	8003838 <HAL_TIM_ConfigClockSource>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80003fe:	f000 fab5 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000402:	4830      	ldr	r0, [pc, #192]	; (80004c4 <MX_TIM1_Init+0x15c>)
 8000404:	f002 fc70 	bl	8002ce8 <HAL_TIM_PWM_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800040e:	f000 faad 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000412:	2300      	movs	r3, #0
 8000414:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000416:	2300      	movs	r3, #0
 8000418:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800041e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000422:	4619      	mov	r1, r3
 8000424:	4827      	ldr	r0, [pc, #156]	; (80004c4 <MX_TIM1_Init+0x15c>)
 8000426:	f004 f813 	bl	8004450 <HAL_TIMEx_MasterConfigSynchronization>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000430:	f000 fa9c 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000434:	2360      	movs	r3, #96	; 0x60
 8000436:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = (htim1.Init.Period+1)/2;
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <MX_TIM1_Init+0x15c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	3301      	adds	r3, #1
 800043e:	085b      	lsrs	r3, r3, #1
 8000440:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000442:	2300      	movs	r3, #0
 8000444:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000446:	2300      	movs	r3, #0
 8000448:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800044a:	2300      	movs	r3, #0
 800044c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800044e:	2300      	movs	r3, #0
 8000450:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000452:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000456:	220c      	movs	r2, #12
 8000458:	4619      	mov	r1, r3
 800045a:	481a      	ldr	r0, [pc, #104]	; (80004c4 <MX_TIM1_Init+0x15c>)
 800045c:	f003 f8d8 	bl	8003610 <HAL_TIM_PWM_ConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000466:	f000 fa81 	bl	800096c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800046e:	2300      	movs	r3, #0
 8000470:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800047e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000482:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800048c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000490:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4619      	mov	r1, r3
 800049e:	4809      	ldr	r0, [pc, #36]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80004a0:	f004 f83c 	bl	800451c <HAL_TIMEx_ConfigBreakDeadTime>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80004aa:	f000 fa5f 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //Iniciar a saída PWM
 80004ae:	210c      	movs	r1, #12
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80004b2:	f002 fc7b 	bl	8002dac <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004b6:	4803      	ldr	r0, [pc, #12]	; (80004c4 <MX_TIM1_Init+0x15c>)
 80004b8:	f000 fae0 	bl	8000a7c <HAL_TIM_MspPostInit>

}
 80004bc:	bf00      	nop
 80004be:	3768      	adds	r7, #104	; 0x68
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	2000008c 	.word	0x2000008c
 80004c8:	40012c00 	.word	0x40012c00
 80004cc:	200001ac 	.word	0x200001ac

080004d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	; 0x30
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004d6:	f107 0320 	add.w	r3, r7, #32
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004fc:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <MX_TIM2_Init+0xdc>)
 80004fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000504:	4b29      	ldr	r3, [pc, #164]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	4b28      	ldr	r3, [pc, #160]	; (80005ac <MX_TIM2_Init+0xdc>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000510:	4b26      	ldr	r3, [pc, #152]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000512:	f04f 32ff 	mov.w	r2, #4294967295
 8000516:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_TIM2_Init+0xdc>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000524:	4821      	ldr	r0, [pc, #132]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000526:	f002 fb33 	bl	8002b90 <HAL_TIM_Base_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000530:	f000 fa1c 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000538:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	4619      	mov	r1, r3
 8000540:	481a      	ldr	r0, [pc, #104]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000542:	f003 f979 	bl	8003838 <HAL_TIM_ConfigClockSource>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800054c:	f000 fa0e 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000550:	4816      	ldr	r0, [pc, #88]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000552:	f002 fd11 	bl	8002f78 <HAL_TIM_IC_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800055c:	f000 fa06 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4619      	mov	r1, r3
 800056e:	480f      	ldr	r0, [pc, #60]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000570:	f003 ff6e 	bl	8004450 <HAL_TIMEx_MasterConfigSynchronization>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800057a:	f000 f9f7 	bl	800096c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000582:	2301      	movs	r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_TIM2_Init+0xdc>)
 8000596:	f002 ff9e 	bl	80034d6 <HAL_TIM_IC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80005a0:	f000 f9e4 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	3730      	adds	r7, #48	; 0x30
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000d8 	.word	0x200000d8

080005b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005b6:	4a15      	ldr	r2, [pc, #84]	; (800060c <MX_USART2_UART_Init+0x5c>)
 80005b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005f4:	f004 f828 	bl	8004648 <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005fe:	f000 f9b5 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000124 	.word	0x20000124
 800060c:	40004400 	.word	0x40004400

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <MX_GPIO_Init+0xc8>)
 800062c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_GPIO_Init+0xc8>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a1f      	ldr	r2, [pc, #124]	; (80006d8 <MX_GPIO_Init+0xc8>)
 800065c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_GPIO_Init+0xc8>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2108      	movs	r1, #8
 8000672:	481a      	ldr	r0, [pc, #104]	; (80006dc <MX_GPIO_Init+0xcc>)
 8000674:	f000 fe48 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000678:	23c2      	movs	r3, #194	; 0xc2
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <MX_GPIO_Init+0xcc>)
 800068c:	f000 fcb2 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f000 fca0 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006b4:	2308      	movs	r3, #8
 80006b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_GPIO_Init+0xcc>)
 80006cc:	f000 fc92 	bl	8000ff4 <HAL_GPIO_Init>

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	48000400 	.word	0x48000400

080006e0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  // Time capture when there is a Rising Edge
  sample[Ind]=(uint32_t) HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80006e8:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006ea:	681c      	ldr	r4, [r3, #0]
 80006ec:	2100      	movs	r1, #0
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f003 f96c 	bl	80039cc <HAL_TIM_ReadCapturedValue>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a29      	ldr	r2, [pc, #164]	; (800079c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80006f8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  Ind++;
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	4a25      	ldr	r2, [pc, #148]	; (8000798 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000704:	6013      	str	r3, [r2, #0]

  // Processing the data to calculate frequency
  if (Ind == 5){
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b05      	cmp	r3, #5
 800070c:	d13f      	bne.n	800078e <HAL_TIM_IC_CaptureCallback+0xae>
    Ind = 0;
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
    DeltaT = sample[4] + Overflow*4294967295 - sample[0];
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000716:	691a      	ldr	r2, [r3, #16]
 8000718:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	1ad2      	subs	r2, r2, r3
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000726:	6013      	str	r3, [r2, #0]
    Overflow = 0;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
    Frequency = 4*64000000/((htim->Init.Prescaler+1)*DeltaT);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000736:	6812      	ldr	r2, [r2, #0]
 8000738:	fb02 f303 	mul.w	r3, r2, r3
 800073c:	4a1a      	ldr	r2, [pc, #104]	; (80007a8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000744:	6013      	str	r3, [r2, #0]
    Capacity = 1000000/Frequency;
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800074c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000752:	6013      	str	r3, [r2, #0]
    Frequency_Local = Frequency;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800075a:	6013      	str	r3, [r2, #0]

    // Formatting of the display spaces
    sprintf(Text,"Frequency = %d Hz  C = %d pF\n", Frequency, Capacity);
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <HAL_TIM_IC_CaptureCallback+0xcc>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4915      	ldr	r1, [pc, #84]	; (80007bc <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000768:	f004 fb68 	bl	8004e3c <siprintf>

    // Display with a speed 30 times less for readability
    if(Show++ == 30){
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	1c5a      	adds	r2, r3, #1
 8000772:	4914      	ldr	r1, [pc, #80]	; (80007c4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000774:	600a      	str	r2, [r1, #0]
 8000776:	2b1e      	cmp	r3, #30
 8000778:	d109      	bne.n	800078e <HAL_TIM_IC_CaptureCallback+0xae>
      Show = 0;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
	    HAL_UART_Transmit(&huart2,Text,40,1000);
 8000780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000784:	2228      	movs	r2, #40	; 0x28
 8000786:	490e      	ldr	r1, [pc, #56]	; (80007c0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000788:	480f      	ldr	r0, [pc, #60]	; (80007c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800078a:	f003 ffab 	bl	80046e4 <HAL_UART_Transmit>
    }
  }
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	bf00      	nop
 8000798:	200001d4 	.word	0x200001d4
 800079c:	200001b8 	.word	0x200001b8
 80007a0:	200001d0 	.word	0x200001d0
 80007a4:	200001cc 	.word	0x200001cc
 80007a8:	0f424000 	.word	0x0f424000
 80007ac:	200001b0 	.word	0x200001b0
 80007b0:	000f4240 	.word	0x000f4240
 80007b4:	200001b4 	.word	0x200001b4
 80007b8:	200001a8 	.word	0x200001a8
 80007bc:	08005730 	.word	0x08005730
 80007c0:	200001dc 	.word	0x200001dc
 80007c4:	200001d8 	.word	0x200001d8
 80007c8:	20000124 	.word	0x20000124

080007cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  Overflow++;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007dc:	6013      	str	r3, [r2, #0]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200001d0 	.word	0x200001d0

080007f0 <check_pin>:
/* USER CODE END 4 */

void check_pin(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	/* Leitura dos pinos e atribuição de valores às variáveis */
	Input_Pin_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET ? 1 : 0;
 80007f4:	2102      	movs	r1, #2
 80007f6:	481d      	ldr	r0, [pc, #116]	; (800086c <check_pin+0x7c>)
 80007f8:	f000 fd6e 	bl	80012d8 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <check_pin+0x80>)
 800080c:	701a      	strb	r2, [r3, #0]
	Input_Pin_2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET ? 1 : 0;
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	4816      	ldr	r0, [pc, #88]	; (800086c <check_pin+0x7c>)
 8000812:	f000 fd61 	bl	80012d8 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	bf0c      	ite	eq
 800081c:	2301      	moveq	r3, #1
 800081e:	2300      	movne	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <check_pin+0x84>)
 8000826:	701a      	strb	r2, [r3, #0]
	Input_Pin_3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET ? 1 : 0;
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <check_pin+0x7c>)
 800082c:	f000 fd54 	bl	80012d8 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	bf0c      	ite	eq
 8000836:	2301      	moveq	r3, #1
 8000838:	2300      	movne	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	461a      	mov	r2, r3
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <check_pin+0x88>)
 8000840:	701a      	strb	r2, [r3, #0]

	/* Calcula a combinação presente nos pinos */
	sum_current = (Input_Pin_1 << 2) | (Input_Pin_2 << 1) | Input_Pin_3;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <check_pin+0x80>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	b25a      	sxtb	r2, r3
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <check_pin+0x84>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	b25b      	sxtb	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b25a      	sxtb	r2, r3
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <check_pin+0x88>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b25b      	sxtb	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b25b      	sxtb	r3, r3
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <check_pin+0x8c>)
 8000864:	701a      	strb	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	48000400 	.word	0x48000400
 8000870:	20000204 	.word	0x20000204
 8000874:	20000205 	.word	0x20000205
 8000878:	20000206 	.word	0x20000206
 800087c:	20000207 	.word	0x20000207

08000880 <config_pwm>:

void config_pwm(void) {
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	/* A partir do valor somado em combinação, será gerado uma frequência para a nota musical */
	switch (sum_current) {
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <config_pwm+0x80>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b07      	cmp	r3, #7
 800088a:	d833      	bhi.n	80008f4 <config_pwm+0x74>
 800088c:	a201      	add	r2, pc, #4	; (adr r2, 8000894 <config_pwm+0x14>)
 800088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000892:	bf00      	nop
 8000894:	080008b5 	.word	0x080008b5
 8000898:	080008bd 	.word	0x080008bd
 800089c:	080008c5 	.word	0x080008c5
 80008a0:	080008cd 	.word	0x080008cd
 80008a4:	080008d5 	.word	0x080008d5
 80008a8:	080008dd 	.word	0x080008dd
 80008ac:	080008e5 	.word	0x080008e5
 80008b0:	080008ed 	.word	0x080008ed
	    case 0:
	    	Freq_Timer1 = 0; 	// Nulo
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <config_pwm+0x84>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
	        break;
 80008ba:	e01b      	b.n	80008f4 <config_pwm+0x74>
	    case 1:
	    	Freq_Timer1 = 136;	// Ré
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <config_pwm+0x84>)
 80008be:	2288      	movs	r2, #136	; 0x88
 80008c0:	601a      	str	r2, [r3, #0]
	        break;
 80008c2:	e017      	b.n	80008f4 <config_pwm+0x74>
	    case 2:
	    	Freq_Timer1 = 182;	// Lá
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <config_pwm+0x84>)
 80008c6:	22b6      	movs	r2, #182	; 0xb6
 80008c8:	601a      	str	r2, [r3, #0]
	        break;
 80008ca:	e013      	b.n	80008f4 <config_pwm+0x74>
	    case 3:
	    	Freq_Timer1 = 81;	// Si
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <config_pwm+0x84>)
 80008ce:	2251      	movs	r2, #81	; 0x51
 80008d0:	601a      	str	r2, [r3, #0]
	        break;
 80008d2:	e00f      	b.n	80008f4 <config_pwm+0x74>
	    case 4:
	    	Freq_Timer1 = 243;	// Mi-g
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <config_pwm+0x84>)
 80008d6:	22f3      	movs	r2, #243	; 0xf3
 80008d8:	601a      	str	r2, [r3, #0]
	        break;
 80008da:	e00b      	b.n	80008f4 <config_pwm+0x74>
	    case 5:
	    	Freq_Timer1 = 61;	// Mi-a
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <config_pwm+0x84>)
 80008de:	223d      	movs	r2, #61	; 0x3d
 80008e0:	601a      	str	r2, [r3, #0]
	        break;
 80008e2:	e007      	b.n	80008f4 <config_pwm+0x74>
	    case 6:
	    	Freq_Timer1 = 102;	// Sol
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <config_pwm+0x84>)
 80008e6:	2266      	movs	r2, #102	; 0x66
 80008e8:	601a      	str	r2, [r3, #0]
	    	break;
 80008ea:	e003      	b.n	80008f4 <config_pwm+0x74>
	    case 7:
	    	Freq_Timer1 = 0;	// Nulo
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <config_pwm+0x84>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
	}
}
 80008f2:	e7ff      	b.n	80008f4 <config_pwm+0x74>
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000207 	.word	0x20000207
 8000904:	200001ac 	.word	0x200001ac

08000908 <check_frequency>:

void check_frequency(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	/* Verifica se a frequência é menor do que 42kHz, ou seja, se há a presença da mão */
	if (Frequency_Local < 42000 && sum_current != 0 && Freq_Timer1 != 0) {
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <check_frequency+0x54>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000914:	4293      	cmp	r3, r2
 8000916:	d814      	bhi.n	8000942 <check_frequency+0x3a>
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <check_frequency+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d010      	beq.n	8000942 <check_frequency+0x3a>
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <check_frequency+0x5c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d00c      	beq.n	8000942 <check_frequency+0x3a>

		/* Verifica o estado anterior para saber se a mesma nota musical está sendo requisitada */
		if(sum_current != sum_before){
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <check_frequency+0x58>)
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <check_frequency+0x60>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	429a      	cmp	r2, r3
 8000932:	d00e      	beq.n	8000952 <check_frequency+0x4a>
			sum_before = sum_current;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <check_frequency+0x58>)
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <check_frequency+0x60>)
 800093a:	701a      	strb	r2, [r3, #0]
			MX_TIM1_Init();
 800093c:	f7ff fd14 	bl	8000368 <MX_TIM1_Init>
		if(sum_current != sum_before){
 8000940:	e007      	b.n	8000952 <check_frequency+0x4a>
		}
	}
	else {
		Freq_Timer1 = 0;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <check_frequency+0x5c>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
		sum_before = 0;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <check_frequency+0x60>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
		MX_TIM1_Init();
 800094e:	f7ff fd0b 	bl	8000368 <MX_TIM1_Init>
	}

	/* Aguarda um tempo (em milisegundos) para realizar o próximo ciclo */
	HAL_Delay(100);
 8000952:	2064      	movs	r0, #100	; 0x64
 8000954:	f000 fa18 	bl	8000d88 <HAL_Delay>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200001a8 	.word	0x200001a8
 8000960:	20000207 	.word	0x20000207
 8000964:	200001ac 	.word	0x200001ac
 8000968:	20000208 	.word	0x20000208

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_MspInit+0x44>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_MspInit+0x44>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_MspInit+0x44>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x44>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x44>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	61d3      	str	r3, [r2, #28]
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x44>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a24      	ldr	r2, [pc, #144]	; (8000a74 <HAL_TIM_Base_MspInit+0xb0>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d10c      	bne.n	8000a00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009e6:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <HAL_TIM_Base_MspInit+0xb4>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <HAL_TIM_Base_MspInit+0xb4>)
 80009ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009f0:	6193      	str	r3, [r2, #24]
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <HAL_TIM_Base_MspInit+0xb4>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009fe:	e035      	b.n	8000a6c <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a08:	d130      	bne.n	8000a6c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <HAL_TIM_Base_MspInit+0xb4>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a1a      	ldr	r2, [pc, #104]	; (8000a78 <HAL_TIM_Base_MspInit+0xb4>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_TIM_Base_MspInit+0xb4>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_TIM_Base_MspInit+0xb4>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <HAL_TIM_Base_MspInit+0xb4>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	6153      	str	r3, [r2, #20]
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_TIM_Base_MspInit+0xb4>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 facc 	bl	8000ff4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	201c      	movs	r0, #28
 8000a62:	f000 fa90 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a66:	201c      	movs	r0, #28
 8000a68:	f000 faa9 	bl	8000fbe <HAL_NVIC_EnableIRQ>
}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40012c00 	.word	0x40012c00
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <HAL_TIM_MspPostInit+0x68>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d11d      	bne.n	8000ada <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_TIM_MspPostInit+0x6c>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <HAL_TIM_MspPostInit+0x6c>)
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	6153      	str	r3, [r2, #20]
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_TIM_MspPostInit+0x6c>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ab6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000ac8:	230b      	movs	r3, #11
 8000aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad6:	f000 fa8d 	bl	8000ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3720      	adds	r7, #32
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40012c00 	.word	0x40012c00
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0x7c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d128      	bne.n	8000b60 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_UART_MspInit+0x80>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <HAL_UART_MspInit+0x80>)
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <HAL_UART_MspInit+0x80>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_UART_MspInit+0x80>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <HAL_UART_MspInit+0x80>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	6153      	str	r3, [r2, #20]
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_UART_MspInit+0x80>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b3e:	230c      	movs	r3, #12
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5c:	f000 fa4a 	bl	8000ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	40021000 	.word	0x40021000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8c4 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <TIM2_IRQHandler+0x10>)
 8000bca:	f002 fb65 	bl	8003298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000d8 	.word	0x200000d8

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f004 f8e6 	bl	8004dd8 <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20004000 	.word	0x20004000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	2000020c 	.word	0x2000020c
 8000c40:	20000228 	.word	0x20000228

08000c44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <LoopForever+0xe>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c84:	4c0b      	ldr	r4, [pc, #44]	; (8000cb4 <LoopForever+0x16>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c92:	f7ff ffd7 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f004 f8a5 	bl	8004de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9a:	f7ff fae9 	bl	8000270 <main>

08000c9e <LoopForever>:

LoopForever:
    b LoopForever
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ca0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cac:	080057c4 	.word	0x080057c4
  ldr r2, =_sbss
 8000cb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cb4:	20000224 	.word	0x20000224

08000cb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x28>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x28>)
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f94f 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f000 f808 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fe50 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40022000 	.word	0x40022000

08000ce8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f967 	bl	8000fda <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f92f 	bl	8000f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000210 	.word	0x20000210

08000d70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000210 	.word	0x20000210

08000d88 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff ffee 	bl	8000d70 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_Delay+0x44>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dae:	bf00      	nop
 8000db0:	f7ff ffde 	bl	8000d70 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <__NVIC_EnableIRQ+0x38>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f3c:	d301      	bcc.n	8000f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00f      	b.n	8000f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <SysTick_Config+0x40>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f7ff ff8e 	bl	8000e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SysTick_Config+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SysTick_Config+0x40>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff29 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff3e 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff8e 	bl	8000ec4 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5d 	bl	8000e70 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff31 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffa2 	bl	8000f2c <SysTick_Config>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	e14e      	b.n	80012a2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	2101      	movs	r1, #1
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 8140 	beq.w	800129c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d005      	beq.n	8001034 <HAL_GPIO_Init+0x40>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d130      	bne.n	8001096 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106a:	2201      	movs	r2, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	f003 0201 	and.w	r2, r3, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d017      	beq.n	80010d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d123      	bne.n	8001126 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	6939      	ldr	r1, [r7, #16]
 8001122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0203 	and.w	r2, r3, #3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 809a 	beq.w	800129c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001168:	4b55      	ldr	r3, [pc, #340]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a54      	ldr	r2, [pc, #336]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001180:	4a50      	ldr	r2, [pc, #320]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011aa:	d013      	beq.n	80011d4 <HAL_GPIO_Init+0x1e0>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a46      	ldr	r2, [pc, #280]	; (80012c8 <HAL_GPIO_Init+0x2d4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d00d      	beq.n	80011d0 <HAL_GPIO_Init+0x1dc>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a45      	ldr	r2, [pc, #276]	; (80012cc <HAL_GPIO_Init+0x2d8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d007      	beq.n	80011cc <HAL_GPIO_Init+0x1d8>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a44      	ldr	r2, [pc, #272]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d101      	bne.n	80011c8 <HAL_GPIO_Init+0x1d4>
 80011c4:	2303      	movs	r3, #3
 80011c6:	e006      	b.n	80011d6 <HAL_GPIO_Init+0x1e2>
 80011c8:	2305      	movs	r3, #5
 80011ca:	e004      	b.n	80011d6 <HAL_GPIO_Init+0x1e2>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e002      	b.n	80011d6 <HAL_GPIO_Init+0x1e2>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <HAL_GPIO_Init+0x1e2>
 80011d4:	2300      	movs	r3, #0
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	f002 0203 	and.w	r2, r2, #3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4093      	lsls	r3, r2
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011e6:	4937      	ldr	r1, [pc, #220]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_GPIO_Init+0x2e0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001218:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <HAL_GPIO_Init+0x2e0>)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_GPIO_Init+0x2e0>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001242:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <HAL_GPIO_Init+0x2e0>)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <HAL_GPIO_Init+0x2e0>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800126c:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <HAL_GPIO_Init+0x2e0>)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_GPIO_Init+0x2e0>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_GPIO_Init+0x2e0>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3301      	adds	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f47f aea9 	bne.w	8001004 <HAL_GPIO_Init+0x10>
  }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	48000400 	.word	0x48000400
 80012cc:	48000800 	.word	0x48000800
 80012d0:	48000c00 	.word	0x48000c00
 80012d4:	40010400 	.word	0x40010400

080012d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e001      	b.n	80012fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001324:	e002      	b.n	800132c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800133e:	af00      	add	r7, sp, #0
 8001340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001348:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800134a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	f001 b823 	b.w	80023a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 817d 	beq.w	800166e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001374:	4bbc      	ldr	r3, [pc, #752]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b04      	cmp	r3, #4
 800137e:	d00c      	beq.n	800139a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001380:	4bb9      	ldr	r3, [pc, #740]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b08      	cmp	r3, #8
 800138a:	d15c      	bne.n	8001446 <HAL_RCC_OscConfig+0x10e>
 800138c:	4bb6      	ldr	r3, [pc, #728]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001398:	d155      	bne.n	8001446 <HAL_RCC_OscConfig+0x10e>
 800139a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800139e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b2:	fab3 f383 	clz	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	095b      	lsrs	r3, r3, #5
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d102      	bne.n	80013cc <HAL_RCC_OscConfig+0x94>
 80013c6:	4ba8      	ldr	r3, [pc, #672]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	e015      	b.n	80013f8 <HAL_RCC_OscConfig+0xc0>
 80013cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013ec:	fa93 f3a3 	rbit	r3, r3
 80013f0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80013f4:	4b9c      	ldr	r3, [pc, #624]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013fc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001400:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001404:	fa92 f2a2 	rbit	r2, r2
 8001408:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800140c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001410:	fab2 f282 	clz	r2, r2
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	f042 0220 	orr.w	r2, r2, #32
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	f002 021f 	and.w	r2, r2, #31
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f202 	lsl.w	r2, r1, r2
 8001426:	4013      	ands	r3, r2
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 811f 	beq.w	800166c <HAL_RCC_OscConfig+0x334>
 800142e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 8116 	bne.w	800166c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	f000 bfaf 	b.w	80023a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001456:	d106      	bne.n	8001466 <HAL_RCC_OscConfig+0x12e>
 8001458:	4b83      	ldr	r3, [pc, #524]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a82      	ldr	r2, [pc, #520]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 800145e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	e036      	b.n	80014d4 <HAL_RCC_OscConfig+0x19c>
 8001466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x158>
 8001476:	4b7c      	ldr	r3, [pc, #496]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a7b      	ldr	r2, [pc, #492]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 800147c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b79      	ldr	r3, [pc, #484]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a78      	ldr	r2, [pc, #480]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 8001488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e021      	b.n	80014d4 <HAL_RCC_OscConfig+0x19c>
 8001490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001494:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x184>
 80014a2:	4b71      	ldr	r3, [pc, #452]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a70      	ldr	r2, [pc, #448]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b6e      	ldr	r3, [pc, #440]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6d      	ldr	r2, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0x19c>
 80014bc:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a69      	ldr	r2, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014d4:	4b64      	ldr	r3, [pc, #400]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	f023 020f 	bic.w	r2, r3, #15
 80014dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	495f      	ldr	r1, [pc, #380]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d059      	beq.n	80015b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fc37 	bl	8000d70 <HAL_GetTick>
 8001502:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	e00a      	b.n	800151e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fc32 	bl	8000d70 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b64      	cmp	r3, #100	; 0x64
 8001516:	d902      	bls.n	800151e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	f000 bf43 	b.w	80023a4 <HAL_RCC_OscConfig+0x106c>
 800151e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001522:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001532:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	095b      	lsrs	r3, r3, #5
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d102      	bne.n	8001550 <HAL_RCC_OscConfig+0x218>
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	e015      	b.n	800157c <HAL_RCC_OscConfig+0x244>
 8001550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001554:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800155c:	fa93 f3a3 	rbit	r3, r3
 8001560:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001568:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800156c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001578:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001580:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001584:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001588:	fa92 f2a2 	rbit	r2, r2
 800158c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001590:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001594:	fab2 f282 	clz	r2, r2
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	f042 0220 	orr.w	r2, r2, #32
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	f002 021f 	and.w	r2, r2, #31
 80015a4:	2101      	movs	r1, #1
 80015a6:	fa01 f202 	lsl.w	r2, r1, r2
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0ab      	beq.n	8001508 <HAL_RCC_OscConfig+0x1d0>
 80015b0:	e05d      	b.n	800166e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fbdd 	bl	8000d70 <HAL_GetTick>
 80015b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fbd8 	bl	8000d70 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d902      	bls.n	80015d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	f000 bee9 	b.w	80023a4 <HAL_RCC_OscConfig+0x106c>
 80015d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80015e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	095b      	lsrs	r3, r3, #5
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d102      	bne.n	8001604 <HAL_RCC_OscConfig+0x2cc>
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	e015      	b.n	8001630 <HAL_RCC_OscConfig+0x2f8>
 8001604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001608:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001620:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_RCC_OscConfig+0x330>)
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001634:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001638:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800163c:	fa92 f2a2 	rbit	r2, r2
 8001640:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001644:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001648:	fab2 f282 	clz	r2, r2
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	f042 0220 	orr.w	r2, r2, #32
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	f002 021f 	and.w	r2, r2, #31
 8001658:	2101      	movs	r1, #1
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ab      	bne.n	80015bc <HAL_RCC_OscConfig+0x284>
 8001664:	e003      	b.n	800166e <HAL_RCC_OscConfig+0x336>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 817d 	beq.w	800197e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001684:	4ba6      	ldr	r3, [pc, #664]	; (8001920 <HAL_RCC_OscConfig+0x5e8>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001690:	4ba3      	ldr	r3, [pc, #652]	; (8001920 <HAL_RCC_OscConfig+0x5e8>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 030c 	and.w	r3, r3, #12
 8001698:	2b08      	cmp	r3, #8
 800169a:	d172      	bne.n	8001782 <HAL_RCC_OscConfig+0x44a>
 800169c:	4ba0      	ldr	r3, [pc, #640]	; (8001920 <HAL_RCC_OscConfig+0x5e8>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d16c      	bne.n	8001782 <HAL_RCC_OscConfig+0x44a>
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80016ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	095b      	lsrs	r3, r3, #5
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d102      	bne.n	80016d8 <HAL_RCC_OscConfig+0x3a0>
 80016d2:	4b93      	ldr	r3, [pc, #588]	; (8001920 <HAL_RCC_OscConfig+0x5e8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	e013      	b.n	8001700 <HAL_RCC_OscConfig+0x3c8>
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016ea:	2302      	movs	r3, #2
 80016ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016f4:	fa93 f3a3 	rbit	r3, r3
 80016f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016fc:	4b88      	ldr	r3, [pc, #544]	; (8001920 <HAL_RCC_OscConfig+0x5e8>)
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	2202      	movs	r2, #2
 8001702:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001706:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800170a:	fa92 f2a2 	rbit	r2, r2
 800170e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001712:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001716:	fab2 f282 	clz	r2, r2
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	f042 0220 	orr.w	r2, r2, #32
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	f002 021f 	and.w	r2, r2, #31
 8001726:	2101      	movs	r1, #1
 8001728:	fa01 f202 	lsl.w	r2, r1, r2
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00a      	beq.n	8001748 <HAL_RCC_OscConfig+0x410>
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d002      	beq.n	8001748 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	f000 be2e 	b.w	80023a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b75      	ldr	r3, [pc, #468]	; (8001920 <HAL_RCC_OscConfig+0x5e8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	21f8      	movs	r1, #248	; 0xf8
 800175e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001766:	fa91 f1a1 	rbit	r1, r1
 800176a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800176e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001772:	fab1 f181 	clz	r1, r1
 8001776:	b2c9      	uxtb	r1, r1
 8001778:	408b      	lsls	r3, r1
 800177a:	4969      	ldr	r1, [pc, #420]	; (8001920 <HAL_RCC_OscConfig+0x5e8>)
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001780:	e0fd      	b.n	800197e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8088 	beq.w	80018a4 <HAL_RCC_OscConfig+0x56c>
 8001794:	2301      	movs	r3, #1
 8001796:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800179e:	fa93 f3a3 	rbit	r3, r3
 80017a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80017a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	461a      	mov	r2, r3
 80017bc:	2301      	movs	r3, #1
 80017be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fad6 	bl	8000d70 <HAL_GetTick>
 80017c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff fad1 	bl	8000d70 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d902      	bls.n	80017e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	f000 bde2 	b.w	80023a4 <HAL_RCC_OscConfig+0x106c>
 80017e0:	2302      	movs	r3, #2
 80017e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80017f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	095b      	lsrs	r3, r3, #5
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b01      	cmp	r3, #1
 8001808:	d102      	bne.n	8001810 <HAL_RCC_OscConfig+0x4d8>
 800180a:	4b45      	ldr	r3, [pc, #276]	; (8001920 <HAL_RCC_OscConfig+0x5e8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	e013      	b.n	8001838 <HAL_RCC_OscConfig+0x500>
 8001810:	2302      	movs	r3, #2
 8001812:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001822:	2302      	movs	r3, #2
 8001824:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001828:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800182c:	fa93 f3a3 	rbit	r3, r3
 8001830:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001834:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <HAL_RCC_OscConfig+0x5e8>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	2202      	movs	r2, #2
 800183a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800183e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001842:	fa92 f2a2 	rbit	r2, r2
 8001846:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800184a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800184e:	fab2 f282 	clz	r2, r2
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	f042 0220 	orr.w	r2, r2, #32
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	f002 021f 	and.w	r2, r2, #31
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0af      	beq.n	80017ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_RCC_OscConfig+0x5e8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	21f8      	movs	r1, #248	; 0xf8
 8001880:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001888:	fa91 f1a1 	rbit	r1, r1
 800188c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001890:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001894:	fab1 f181 	clz	r1, r1
 8001898:	b2c9      	uxtb	r1, r1
 800189a:	408b      	lsls	r3, r1
 800189c:	4920      	ldr	r1, [pc, #128]	; (8001920 <HAL_RCC_OscConfig+0x5e8>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
 80018a2:	e06c      	b.n	800197e <HAL_RCC_OscConfig+0x646>
 80018a4:	2301      	movs	r3, #1
 80018a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80018b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	461a      	mov	r2, r3
 80018cc:	2300      	movs	r3, #0
 80018ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fa4e 	bl	8000d70 <HAL_GetTick>
 80018d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018da:	f7ff fa49 	bl	8000d70 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d902      	bls.n	80018f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	f000 bd5a 	b.w	80023a4 <HAL_RCC_OscConfig+0x106c>
 80018f0:	2302      	movs	r3, #2
 80018f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	095b      	lsrs	r3, r3, #5
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d104      	bne.n	8001924 <HAL_RCC_OscConfig+0x5ec>
 800191a:	4b01      	ldr	r3, [pc, #4]	; (8001920 <HAL_RCC_OscConfig+0x5e8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	e015      	b.n	800194c <HAL_RCC_OscConfig+0x614>
 8001920:	40021000 	.word	0x40021000
 8001924:	2302      	movs	r3, #2
 8001926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001936:	2302      	movs	r3, #2
 8001938:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800193c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001948:	4bc8      	ldr	r3, [pc, #800]	; (8001c6c <HAL_RCC_OscConfig+0x934>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	2202      	movs	r2, #2
 800194e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001952:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001956:	fa92 f2a2 	rbit	r2, r2
 800195a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800195e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001962:	fab2 f282 	clz	r2, r2
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	f042 0220 	orr.w	r2, r2, #32
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	f002 021f 	and.w	r2, r2, #31
 8001972:	2101      	movs	r1, #1
 8001974:	fa01 f202 	lsl.w	r2, r1, r2
 8001978:	4013      	ands	r3, r2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ad      	bne.n	80018da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8110 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001998:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d079      	beq.n	8001a98 <HAL_RCC_OscConfig+0x760>
 80019a4:	2301      	movs	r3, #1
 80019a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80019b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	4bab      	ldr	r3, [pc, #684]	; (8001c70 <HAL_RCC_OscConfig+0x938>)
 80019c4:	4413      	add	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	461a      	mov	r2, r3
 80019ca:	2301      	movs	r3, #1
 80019cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ce:	f7ff f9cf 	bl	8000d70 <HAL_GetTick>
 80019d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff f9ca 	bl	8000d70 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d902      	bls.n	80019ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	f000 bcdb 	b.w	80023a4 <HAL_RCC_OscConfig+0x106c>
 80019ee:	2302      	movs	r3, #2
 80019f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a08:	2202      	movs	r2, #2
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	fa93 f2a3 	rbit	r2, r3
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	fa93 f2a3 	rbit	r2, r3
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a48:	4b88      	ldr	r3, [pc, #544]	; (8001c6c <HAL_RCC_OscConfig+0x934>)
 8001a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a54:	2102      	movs	r1, #2
 8001a56:	6019      	str	r1, [r3, #0]
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f1a3 	rbit	r1, r3
 8001a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a6e:	6019      	str	r1, [r3, #0]
  return result;
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0a0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x6a0>
 8001a96:	e08d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x87c>
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001aba:	601a      	str	r2, [r3, #0]
  return result;
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ac4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b68      	ldr	r3, [pc, #416]	; (8001c70 <HAL_RCC_OscConfig+0x938>)
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ada:	f7ff f949 	bl	8000d70 <HAL_GetTick>
 8001ade:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff f944 	bl	8000d70 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d902      	bls.n	8001afa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	f000 bc55 	b.w	80023a4 <HAL_RCC_OscConfig+0x106c>
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b02:	2202      	movs	r2, #2
 8001b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	fa93 f2a3 	rbit	r2, r3
 8001b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b26:	2202      	movs	r2, #2
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fa93 f2a3 	rbit	r2, r3
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	fa93 f2a3 	rbit	r2, r3
 8001b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b66:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <HAL_RCC_OscConfig+0x934>)
 8001b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b72:	2102      	movs	r1, #2
 8001b74:	6019      	str	r1, [r3, #0]
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	fa93 f1a3 	rbit	r1, r3
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b8c:	6019      	str	r1, [r3, #0]
  return result;
 8001b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b92:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d197      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 81a1 	beq.w	8001f0c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd0:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_RCC_OscConfig+0x934>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d116      	bne.n	8001c0a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bdc:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_RCC_OscConfig+0x934>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <HAL_RCC_OscConfig+0x934>)
 8001be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be6:	61d3      	str	r3, [r2, #28]
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_RCC_OscConfig+0x934>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c02:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_RCC_OscConfig+0x93c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d11a      	bne.n	8001c4c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_RCC_OscConfig+0x93c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a16      	ldr	r2, [pc, #88]	; (8001c74 <HAL_RCC_OscConfig+0x93c>)
 8001c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c22:	f7ff f8a5 	bl	8000d70 <HAL_GetTick>
 8001c26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	e009      	b.n	8001c40 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2c:	f7ff f8a0 	bl	8000d70 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b64      	cmp	r3, #100	; 0x64
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e3b1      	b.n	80023a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <HAL_RCC_OscConfig+0x93c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0ef      	beq.n	8001c2c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d10d      	bne.n	8001c78 <HAL_RCC_OscConfig+0x940>
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_RCC_OscConfig+0x934>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a02      	ldr	r2, [pc, #8]	; (8001c6c <HAL_RCC_OscConfig+0x934>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6213      	str	r3, [r2, #32]
 8001c68:	e03c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x9ac>
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	10908120 	.word	0x10908120
 8001c74:	40007000 	.word	0x40007000
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10c      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x96a>
 8001c88:	4bc1      	ldr	r3, [pc, #772]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4ac0      	ldr	r2, [pc, #768]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	6213      	str	r3, [r2, #32]
 8001c94:	4bbe      	ldr	r3, [pc, #760]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4abd      	ldr	r2, [pc, #756]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001c9a:	f023 0304 	bic.w	r3, r3, #4
 8001c9e:	6213      	str	r3, [r2, #32]
 8001ca0:	e020      	b.n	8001ce4 <HAL_RCC_OscConfig+0x9ac>
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b05      	cmp	r3, #5
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x994>
 8001cb2:	4bb7      	ldr	r3, [pc, #732]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4ab6      	ldr	r2, [pc, #728]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	6213      	str	r3, [r2, #32]
 8001cbe:	4bb4      	ldr	r3, [pc, #720]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4ab3      	ldr	r2, [pc, #716]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x9ac>
 8001ccc:	4bb0      	ldr	r3, [pc, #704]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4aaf      	ldr	r2, [pc, #700]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001cd2:	f023 0301 	bic.w	r3, r3, #1
 8001cd6:	6213      	str	r3, [r2, #32]
 8001cd8:	4bad      	ldr	r3, [pc, #692]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4aac      	ldr	r2, [pc, #688]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001cde:	f023 0304 	bic.w	r3, r3, #4
 8001ce2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8081 	beq.w	8001df8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff f83b 	bl	8000d70 <HAL_GetTick>
 8001cfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7ff f836 	bl	8000d70 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e345      	b.n	80023a4 <HAL_RCC_OscConfig+0x106c>
 8001d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d20:	2202      	movs	r2, #2
 8001d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d28:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	fa93 f2a3 	rbit	r2, r3
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d44:	2202      	movs	r2, #2
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	fa93 f2a3 	rbit	r2, r3
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d5e:	601a      	str	r2, [r3, #0]
  return result;
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d102      	bne.n	8001d84 <HAL_RCC_OscConfig+0xa4c>
 8001d7e:	4b84      	ldr	r3, [pc, #528]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	e013      	b.n	8001dac <HAL_RCC_OscConfig+0xa74>
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	fa93 f2a3 	rbit	r2, r3
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	4b79      	ldr	r3, [pc, #484]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001db4:	2102      	movs	r1, #2
 8001db6:	6011      	str	r1, [r2, #0]
 8001db8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dbc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	fa92 f1a2 	rbit	r1, r2
 8001dc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dce:	6011      	str	r1, [r2, #0]
  return result;
 8001dd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	fab2 f282 	clz	r2, r2
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f002 021f 	and.w	r2, r2, #31
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f202 	lsl.w	r2, r1, r2
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d084      	beq.n	8001d00 <HAL_RCC_OscConfig+0x9c8>
 8001df6:	e07f      	b.n	8001ef8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7fe ffba 	bl	8000d70 <HAL_GetTick>
 8001dfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	e00b      	b.n	8001e1a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7fe ffb5 	bl	8000d70 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e2c4      	b.n	80023a4 <HAL_RCC_OscConfig+0x106c>
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e22:	2202      	movs	r2, #2
 8001e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fa93 f2a3 	rbit	r2, r3
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e42:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e46:	2202      	movs	r2, #2
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	fa93 f2a3 	rbit	r2, r3
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e60:	601a      	str	r2, [r3, #0]
  return result;
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f043 0302 	orr.w	r3, r3, #2
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_OscConfig+0xb4e>
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	e013      	b.n	8001eae <HAL_RCC_OscConfig+0xb76>
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e8e:	2202      	movs	r2, #2
 8001e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	fa93 f2a3 	rbit	r2, r3
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eb2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	6011      	str	r1, [r2, #0]
 8001eba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ebe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	fa92 f1a2 	rbit	r1, r2
 8001ec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ecc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ed0:	6011      	str	r1, [r2, #0]
  return result;
 8001ed2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ed6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	fab2 f282 	clz	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f002 021f 	and.w	r2, r2, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d184      	bne.n	8001e02 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ef8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8242 	beq.w	80023a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_RCC_OscConfig+0xc58>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	f000 8213 	beq.w	8002352 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	f040 8162 	bne.w	8002202 <HAL_RCC_OscConfig+0xeca>
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	fa93 f2a3 	rbit	r2, r3
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f62:	601a      	str	r2, [r3, #0]
  return result;
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f6c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2300      	movs	r3, #0
 8001f82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7fe fef4 	bl	8000d70 <HAL_GetTick>
 8001f88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8c:	e00c      	b.n	8001fa8 <HAL_RCC_OscConfig+0xc70>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe feec 	bl	8000d70 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1fd      	b.n	80023a4 <HAL_RCC_OscConfig+0x106c>
 8001fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	fa93 f2a3 	rbit	r2, r3
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fcc:	601a      	str	r2, [r3, #0]
  return result;
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d102      	bne.n	8001ff2 <HAL_RCC_OscConfig+0xcba>
 8001fec:	4bb0      	ldr	r3, [pc, #704]	; (80022b0 <HAL_RCC_OscConfig+0xf78>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	e027      	b.n	8002042 <HAL_RCC_OscConfig+0xd0a>
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ffa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002004:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	fa93 f2a3 	rbit	r2, r3
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	4b9c      	ldr	r3, [pc, #624]	; (80022b0 <HAL_RCC_OscConfig+0xf78>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002046:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800204a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800204e:	6011      	str	r1, [r2, #0]
 8002050:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002054:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	fa92 f1a2 	rbit	r1, r2
 800205e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002062:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002066:	6011      	str	r1, [r2, #0]
  return result;
 8002068:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800206c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	fab2 f282 	clz	r2, r2
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f042 0220 	orr.w	r2, r2, #32
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	f002 021f 	and.w	r2, r2, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d182      	bne.n	8001f94 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208e:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0xf78>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	430b      	orrs	r3, r1
 80020b0:	497f      	ldr	r1, [pc, #508]	; (80022b0 <HAL_RCC_OscConfig+0xf78>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
 80020b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f2a3 	rbit	r2, r3
 80020d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020da:	601a      	str	r2, [r3, #0]
  return result;
 80020dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	461a      	mov	r2, r3
 80020f8:	2301      	movs	r3, #1
 80020fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7fe fe38 	bl	8000d70 <HAL_GetTick>
 8002100:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002104:	e009      	b.n	800211a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002106:	f7fe fe33 	bl	8000d70 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e144      	b.n	80023a4 <HAL_RCC_OscConfig+0x106c>
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002122:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002126:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	fa93 f2a3 	rbit	r2, r3
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800213e:	601a      	str	r2, [r3, #0]
  return result;
 8002140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002144:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002148:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0xe2c>
 800215e:	4b54      	ldr	r3, [pc, #336]	; (80022b0 <HAL_RCC_OscConfig+0xf78>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	e027      	b.n	80021b4 <HAL_RCC_OscConfig+0xe7c>
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800216c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002192:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	fa93 f2a3 	rbit	r2, r3
 80021a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <HAL_RCC_OscConfig+0xf78>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021c0:	6011      	str	r1, [r2, #0]
 80021c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021c6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	fa92 f1a2 	rbit	r1, r2
 80021d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021d8:	6011      	str	r1, [r2, #0]
  return result;
 80021da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	f042 0220 	orr.w	r2, r2, #32
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	f002 021f 	and.w	r2, r2, #31
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f202 	lsl.w	r2, r1, r2
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d082      	beq.n	8002106 <HAL_RCC_OscConfig+0xdce>
 8002200:	e0cf      	b.n	80023a2 <HAL_RCC_OscConfig+0x106a>
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800220a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800220e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002214:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002222:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002226:	601a      	str	r2, [r3, #0]
  return result;
 8002228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002230:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800223c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	461a      	mov	r2, r3
 8002244:	2300      	movs	r3, #0
 8002246:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7fe fd92 	bl	8000d70 <HAL_GetTick>
 800224c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002250:	e009      	b.n	8002266 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002252:	f7fe fd8d 	bl	8000d70 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e09e      	b.n	80023a4 <HAL_RCC_OscConfig+0x106c>
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800226e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002272:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002278:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	fa93 f2a3 	rbit	r2, r3
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800228a:	601a      	str	r2, [r3, #0]
  return result;
 800228c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002290:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002294:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d104      	bne.n	80022b4 <HAL_RCC_OscConfig+0xf7c>
 80022aa:	4b01      	ldr	r3, [pc, #4]	; (80022b0 <HAL_RCC_OscConfig+0xf78>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	e029      	b.n	8002304 <HAL_RCC_OscConfig+0xfcc>
 80022b0:	40021000 	.word	0x40021000
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	fa93 f2a3 	rbit	r2, r3
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_RCC_OscConfig+0x1078>)
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002308:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800230c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002310:	6011      	str	r1, [r2, #0]
 8002312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002316:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	fa92 f1a2 	rbit	r1, r2
 8002320:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002324:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002328:	6011      	str	r1, [r2, #0]
  return result;
 800232a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800232e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	fab2 f282 	clz	r2, r2
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f042 0220 	orr.w	r2, r2, #32
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	f002 021f 	and.w	r2, r2, #31
 8002344:	2101      	movs	r1, #1
 8002346:	fa01 f202 	lsl.w	r2, r1, r2
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d180      	bne.n	8002252 <HAL_RCC_OscConfig+0xf1a>
 8002350:	e027      	b.n	80023a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e01e      	b.n	80023a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_RCC_OscConfig+0x1078>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800236e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002372:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	429a      	cmp	r2, r3
 8002384:	d10b      	bne.n	800239e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002386:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800238a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b09e      	sub	sp, #120	; 0x78
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e162      	b.n	8002692 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023cc:	4b90      	ldr	r3, [pc, #576]	; (8002610 <HAL_RCC_ClockConfig+0x25c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d910      	bls.n	80023fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b8d      	ldr	r3, [pc, #564]	; (8002610 <HAL_RCC_ClockConfig+0x25c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0207 	bic.w	r2, r3, #7
 80023e2:	498b      	ldr	r1, [pc, #556]	; (8002610 <HAL_RCC_ClockConfig+0x25c>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b89      	ldr	r3, [pc, #548]	; (8002610 <HAL_RCC_ClockConfig+0x25c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e14a      	b.n	8002692 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b82      	ldr	r3, [pc, #520]	; (8002614 <HAL_RCC_ClockConfig+0x260>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	497f      	ldr	r1, [pc, #508]	; (8002614 <HAL_RCC_ClockConfig+0x260>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80dc 	beq.w	80025e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d13c      	bne.n	80024aa <HAL_RCC_ClockConfig+0xf6>
 8002430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002434:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800243e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d102      	bne.n	800245a <HAL_RCC_ClockConfig+0xa6>
 8002454:	4b6f      	ldr	r3, [pc, #444]	; (8002614 <HAL_RCC_ClockConfig+0x260>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	e00f      	b.n	800247a <HAL_RCC_ClockConfig+0xc6>
 800245a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	667b      	str	r3, [r7, #100]	; 0x64
 8002468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800246c:	663b      	str	r3, [r7, #96]	; 0x60
 800246e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002476:	4b67      	ldr	r3, [pc, #412]	; (8002614 <HAL_RCC_ClockConfig+0x260>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800247e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002482:	fa92 f2a2 	rbit	r2, r2
 8002486:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002488:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800248a:	fab2 f282 	clz	r2, r2
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f042 0220 	orr.w	r2, r2, #32
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f002 021f 	and.w	r2, r2, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d17b      	bne.n	800259e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0f3      	b.n	8002692 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d13c      	bne.n	800252c <HAL_RCC_ClockConfig+0x178>
 80024b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d102      	bne.n	80024dc <HAL_RCC_ClockConfig+0x128>
 80024d6:	4b4f      	ldr	r3, [pc, #316]	; (8002614 <HAL_RCC_ClockConfig+0x260>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	e00f      	b.n	80024fc <HAL_RCC_ClockConfig+0x148>
 80024dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	647b      	str	r3, [r7, #68]	; 0x44
 80024ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ee:	643b      	str	r3, [r7, #64]	; 0x40
 80024f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f8:	4b46      	ldr	r3, [pc, #280]	; (8002614 <HAL_RCC_ClockConfig+0x260>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002500:	63ba      	str	r2, [r7, #56]	; 0x38
 8002502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002504:	fa92 f2a2 	rbit	r2, r2
 8002508:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800250a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f042 0220 	orr.w	r2, r2, #32
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f002 021f 	and.w	r2, r2, #31
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d13a      	bne.n	800259e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b2      	b.n	8002692 <HAL_RCC_ClockConfig+0x2de>
 800252c:	2302      	movs	r3, #2
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d102      	bne.n	8002554 <HAL_RCC_ClockConfig+0x1a0>
 800254e:	4b31      	ldr	r3, [pc, #196]	; (8002614 <HAL_RCC_ClockConfig+0x260>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	e00d      	b.n	8002570 <HAL_RCC_ClockConfig+0x1bc>
 8002554:	2302      	movs	r3, #2
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
 8002560:	2302      	movs	r3, #2
 8002562:	623b      	str	r3, [r7, #32]
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	4b29      	ldr	r3, [pc, #164]	; (8002614 <HAL_RCC_ClockConfig+0x260>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	2202      	movs	r2, #2
 8002572:	61ba      	str	r2, [r7, #24]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	fa92 f2a2 	rbit	r2, r2
 800257a:	617a      	str	r2, [r7, #20]
  return result;
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	fab2 f282 	clz	r2, r2
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	f042 0220 	orr.w	r2, r2, #32
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	f002 021f 	and.w	r2, r2, #31
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e079      	b.n	8002692 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <HAL_RCC_ClockConfig+0x260>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f023 0203 	bic.w	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	491a      	ldr	r1, [pc, #104]	; (8002614 <HAL_RCC_ClockConfig+0x260>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b0:	f7fe fbde 	bl	8000d70 <HAL_GetTick>
 80025b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b8:	f7fe fbda 	bl	8000d70 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e061      	b.n	8002692 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_RCC_ClockConfig+0x260>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 020c 	and.w	r2, r3, #12
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	429a      	cmp	r2, r3
 80025de:	d1eb      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_ClockConfig+0x25c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d214      	bcs.n	8002618 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_RCC_ClockConfig+0x25c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 0207 	bic.w	r2, r3, #7
 80025f6:	4906      	ldr	r1, [pc, #24]	; (8002610 <HAL_RCC_ClockConfig+0x25c>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b04      	ldr	r3, [pc, #16]	; (8002610 <HAL_RCC_ClockConfig+0x25c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e040      	b.n	8002692 <HAL_RCC_ClockConfig+0x2de>
 8002610:	40022000 	.word	0x40022000
 8002614:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002624:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_RCC_ClockConfig+0x2e8>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	491a      	ldr	r1, [pc, #104]	; (800269c <HAL_RCC_ClockConfig+0x2e8>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_RCC_ClockConfig+0x2e8>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4912      	ldr	r1, [pc, #72]	; (800269c <HAL_RCC_ClockConfig+0x2e8>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002656:	f000 f85d 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 800265a:	4601      	mov	r1, r0
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_RCC_ClockConfig+0x2e8>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002664:	22f0      	movs	r2, #240	; 0xf0
 8002666:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	fa92 f2a2 	rbit	r2, r2
 800266e:	60fa      	str	r2, [r7, #12]
  return result;
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	fab2 f282 	clz	r2, r2
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	40d3      	lsrs	r3, r2
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_RCC_ClockConfig+0x2ec>)
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	fa21 f303 	lsr.w	r3, r1, r3
 8002682:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <HAL_RCC_ClockConfig+0x2f0>)
 8002684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_RCC_ClockConfig+0x2f4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fb2c 	bl	8000ce8 <HAL_InitTick>
  
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3778      	adds	r7, #120	; 0x78
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	08005750 	.word	0x08005750
 80026a4:	20000000 	.word	0x20000000
 80026a8:	20000004 	.word	0x20000004

080026ac <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80026bc:	2303      	movs	r3, #3
 80026be:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 80026c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c8:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <HAL_RCC_MCOConfig+0x64>)
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	4a0f      	ldr	r2, [pc, #60]	; (8002710 <HAL_RCC_MCOConfig+0x64>)
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	6153      	str	r3, [r2, #20]
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <HAL_RCC_MCOConfig+0x64>)
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f0:	f7fe fc80 	bl	8000ff4 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_MCOConfig+0x64>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	430b      	orrs	r3, r1
 8002702:	4903      	ldr	r1, [pc, #12]	; (8002710 <HAL_RCC_MCOConfig+0x64>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
}
 8002708:	bf00      	nop
 800270a:	3728      	adds	r7, #40	; 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000

08002714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b08b      	sub	sp, #44	; 0x2c
 8002718:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d002      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x30>
 800273e:	2b08      	cmp	r3, #8
 8002740:	d003      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x36>
 8002742:	e03c      	b.n	80027be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002744:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002746:	623b      	str	r3, [r7, #32]
      break;
 8002748:	e03c      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002750:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002754:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	fa92 f2a2 	rbit	r2, r2
 800275c:	607a      	str	r2, [r7, #4]
  return result;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	fab2 f282 	clz	r2, r2
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	40d3      	lsrs	r3, r2
 8002768:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800276a:	5cd3      	ldrb	r3, [r2, r3]
 800276c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800276e:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	220f      	movs	r2, #15
 8002778:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	fa92 f2a2 	rbit	r2, r2
 8002780:	60fa      	str	r2, [r7, #12]
  return result;
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	fab2 f282 	clz	r2, r2
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	40d3      	lsrs	r3, r2
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
 80027ac:	e004      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	623b      	str	r3, [r7, #32]
      break;
 80027bc:	e002      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027c0:	623b      	str	r3, [r7, #32]
      break;
 80027c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c4:	6a3b      	ldr	r3, [r7, #32]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	372c      	adds	r7, #44	; 0x2c
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	007a1200 	.word	0x007a1200
 80027dc:	08005768 	.word	0x08005768
 80027e0:	08005778 	.word	0x08005778
 80027e4:	003d0900 	.word	0x003d0900

080027e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000000 	.word	0x20000000

08002800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002806:	f7ff ffef 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 800280a:	4601      	mov	r1, r0
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002814:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002818:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	fa92 f2a2 	rbit	r2, r2
 8002820:	603a      	str	r2, [r7, #0]
  return result;
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	fab2 f282 	clz	r2, r2
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	40d3      	lsrs	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x40>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000
 8002840:	08005760 	.word	0x08005760

08002844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800284a:	f7ff ffcd 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 800284e:	4601      	mov	r1, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002858:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800285c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	fa92 f2a2 	rbit	r2, r2
 8002864:	603a      	str	r2, [r7, #0]
  return result;
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	fab2 f282 	clz	r2, r2
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	40d3      	lsrs	r3, r2
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	08005760 	.word	0x08005760

08002888 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b092      	sub	sp, #72	; 0x48
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80d4 	beq.w	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ac:	4b4e      	ldr	r3, [pc, #312]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10e      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b8:	4b4b      	ldr	r3, [pc, #300]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	4a4a      	ldr	r2, [pc, #296]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c2:	61d3      	str	r3, [r2, #28]
 80028c4:	4b48      	ldr	r3, [pc, #288]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b45      	ldr	r3, [pc, #276]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d118      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b42      	ldr	r3, [pc, #264]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a41      	ldr	r2, [pc, #260]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7fe fa3f 	bl	8000d70 <HAL_GetTick>
 80028f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fe fa3b 	bl	8000d70 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	; 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e13c      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b38      	ldr	r3, [pc, #224]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002914:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8084 	beq.w	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002930:	429a      	cmp	r2, r3
 8002932:	d07c      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002934:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800293e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	461a      	mov	r2, r3
 800295e:	2301      	movs	r3, #1
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002966:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	461a      	mov	r2, r3
 8002982:	2300      	movs	r3, #0
 8002984:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002986:	4a18      	ldr	r2, [pc, #96]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800298c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d04b      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe f9eb 	bl	8000d70 <HAL_GetTick>
 800299a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299c:	e00a      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe f9e7 	bl	8000d70 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e0e6      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80029b4:	2302      	movs	r3, #2
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
 80029c0:	2302      	movs	r3, #2
 80029c2:	623b      	str	r3, [r7, #32]
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	61fb      	str	r3, [r7, #28]
  return result;
 80029cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d108      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029e2:	4b01      	ldr	r3, [pc, #4]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	e00d      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40007000 	.word	0x40007000
 80029f0:	10908100 	.word	0x10908100
 80029f4:	2302      	movs	r3, #2
 80029f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	4b62      	ldr	r3, [pc, #392]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2202      	movs	r2, #2
 8002a06:	613a      	str	r2, [r7, #16]
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	fa92 f2a2 	rbit	r2, r2
 8002a0e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	fab2 f282 	clz	r2, r2
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f002 021f 	and.w	r2, r2, #31
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0b7      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a2e:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4954      	ldr	r1, [pc, #336]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	4a4f      	ldr	r2, [pc, #316]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a60:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f023 0203 	bic.w	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4947      	ldr	r1, [pc, #284]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a7e:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f023 0210 	bic.w	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	4940      	ldr	r1, [pc, #256]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a9c:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	f023 0220 	bic.w	r2, r3, #32
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	4938      	ldr	r1, [pc, #224]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aba:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	4931      	ldr	r1, [pc, #196]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ad8:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4929      	ldr	r1, [pc, #164]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002af6:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	4922      	ldr	r1, [pc, #136]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	491a      	ldr	r1, [pc, #104]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b32:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	4913      	ldr	r1, [pc, #76]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	490b      	ldr	r1, [pc, #44]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	4904      	ldr	r1, [pc, #16]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3748      	adds	r7, #72	; 0x48
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e049      	b.n	8002c36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd ff04 	bl	80009c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f000 ff5e 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d001      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e03b      	b.n	8002cd0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <HAL_TIM_Base_Start_IT+0x9c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_TIM_Base_Start_IT+0x4e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c82:	d004      	beq.n	8002c8e <HAL_TIM_Base_Start_IT+0x4e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d115      	bne.n	8002cba <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <HAL_TIM_Base_Start_IT+0xa4>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b06      	cmp	r3, #6
 8002c9e:	d015      	beq.n	8002ccc <HAL_TIM_Base_Start_IT+0x8c>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca6:	d011      	beq.n	8002ccc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb8:	e008      	b.n	8002ccc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e000      	b.n	8002cce <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ccc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	40012c00 	.word	0x40012c00
 8002ce0:	40014000 	.word	0x40014000
 8002ce4:	00010007 	.word	0x00010007

08002ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e049      	b.n	8002d8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f841 	bl	8002d96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f000 feb2 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d109      	bne.n	8002dd0 <HAL_TIM_PWM_Start+0x24>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	bf14      	ite	ne
 8002dc8:	2301      	movne	r3, #1
 8002dca:	2300      	moveq	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	e03c      	b.n	8002e4a <HAL_TIM_PWM_Start+0x9e>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d109      	bne.n	8002dea <HAL_TIM_PWM_Start+0x3e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	bf14      	ite	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	2300      	moveq	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	e02f      	b.n	8002e4a <HAL_TIM_PWM_Start+0x9e>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d109      	bne.n	8002e04 <HAL_TIM_PWM_Start+0x58>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	bf14      	ite	ne
 8002dfc:	2301      	movne	r3, #1
 8002dfe:	2300      	moveq	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	e022      	b.n	8002e4a <HAL_TIM_PWM_Start+0x9e>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d109      	bne.n	8002e1e <HAL_TIM_PWM_Start+0x72>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	bf14      	ite	ne
 8002e16:	2301      	movne	r3, #1
 8002e18:	2300      	moveq	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	e015      	b.n	8002e4a <HAL_TIM_PWM_Start+0x9e>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	d109      	bne.n	8002e38 <HAL_TIM_PWM_Start+0x8c>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e008      	b.n	8002e4a <HAL_TIM_PWM_Start+0x9e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	bf14      	ite	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	2300      	moveq	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e083      	b.n	8002f5a <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <HAL_TIM_PWM_Start+0xb6>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e60:	e023      	b.n	8002eaa <HAL_TIM_PWM_Start+0xfe>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d104      	bne.n	8002e72 <HAL_TIM_PWM_Start+0xc6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e70:	e01b      	b.n	8002eaa <HAL_TIM_PWM_Start+0xfe>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d104      	bne.n	8002e82 <HAL_TIM_PWM_Start+0xd6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e80:	e013      	b.n	8002eaa <HAL_TIM_PWM_Start+0xfe>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d104      	bne.n	8002e92 <HAL_TIM_PWM_Start+0xe6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e90:	e00b      	b.n	8002eaa <HAL_TIM_PWM_Start+0xfe>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d104      	bne.n	8002ea2 <HAL_TIM_PWM_Start+0xf6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ea0:	e003      	b.n	8002eaa <HAL_TIM_PWM_Start+0xfe>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	6839      	ldr	r1, [r7, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 faa6 	bl	8004404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a29      	ldr	r2, [pc, #164]	; (8002f64 <HAL_TIM_PWM_Start+0x1b8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00e      	beq.n	8002ee0 <HAL_TIM_PWM_Start+0x134>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a28      	ldr	r2, [pc, #160]	; (8002f68 <HAL_TIM_PWM_Start+0x1bc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d009      	beq.n	8002ee0 <HAL_TIM_PWM_Start+0x134>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <HAL_TIM_PWM_Start+0x1c0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_TIM_PWM_Start+0x134>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <HAL_TIM_PWM_Start+0x1c4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d101      	bne.n	8002ee4 <HAL_TIM_PWM_Start+0x138>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <HAL_TIM_PWM_Start+0x13a>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <HAL_TIM_PWM_Start+0x1b8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_TIM_PWM_Start+0x16c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d004      	beq.n	8002f18 <HAL_TIM_PWM_Start+0x16c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <HAL_TIM_PWM_Start+0x1bc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d115      	bne.n	8002f44 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <HAL_TIM_PWM_Start+0x1c8>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d015      	beq.n	8002f56 <HAL_TIM_PWM_Start+0x1aa>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f30:	d011      	beq.n	8002f56 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f42:	e008      	b.n	8002f56 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e000      	b.n	8002f58 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	40014400 	.word	0x40014400
 8002f70:	40014800 	.word	0x40014800
 8002f74:	00010007 	.word	0x00010007

08002f78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e049      	b.n	800301e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f841 	bl	8003026 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	f000 fd6a 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <HAL_TIM_IC_Start_IT+0x1e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003056:	b2db      	uxtb	r3, r3
 8003058:	e023      	b.n	80030a2 <HAL_TIM_IC_Start_IT+0x66>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b04      	cmp	r3, #4
 800305e:	d104      	bne.n	800306a <HAL_TIM_IC_Start_IT+0x2e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003066:	b2db      	uxtb	r3, r3
 8003068:	e01b      	b.n	80030a2 <HAL_TIM_IC_Start_IT+0x66>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d104      	bne.n	800307a <HAL_TIM_IC_Start_IT+0x3e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003076:	b2db      	uxtb	r3, r3
 8003078:	e013      	b.n	80030a2 <HAL_TIM_IC_Start_IT+0x66>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b0c      	cmp	r3, #12
 800307e:	d104      	bne.n	800308a <HAL_TIM_IC_Start_IT+0x4e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003086:	b2db      	uxtb	r3, r3
 8003088:	e00b      	b.n	80030a2 <HAL_TIM_IC_Start_IT+0x66>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b10      	cmp	r3, #16
 800308e:	d104      	bne.n	800309a <HAL_TIM_IC_Start_IT+0x5e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003096:	b2db      	uxtb	r3, r3
 8003098:	e003      	b.n	80030a2 <HAL_TIM_IC_Start_IT+0x66>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d104      	bne.n	80030b4 <HAL_TIM_IC_Start_IT+0x78>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e013      	b.n	80030dc <HAL_TIM_IC_Start_IT+0xa0>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d104      	bne.n	80030c4 <HAL_TIM_IC_Start_IT+0x88>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e00b      	b.n	80030dc <HAL_TIM_IC_Start_IT+0xa0>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d104      	bne.n	80030d4 <HAL_TIM_IC_Start_IT+0x98>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e003      	b.n	80030dc <HAL_TIM_IC_Start_IT+0xa0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80030de:	7bbb      	ldrb	r3, [r7, #14]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d102      	bne.n	80030ea <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80030e4:	7b7b      	ldrb	r3, [r7, #13]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d001      	beq.n	80030ee <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0c9      	b.n	8003282 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d104      	bne.n	80030fe <HAL_TIM_IC_Start_IT+0xc2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030fc:	e023      	b.n	8003146 <HAL_TIM_IC_Start_IT+0x10a>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b04      	cmp	r3, #4
 8003102:	d104      	bne.n	800310e <HAL_TIM_IC_Start_IT+0xd2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800310c:	e01b      	b.n	8003146 <HAL_TIM_IC_Start_IT+0x10a>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b08      	cmp	r3, #8
 8003112:	d104      	bne.n	800311e <HAL_TIM_IC_Start_IT+0xe2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800311c:	e013      	b.n	8003146 <HAL_TIM_IC_Start_IT+0x10a>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d104      	bne.n	800312e <HAL_TIM_IC_Start_IT+0xf2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800312c:	e00b      	b.n	8003146 <HAL_TIM_IC_Start_IT+0x10a>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b10      	cmp	r3, #16
 8003132:	d104      	bne.n	800313e <HAL_TIM_IC_Start_IT+0x102>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800313c:	e003      	b.n	8003146 <HAL_TIM_IC_Start_IT+0x10a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d104      	bne.n	8003156 <HAL_TIM_IC_Start_IT+0x11a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003154:	e013      	b.n	800317e <HAL_TIM_IC_Start_IT+0x142>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d104      	bne.n	8003166 <HAL_TIM_IC_Start_IT+0x12a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003164:	e00b      	b.n	800317e <HAL_TIM_IC_Start_IT+0x142>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b08      	cmp	r3, #8
 800316a:	d104      	bne.n	8003176 <HAL_TIM_IC_Start_IT+0x13a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003174:	e003      	b.n	800317e <HAL_TIM_IC_Start_IT+0x142>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2202      	movs	r2, #2
 800317a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b0c      	cmp	r3, #12
 8003182:	d841      	bhi.n	8003208 <HAL_TIM_IC_Start_IT+0x1cc>
 8003184:	a201      	add	r2, pc, #4	; (adr r2, 800318c <HAL_TIM_IC_Start_IT+0x150>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	080031c1 	.word	0x080031c1
 8003190:	08003209 	.word	0x08003209
 8003194:	08003209 	.word	0x08003209
 8003198:	08003209 	.word	0x08003209
 800319c:	080031d3 	.word	0x080031d3
 80031a0:	08003209 	.word	0x08003209
 80031a4:	08003209 	.word	0x08003209
 80031a8:	08003209 	.word	0x08003209
 80031ac:	080031e5 	.word	0x080031e5
 80031b0:	08003209 	.word	0x08003209
 80031b4:	08003209 	.word	0x08003209
 80031b8:	08003209 	.word	0x08003209
 80031bc:	080031f7 	.word	0x080031f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0202 	orr.w	r2, r2, #2
 80031ce:	60da      	str	r2, [r3, #12]
      break;
 80031d0:	e01d      	b.n	800320e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0204 	orr.w	r2, r2, #4
 80031e0:	60da      	str	r2, [r3, #12]
      break;
 80031e2:	e014      	b.n	800320e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0208 	orr.w	r2, r2, #8
 80031f2:	60da      	str	r2, [r3, #12]
      break;
 80031f4:	e00b      	b.n	800320e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0210 	orr.w	r2, r2, #16
 8003204:	60da      	str	r2, [r3, #12]
      break;
 8003206:	e002      	b.n	800320e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
      break;
 800320c:	bf00      	nop
  }

  if (status == HAL_OK)
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d135      	bne.n	8003280 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	6839      	ldr	r1, [r7, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f001 f8f1 	bl	8004404 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a19      	ldr	r2, [pc, #100]	; (800328c <HAL_TIM_IC_Start_IT+0x250>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d009      	beq.n	8003240 <HAL_TIM_IC_Start_IT+0x204>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d004      	beq.n	8003240 <HAL_TIM_IC_Start_IT+0x204>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a15      	ldr	r2, [pc, #84]	; (8003290 <HAL_TIM_IC_Start_IT+0x254>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d115      	bne.n	800326c <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <HAL_TIM_IC_Start_IT+0x258>)
 8003248:	4013      	ands	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b06      	cmp	r3, #6
 8003250:	d015      	beq.n	800327e <HAL_TIM_IC_Start_IT+0x242>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d011      	beq.n	800327e <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326a:	e008      	b.n	800327e <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e000      	b.n	8003280 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40014000 	.word	0x40014000
 8003294:	00010007 	.word	0x00010007

08003298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d122      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d11b      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0202 	mvn.w	r2, #2
 80032c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd fa00 	bl	80006e0 <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fbb6 	bl	8003a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fbbd 	bl	8003a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d122      	bne.n	8003348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b04      	cmp	r3, #4
 800330e:	d11b      	bne.n	8003348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0204 	mvn.w	r2, #4
 8003318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd f9d6 	bl	80006e0 <HAL_TIM_IC_CaptureCallback>
 8003334:	e005      	b.n	8003342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fb8c 	bl	8003a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fb93 	bl	8003a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b08      	cmp	r3, #8
 8003354:	d122      	bne.n	800339c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b08      	cmp	r3, #8
 8003362:	d11b      	bne.n	800339c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0208 	mvn.w	r2, #8
 800336c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2204      	movs	r2, #4
 8003372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fd f9ac 	bl	80006e0 <HAL_TIM_IC_CaptureCallback>
 8003388:	e005      	b.n	8003396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fb62 	bl	8003a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fb69 	bl	8003a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d122      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d11b      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0210 	mvn.w	r2, #16
 80033c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2208      	movs	r2, #8
 80033c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd f982 	bl	80006e0 <HAL_TIM_IC_CaptureCallback>
 80033dc:	e005      	b.n	80033ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fb38 	bl	8003a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fb3f 	bl	8003a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d10e      	bne.n	800341c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d107      	bne.n	800341c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0201 	mvn.w	r2, #1
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd f9d8 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b80      	cmp	r3, #128	; 0x80
 8003428:	d10e      	bne.n	8003448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b80      	cmp	r3, #128	; 0x80
 8003436:	d107      	bne.n	8003448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f001 f8ec 	bl	8004620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003456:	d10e      	bne.n	8003476 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b80      	cmp	r3, #128	; 0x80
 8003464:	d107      	bne.n	8003476 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800346e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f001 f8df 	bl	8004634 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003480:	2b40      	cmp	r3, #64	; 0x40
 8003482:	d10e      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d107      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800349a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 faed 	bl	8003a7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d10e      	bne.n	80034ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d107      	bne.n	80034ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f06f 0220 	mvn.w	r2, #32
 80034c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f001 f89f 	bl	800460c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e088      	b.n	8003606 <HAL_TIM_IC_ConfigChannel+0x130>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11b      	bne.n	800353a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f000 fdd1 	bl	80040b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 020c 	bic.w	r2, r2, #12
 8003524:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6999      	ldr	r1, [r3, #24]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	619a      	str	r2, [r3, #24]
 8003538:	e060      	b.n	80035fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b04      	cmp	r3, #4
 800353e:	d11c      	bne.n	800357a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	6819      	ldr	r1, [r3, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f000 fe37 	bl	80041c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003562:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6999      	ldr	r1, [r3, #24]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	021a      	lsls	r2, r3, #8
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	619a      	str	r2, [r3, #24]
 8003578:	e040      	b.n	80035fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	6819      	ldr	r1, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f000 fe84 	bl	800429c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 020c 	bic.w	r2, r2, #12
 80035a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69d9      	ldr	r1, [r3, #28]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	61da      	str	r2, [r3, #28]
 80035b6:	e021      	b.n	80035fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d11c      	bne.n	80035f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f000 fea1 	bl	8004314 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69d9      	ldr	r1, [r3, #28]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	021a      	lsls	r2, r3, #8
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	61da      	str	r2, [r3, #28]
 80035f6:	e001      	b.n	80035fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003604:	7dfb      	ldrb	r3, [r7, #23]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800362a:	2302      	movs	r3, #2
 800362c:	e0ff      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b14      	cmp	r3, #20
 800363a:	f200 80f0 	bhi.w	800381e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800363e:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	08003699 	.word	0x08003699
 8003648:	0800381f 	.word	0x0800381f
 800364c:	0800381f 	.word	0x0800381f
 8003650:	0800381f 	.word	0x0800381f
 8003654:	080036d9 	.word	0x080036d9
 8003658:	0800381f 	.word	0x0800381f
 800365c:	0800381f 	.word	0x0800381f
 8003660:	0800381f 	.word	0x0800381f
 8003664:	0800371b 	.word	0x0800371b
 8003668:	0800381f 	.word	0x0800381f
 800366c:	0800381f 	.word	0x0800381f
 8003670:	0800381f 	.word	0x0800381f
 8003674:	0800375b 	.word	0x0800375b
 8003678:	0800381f 	.word	0x0800381f
 800367c:	0800381f 	.word	0x0800381f
 8003680:	0800381f 	.word	0x0800381f
 8003684:	0800379d 	.word	0x0800379d
 8003688:	0800381f 	.word	0x0800381f
 800368c:	0800381f 	.word	0x0800381f
 8003690:	0800381f 	.word	0x0800381f
 8003694:	080037dd 	.word	0x080037dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fa64 	bl	8003b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0208 	orr.w	r2, r2, #8
 80036b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0204 	bic.w	r2, r2, #4
 80036c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6999      	ldr	r1, [r3, #24]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	619a      	str	r2, [r3, #24]
      break;
 80036d6:	e0a5      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 faca 	bl	8003c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6999      	ldr	r1, [r3, #24]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	021a      	lsls	r2, r3, #8
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	619a      	str	r2, [r3, #24]
      break;
 8003718:	e084      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fb29 	bl	8003d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0208 	orr.w	r2, r2, #8
 8003734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69da      	ldr	r2, [r3, #28]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0204 	bic.w	r2, r2, #4
 8003744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69d9      	ldr	r1, [r3, #28]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	61da      	str	r2, [r3, #28]
      break;
 8003758:	e064      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fb87 	bl	8003e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69d9      	ldr	r1, [r3, #28]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	021a      	lsls	r2, r3, #8
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	61da      	str	r2, [r3, #28]
      break;
 800379a:	e043      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fbca 	bl	8003f3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0208 	orr.w	r2, r2, #8
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0204 	bic.w	r2, r2, #4
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037da:	e023      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fc08 	bl	8003ff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003806:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	021a      	lsls	r2, r3, #8
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800381c:	e002      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	75fb      	strb	r3, [r7, #23]
      break;
 8003822:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800382c:	7dfb      	ldrb	r3, [r7, #23]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop

08003838 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_TIM_ConfigClockSource+0x1c>
 8003850:	2302      	movs	r3, #2
 8003852:	e0b6      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x18a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800387e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003890:	d03e      	beq.n	8003910 <HAL_TIM_ConfigClockSource+0xd8>
 8003892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003896:	f200 8087 	bhi.w	80039a8 <HAL_TIM_ConfigClockSource+0x170>
 800389a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389e:	f000 8086 	beq.w	80039ae <HAL_TIM_ConfigClockSource+0x176>
 80038a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a6:	d87f      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x170>
 80038a8:	2b70      	cmp	r3, #112	; 0x70
 80038aa:	d01a      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0xaa>
 80038ac:	2b70      	cmp	r3, #112	; 0x70
 80038ae:	d87b      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x170>
 80038b0:	2b60      	cmp	r3, #96	; 0x60
 80038b2:	d050      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x11e>
 80038b4:	2b60      	cmp	r3, #96	; 0x60
 80038b6:	d877      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x170>
 80038b8:	2b50      	cmp	r3, #80	; 0x50
 80038ba:	d03c      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0xfe>
 80038bc:	2b50      	cmp	r3, #80	; 0x50
 80038be:	d873      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x170>
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d058      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x13e>
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d86f      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x170>
 80038c8:	2b30      	cmp	r3, #48	; 0x30
 80038ca:	d064      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x15e>
 80038cc:	2b30      	cmp	r3, #48	; 0x30
 80038ce:	d86b      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x170>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d060      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x15e>
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d867      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x170>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d05c      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x15e>
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d05a      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x15e>
 80038e0:	e062      	b.n	80039a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6899      	ldr	r1, [r3, #8]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f000 fd67 	bl	80043c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	609a      	str	r2, [r3, #8]
      break;
 800390e:	e04f      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	6899      	ldr	r1, [r3, #8]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f000 fd50 	bl	80043c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003932:	609a      	str	r2, [r3, #8]
      break;
 8003934:	e03c      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	461a      	mov	r2, r3
 8003944:	f000 fc0e 	bl	8004164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2150      	movs	r1, #80	; 0x50
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fd1d 	bl	800438e <TIM_ITRx_SetConfig>
      break;
 8003954:	e02c      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6859      	ldr	r1, [r3, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	461a      	mov	r2, r3
 8003964:	f000 fc6a 	bl	800423c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2160      	movs	r1, #96	; 0x60
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fd0d 	bl	800438e <TIM_ITRx_SetConfig>
      break;
 8003974:	e01c      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6859      	ldr	r1, [r3, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	461a      	mov	r2, r3
 8003984:	f000 fbee 	bl	8004164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2140      	movs	r1, #64	; 0x40
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fcfd 	bl	800438e <TIM_ITRx_SetConfig>
      break;
 8003994:	e00c      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	4610      	mov	r0, r2
 80039a2:	f000 fcf4 	bl	800438e <TIM_ITRx_SetConfig>
      break;
 80039a6:	e003      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      break;
 80039ac:	e000      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80039ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	d831      	bhi.n	8003a44 <HAL_TIM_ReadCapturedValue+0x78>
 80039e0:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a1d 	.word	0x08003a1d
 80039ec:	08003a45 	.word	0x08003a45
 80039f0:	08003a45 	.word	0x08003a45
 80039f4:	08003a45 	.word	0x08003a45
 80039f8:	08003a27 	.word	0x08003a27
 80039fc:	08003a45 	.word	0x08003a45
 8003a00:	08003a45 	.word	0x08003a45
 8003a04:	08003a45 	.word	0x08003a45
 8003a08:	08003a31 	.word	0x08003a31
 8003a0c:	08003a45 	.word	0x08003a45
 8003a10:	08003a45 	.word	0x08003a45
 8003a14:	08003a45 	.word	0x08003a45
 8003a18:	08003a3b 	.word	0x08003a3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a22:	60fb      	str	r3, [r7, #12]

      break;
 8003a24:	e00f      	b.n	8003a46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	60fb      	str	r3, [r7, #12]

      break;
 8003a2e:	e00a      	b.n	8003a46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	60fb      	str	r3, [r7, #12]

      break;
 8003a38:	e005      	b.n	8003a46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	60fb      	str	r3, [r7, #12]

      break;
 8003a42:	e000      	b.n	8003a46 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003a44:	bf00      	nop
  }

  return tmpreg;
 8003a46:	68fb      	ldr	r3, [r7, #12]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a2e      	ldr	r2, [pc, #184]	; (8003b5c <TIM_Base_SetConfig+0xcc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <TIM_Base_SetConfig+0x20>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d108      	bne.n	8003ac2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a25      	ldr	r2, [pc, #148]	; (8003b5c <TIM_Base_SetConfig+0xcc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00f      	beq.n	8003aea <TIM_Base_SetConfig+0x5a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d00b      	beq.n	8003aea <TIM_Base_SetConfig+0x5a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <TIM_Base_SetConfig+0xd0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_Base_SetConfig+0x5a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <TIM_Base_SetConfig+0xd4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_Base_SetConfig+0x5a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <TIM_Base_SetConfig+0xd8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d108      	bne.n	8003afc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a0e      	ldr	r2, [pc, #56]	; (8003b5c <TIM_Base_SetConfig+0xcc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00b      	beq.n	8003b40 <TIM_Base_SetConfig+0xb0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a0d      	ldr	r2, [pc, #52]	; (8003b60 <TIM_Base_SetConfig+0xd0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d007      	beq.n	8003b40 <TIM_Base_SetConfig+0xb0>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a0c      	ldr	r2, [pc, #48]	; (8003b64 <TIM_Base_SetConfig+0xd4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d003      	beq.n	8003b40 <TIM_Base_SetConfig+0xb0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <TIM_Base_SetConfig+0xd8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d103      	bne.n	8003b48 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	615a      	str	r2, [r3, #20]
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40014000 	.word	0x40014000
 8003b64:	40014400 	.word	0x40014400
 8003b68:	40014800 	.word	0x40014800

08003b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f023 0201 	bic.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0303 	bic.w	r3, r3, #3
 8003ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f023 0302 	bic.w	r3, r3, #2
 8003bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a28      	ldr	r2, [pc, #160]	; (8003c68 <TIM_OC1_SetConfig+0xfc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <TIM_OC1_SetConfig+0x78>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a27      	ldr	r2, [pc, #156]	; (8003c6c <TIM_OC1_SetConfig+0x100>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_OC1_SetConfig+0x78>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <TIM_OC1_SetConfig+0x104>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_OC1_SetConfig+0x78>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <TIM_OC1_SetConfig+0x108>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d10c      	bne.n	8003bfe <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f023 0308 	bic.w	r3, r3, #8
 8003bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f023 0304 	bic.w	r3, r3, #4
 8003bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a19      	ldr	r2, [pc, #100]	; (8003c68 <TIM_OC1_SetConfig+0xfc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <TIM_OC1_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <TIM_OC1_SetConfig+0x100>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <TIM_OC1_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <TIM_OC1_SetConfig+0x104>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_OC1_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a16      	ldr	r2, [pc, #88]	; (8003c74 <TIM_OC1_SetConfig+0x108>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d111      	bne.n	8003c42 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	621a      	str	r2, [r3, #32]
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	40012c00 	.word	0x40012c00
 8003c6c:	40014000 	.word	0x40014000
 8003c70:	40014400 	.word	0x40014400
 8003c74:	40014800 	.word	0x40014800

08003c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f023 0210 	bic.w	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0320 	bic.w	r3, r3, #32
 8003cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a24      	ldr	r2, [pc, #144]	; (8003d68 <TIM_OC2_SetConfig+0xf0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10d      	bne.n	8003cf8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a1b      	ldr	r2, [pc, #108]	; (8003d68 <TIM_OC2_SetConfig+0xf0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00b      	beq.n	8003d18 <TIM_OC2_SetConfig+0xa0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <TIM_OC2_SetConfig+0xf4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <TIM_OC2_SetConfig+0xa0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <TIM_OC2_SetConfig+0xf8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_OC2_SetConfig+0xa0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <TIM_OC2_SetConfig+0xfc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d113      	bne.n	8003d40 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d1e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d26:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800

08003d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0303 	bic.w	r3, r3, #3
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a23      	ldr	r2, [pc, #140]	; (8003e64 <TIM_OC3_SetConfig+0xec>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d10d      	bne.n	8003df6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003df4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1a      	ldr	r2, [pc, #104]	; (8003e64 <TIM_OC3_SetConfig+0xec>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00b      	beq.n	8003e16 <TIM_OC3_SetConfig+0x9e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <TIM_OC3_SetConfig+0xf0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d007      	beq.n	8003e16 <TIM_OC3_SetConfig+0x9e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <TIM_OC3_SetConfig+0xf4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d003      	beq.n	8003e16 <TIM_OC3_SetConfig+0x9e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a17      	ldr	r2, [pc, #92]	; (8003e70 <TIM_OC3_SetConfig+0xf8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d113      	bne.n	8003e3e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	621a      	str	r2, [r3, #32]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40014000 	.word	0x40014000
 8003e6c:	40014400 	.word	0x40014400
 8003e70:	40014800 	.word	0x40014800

08003e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	031b      	lsls	r3, r3, #12
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <TIM_OC4_SetConfig+0xb8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00b      	beq.n	8003ef0 <TIM_OC4_SetConfig+0x7c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a15      	ldr	r2, [pc, #84]	; (8003f30 <TIM_OC4_SetConfig+0xbc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <TIM_OC4_SetConfig+0x7c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <TIM_OC4_SetConfig+0xc0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_OC4_SetConfig+0x7c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a13      	ldr	r2, [pc, #76]	; (8003f38 <TIM_OC4_SetConfig+0xc4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d109      	bne.n	8003f04 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	019b      	lsls	r3, r3, #6
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40012c00 	.word	0x40012c00
 8003f30:	40014000 	.word	0x40014000
 8003f34:	40014400 	.word	0x40014400
 8003f38:	40014800 	.word	0x40014800

08003f3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <TIM_OC5_SetConfig+0xac>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00b      	beq.n	8003fae <TIM_OC5_SetConfig+0x72>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a14      	ldr	r2, [pc, #80]	; (8003fec <TIM_OC5_SetConfig+0xb0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <TIM_OC5_SetConfig+0x72>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a13      	ldr	r2, [pc, #76]	; (8003ff0 <TIM_OC5_SetConfig+0xb4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_OC5_SetConfig+0x72>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <TIM_OC5_SetConfig+0xb8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d109      	bne.n	8003fc2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	621a      	str	r2, [r3, #32]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40012c00 	.word	0x40012c00
 8003fec:	40014000 	.word	0x40014000
 8003ff0:	40014400 	.word	0x40014400
 8003ff4:	40014800 	.word	0x40014800

08003ff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800403e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	051b      	lsls	r3, r3, #20
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <TIM_OC6_SetConfig+0xb0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00b      	beq.n	800406c <TIM_OC6_SetConfig+0x74>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a15      	ldr	r2, [pc, #84]	; (80040ac <TIM_OC6_SetConfig+0xb4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d007      	beq.n	800406c <TIM_OC6_SetConfig+0x74>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a14      	ldr	r2, [pc, #80]	; (80040b0 <TIM_OC6_SetConfig+0xb8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_OC6_SetConfig+0x74>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <TIM_OC6_SetConfig+0xbc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d109      	bne.n	8004080 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004072:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	029b      	lsls	r3, r3, #10
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	621a      	str	r2, [r3, #32]
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40014400 	.word	0x40014400
 80040b4:	40014800 	.word	0x40014800

080040b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 0201 	bic.w	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a1e      	ldr	r2, [pc, #120]	; (800415c <TIM_TI1_SetConfig+0xa4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d007      	beq.n	80040f6 <TIM_TI1_SetConfig+0x3e>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ec:	d003      	beq.n	80040f6 <TIM_TI1_SetConfig+0x3e>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a1b      	ldr	r2, [pc, #108]	; (8004160 <TIM_TI1_SetConfig+0xa8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d101      	bne.n	80040fa <TIM_TI1_SetConfig+0x42>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <TIM_TI1_SetConfig+0x44>
 80040fa:	2300      	movs	r3, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e003      	b.n	800411a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	b2db      	uxtb	r3, r3
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f023 030a 	bic.w	r3, r3, #10
 8004134:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f003 030a 	and.w	r3, r3, #10
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40014000 	.word	0x40014000

08004164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0201 	bic.w	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800418e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 030a 	bic.w	r3, r3, #10
 80041a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b087      	sub	sp, #28
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f023 0210 	bic.w	r2, r3, #16
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	031b      	lsls	r3, r3, #12
 8004206:	b29b      	uxth	r3, r3
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004214:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	621a      	str	r2, [r3, #32]
}
 8004230:	bf00      	nop
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f023 0210 	bic.w	r2, r3, #16
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004266:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	031b      	lsls	r3, r3, #12
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004278:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	621a      	str	r2, [r3, #32]
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 0303 	bic.w	r3, r3, #3
 80042c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80042ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	621a      	str	r2, [r3, #32]
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004340:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004352:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	031b      	lsls	r3, r3, #12
 8004358:	b29b      	uxth	r3, r3
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004366:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	031b      	lsls	r3, r3, #12
 800436c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f043 0307 	orr.w	r3, r3, #7
 80043b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	609a      	str	r2, [r3, #8]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	021a      	lsls	r2, r3, #8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	609a      	str	r2, [r3, #8]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2201      	movs	r2, #1
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a1a      	ldr	r2, [r3, #32]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	43db      	mvns	r3, r3
 8004426:	401a      	ands	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a1a      	ldr	r2, [r3, #32]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	fa01 f303 	lsl.w	r3, r1, r3
 800443c:	431a      	orrs	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
	...

08004450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004464:	2302      	movs	r3, #2
 8004466:	e04f      	b.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a21      	ldr	r2, [pc, #132]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d108      	bne.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004498:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a14      	ldr	r2, [pc, #80]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d0:	d004      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a10      	ldr	r2, [pc, #64]	; (8004518 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10c      	bne.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40014000 	.word	0x40014000

0800451c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004534:	2302      	movs	r3, #2
 8004536:	e060      	b.n	80045fa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	041b      	lsls	r3, r3, #16
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a14      	ldr	r2, [pc, #80]	; (8004608 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d115      	bne.n	80045e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	051b      	lsls	r3, r3, #20
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40012c00 	.word	0x40012c00

0800460c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e040      	b.n	80046dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc fa3e 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2224      	movs	r2, #36	; 0x24
 8004674:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f8c0 	bl	800480c <UART_SetConfig>
 800468c:	4603      	mov	r3, r0
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e022      	b.n	80046dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f9ea 	bl	8004a78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fa71 	bl	8004bbc <UART_CheckIdleState>
 80046da:	4603      	mov	r3, r0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08a      	sub	sp, #40	; 0x28
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	f040 8082 	bne.w	8004802 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_UART_Transmit+0x26>
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e07a      	b.n	8004804 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_UART_Transmit+0x38>
 8004718:	2302      	movs	r3, #2
 800471a:	e073      	b.n	8004804 <HAL_UART_Transmit+0x120>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2221      	movs	r2, #33	; 0x21
 8004730:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004732:	f7fc fb1d 	bl	8000d70 <HAL_GetTick>
 8004736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	88fa      	ldrh	r2, [r7, #6]
 800473c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	88fa      	ldrh	r2, [r7, #6]
 8004744:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004750:	d108      	bne.n	8004764 <HAL_UART_Transmit+0x80>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d104      	bne.n	8004764 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	e003      	b.n	800476c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004774:	e02d      	b.n	80047d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2200      	movs	r2, #0
 800477e:	2180      	movs	r1, #128	; 0x80
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 fa64 	bl	8004c4e <UART_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e039      	b.n	8004804 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	881a      	ldrh	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a2:	b292      	uxth	r2, r2
 80047a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	3302      	adds	r3, #2
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	e008      	b.n	80047c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	b292      	uxth	r2, r2
 80047b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	3301      	adds	r3, #1
 80047be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1cb      	bne.n	8004776 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2140      	movs	r1, #64	; 0x40
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fa30 	bl	8004c4e <UART_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e005      	b.n	8004804 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	e000      	b.n	8004804 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004802:	2302      	movs	r3, #2
  }
}
 8004804:	4618      	mov	r0, r3
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b8a      	ldr	r3, [pc, #552]	; (8004a60 <UART_SetConfig+0x254>)
 8004838:	4013      	ands	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	6979      	ldr	r1, [r7, #20]
 8004840:	430b      	orrs	r3, r1
 8004842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	430a      	orrs	r2, r1
 800487c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a78      	ldr	r2, [pc, #480]	; (8004a64 <UART_SetConfig+0x258>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d120      	bne.n	80048ca <UART_SetConfig+0xbe>
 8004888:	4b77      	ldr	r3, [pc, #476]	; (8004a68 <UART_SetConfig+0x25c>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b03      	cmp	r3, #3
 8004892:	d817      	bhi.n	80048c4 <UART_SetConfig+0xb8>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <UART_SetConfig+0x90>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048ad 	.word	0x080048ad
 80048a0:	080048b9 	.word	0x080048b9
 80048a4:	080048bf 	.word	0x080048bf
 80048a8:	080048b3 	.word	0x080048b3
 80048ac:	2300      	movs	r3, #0
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e01d      	b.n	80048ee <UART_SetConfig+0xe2>
 80048b2:	2302      	movs	r3, #2
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e01a      	b.n	80048ee <UART_SetConfig+0xe2>
 80048b8:	2304      	movs	r3, #4
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e017      	b.n	80048ee <UART_SetConfig+0xe2>
 80048be:	2308      	movs	r3, #8
 80048c0:	77fb      	strb	r3, [r7, #31]
 80048c2:	e014      	b.n	80048ee <UART_SetConfig+0xe2>
 80048c4:	2310      	movs	r3, #16
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e011      	b.n	80048ee <UART_SetConfig+0xe2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a67      	ldr	r2, [pc, #412]	; (8004a6c <UART_SetConfig+0x260>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d102      	bne.n	80048da <UART_SetConfig+0xce>
 80048d4:	2300      	movs	r3, #0
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e009      	b.n	80048ee <UART_SetConfig+0xe2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a64      	ldr	r2, [pc, #400]	; (8004a70 <UART_SetConfig+0x264>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d102      	bne.n	80048ea <UART_SetConfig+0xde>
 80048e4:	2300      	movs	r3, #0
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e001      	b.n	80048ee <UART_SetConfig+0xe2>
 80048ea:	2310      	movs	r3, #16
 80048ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f6:	d15b      	bne.n	80049b0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80048f8:	7ffb      	ldrb	r3, [r7, #31]
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d827      	bhi.n	800494e <UART_SetConfig+0x142>
 80048fe:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <UART_SetConfig+0xf8>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004929 	.word	0x08004929
 8004908:	08004931 	.word	0x08004931
 800490c:	08004939 	.word	0x08004939
 8004910:	0800494f 	.word	0x0800494f
 8004914:	0800493f 	.word	0x0800493f
 8004918:	0800494f 	.word	0x0800494f
 800491c:	0800494f 	.word	0x0800494f
 8004920:	0800494f 	.word	0x0800494f
 8004924:	08004947 	.word	0x08004947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004928:	f7fd ff6a 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
 800492c:	61b8      	str	r0, [r7, #24]
        break;
 800492e:	e013      	b.n	8004958 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004930:	f7fd ff88 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 8004934:	61b8      	str	r0, [r7, #24]
        break;
 8004936:	e00f      	b.n	8004958 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004938:	4b4e      	ldr	r3, [pc, #312]	; (8004a74 <UART_SetConfig+0x268>)
 800493a:	61bb      	str	r3, [r7, #24]
        break;
 800493c:	e00c      	b.n	8004958 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800493e:	f7fd fee9 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 8004942:	61b8      	str	r0, [r7, #24]
        break;
 8004944:	e008      	b.n	8004958 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494a:	61bb      	str	r3, [r7, #24]
        break;
 800494c:	e004      	b.n	8004958 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	77bb      	strb	r3, [r7, #30]
        break;
 8004956:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d074      	beq.n	8004a48 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	005a      	lsls	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	441a      	add	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004972:	b29b      	uxth	r3, r3
 8004974:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b0f      	cmp	r3, #15
 800497a:	d916      	bls.n	80049aa <UART_SetConfig+0x19e>
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004982:	d212      	bcs.n	80049aa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	b29b      	uxth	r3, r3
 8004988:	f023 030f 	bic.w	r3, r3, #15
 800498c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	b29b      	uxth	r3, r3
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	b29a      	uxth	r2, r3
 800499a:	89fb      	ldrh	r3, [r7, #14]
 800499c:	4313      	orrs	r3, r2
 800499e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	89fa      	ldrh	r2, [r7, #14]
 80049a6:	60da      	str	r2, [r3, #12]
 80049a8:	e04e      	b.n	8004a48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	77bb      	strb	r3, [r7, #30]
 80049ae:	e04b      	b.n	8004a48 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049b0:	7ffb      	ldrb	r3, [r7, #31]
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d827      	bhi.n	8004a06 <UART_SetConfig+0x1fa>
 80049b6:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <UART_SetConfig+0x1b0>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	080049f1 	.word	0x080049f1
 80049c8:	08004a07 	.word	0x08004a07
 80049cc:	080049f7 	.word	0x080049f7
 80049d0:	08004a07 	.word	0x08004a07
 80049d4:	08004a07 	.word	0x08004a07
 80049d8:	08004a07 	.word	0x08004a07
 80049dc:	080049ff 	.word	0x080049ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e0:	f7fd ff0e 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
 80049e4:	61b8      	str	r0, [r7, #24]
        break;
 80049e6:	e013      	b.n	8004a10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e8:	f7fd ff2c 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 80049ec:	61b8      	str	r0, [r7, #24]
        break;
 80049ee:	e00f      	b.n	8004a10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f0:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <UART_SetConfig+0x268>)
 80049f2:	61bb      	str	r3, [r7, #24]
        break;
 80049f4:	e00c      	b.n	8004a10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f6:	f7fd fe8d 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80049fa:	61b8      	str	r0, [r7, #24]
        break;
 80049fc:	e008      	b.n	8004a10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a02:	61bb      	str	r3, [r7, #24]
        break;
 8004a04:	e004      	b.n	8004a10 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a0e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d018      	beq.n	8004a48 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	085a      	lsrs	r2, r3, #1
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	441a      	add	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b0f      	cmp	r3, #15
 8004a30:	d908      	bls.n	8004a44 <UART_SetConfig+0x238>
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d204      	bcs.n	8004a44 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	60da      	str	r2, [r3, #12]
 8004a42:	e001      	b.n	8004a48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a54:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	efff69f3 	.word	0xefff69f3
 8004a64:	40013800 	.word	0x40013800
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40004400 	.word	0x40004400
 8004a70:	40004800 	.word	0x40004800
 8004a74:	007a1200 	.word	0x007a1200

08004a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01a      	beq.n	8004b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b76:	d10a      	bne.n	8004b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	605a      	str	r2, [r3, #4]
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bcc:	f7fc f8d0 	bl	8000d70 <HAL_GetTick>
 8004bd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d10e      	bne.n	8004bfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f82d 	bl	8004c4e <UART_WaitOnFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e023      	b.n	8004c46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d10e      	bne.n	8004c2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f817 	bl	8004c4e <UART_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e00d      	b.n	8004c46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b09c      	sub	sp, #112	; 0x70
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5e:	e0a5      	b.n	8004dac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	f000 80a1 	beq.w	8004dac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6a:	f7fc f881 	bl	8000d70 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d302      	bcc.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d13e      	bne.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c94:	667b      	str	r3, [r7, #100]	; 0x64
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e6      	bne.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	663b      	str	r3, [r7, #96]	; 0x60
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e5      	bne.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e067      	b.n	8004dce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d04f      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1a:	d147      	bne.n	8004dac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d44:	637b      	str	r3, [r7, #52]	; 0x34
 8004d46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e6      	bne.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	613b      	str	r3, [r7, #16]
   return(result);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3308      	adds	r3, #8
 8004d76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d78:	623a      	str	r2, [r7, #32]
 8004d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	69f9      	ldr	r1, [r7, #28]
 8004d7e:	6a3a      	ldr	r2, [r7, #32]
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e5      	bne.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e010      	b.n	8004dce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69da      	ldr	r2, [r3, #28]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	f43f af4a 	beq.w	8004c60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3770      	adds	r7, #112	; 0x70
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <__errno>:
 8004dd8:	4b01      	ldr	r3, [pc, #4]	; (8004de0 <__errno+0x8>)
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	2000000c 	.word	0x2000000c

08004de4 <__libc_init_array>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	4d0d      	ldr	r5, [pc, #52]	; (8004e1c <__libc_init_array+0x38>)
 8004de8:	4c0d      	ldr	r4, [pc, #52]	; (8004e20 <__libc_init_array+0x3c>)
 8004dea:	1b64      	subs	r4, r4, r5
 8004dec:	10a4      	asrs	r4, r4, #2
 8004dee:	2600      	movs	r6, #0
 8004df0:	42a6      	cmp	r6, r4
 8004df2:	d109      	bne.n	8004e08 <__libc_init_array+0x24>
 8004df4:	4d0b      	ldr	r5, [pc, #44]	; (8004e24 <__libc_init_array+0x40>)
 8004df6:	4c0c      	ldr	r4, [pc, #48]	; (8004e28 <__libc_init_array+0x44>)
 8004df8:	f000 fc8e 	bl	8005718 <_init>
 8004dfc:	1b64      	subs	r4, r4, r5
 8004dfe:	10a4      	asrs	r4, r4, #2
 8004e00:	2600      	movs	r6, #0
 8004e02:	42a6      	cmp	r6, r4
 8004e04:	d105      	bne.n	8004e12 <__libc_init_array+0x2e>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0c:	4798      	blx	r3
 8004e0e:	3601      	adds	r6, #1
 8004e10:	e7ee      	b.n	8004df0 <__libc_init_array+0xc>
 8004e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e16:	4798      	blx	r3
 8004e18:	3601      	adds	r6, #1
 8004e1a:	e7f2      	b.n	8004e02 <__libc_init_array+0x1e>
 8004e1c:	080057bc 	.word	0x080057bc
 8004e20:	080057bc 	.word	0x080057bc
 8004e24:	080057bc 	.word	0x080057bc
 8004e28:	080057c0 	.word	0x080057c0

08004e2c <memset>:
 8004e2c:	4402      	add	r2, r0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d100      	bne.n	8004e36 <memset+0xa>
 8004e34:	4770      	bx	lr
 8004e36:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3a:	e7f9      	b.n	8004e30 <memset+0x4>

08004e3c <siprintf>:
 8004e3c:	b40e      	push	{r1, r2, r3}
 8004e3e:	b500      	push	{lr}
 8004e40:	b09c      	sub	sp, #112	; 0x70
 8004e42:	ab1d      	add	r3, sp, #116	; 0x74
 8004e44:	9002      	str	r0, [sp, #8]
 8004e46:	9006      	str	r0, [sp, #24]
 8004e48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e4c:	4809      	ldr	r0, [pc, #36]	; (8004e74 <siprintf+0x38>)
 8004e4e:	9107      	str	r1, [sp, #28]
 8004e50:	9104      	str	r1, [sp, #16]
 8004e52:	4909      	ldr	r1, [pc, #36]	; (8004e78 <siprintf+0x3c>)
 8004e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	a902      	add	r1, sp, #8
 8004e60:	f000 f868 	bl	8004f34 <_svfiprintf_r>
 8004e64:	9b02      	ldr	r3, [sp, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	b01c      	add	sp, #112	; 0x70
 8004e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e70:	b003      	add	sp, #12
 8004e72:	4770      	bx	lr
 8004e74:	2000000c 	.word	0x2000000c
 8004e78:	ffff0208 	.word	0xffff0208

08004e7c <__ssputs_r>:
 8004e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e80:	688e      	ldr	r6, [r1, #8]
 8004e82:	429e      	cmp	r6, r3
 8004e84:	4682      	mov	sl, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	4690      	mov	r8, r2
 8004e8a:	461f      	mov	r7, r3
 8004e8c:	d838      	bhi.n	8004f00 <__ssputs_r+0x84>
 8004e8e:	898a      	ldrh	r2, [r1, #12]
 8004e90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e94:	d032      	beq.n	8004efc <__ssputs_r+0x80>
 8004e96:	6825      	ldr	r5, [r4, #0]
 8004e98:	6909      	ldr	r1, [r1, #16]
 8004e9a:	eba5 0901 	sub.w	r9, r5, r1
 8004e9e:	6965      	ldr	r5, [r4, #20]
 8004ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ea4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	444b      	add	r3, r9
 8004eac:	106d      	asrs	r5, r5, #1
 8004eae:	429d      	cmp	r5, r3
 8004eb0:	bf38      	it	cc
 8004eb2:	461d      	movcc	r5, r3
 8004eb4:	0553      	lsls	r3, r2, #21
 8004eb6:	d531      	bpl.n	8004f1c <__ssputs_r+0xa0>
 8004eb8:	4629      	mov	r1, r5
 8004eba:	f000 fb63 	bl	8005584 <_malloc_r>
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	b950      	cbnz	r0, 8004ed8 <__ssputs_r+0x5c>
 8004ec2:	230c      	movs	r3, #12
 8004ec4:	f8ca 3000 	str.w	r3, [sl]
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed8:	6921      	ldr	r1, [r4, #16]
 8004eda:	464a      	mov	r2, r9
 8004edc:	f000 fabe 	bl	800545c <memcpy>
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eea:	81a3      	strh	r3, [r4, #12]
 8004eec:	6126      	str	r6, [r4, #16]
 8004eee:	6165      	str	r5, [r4, #20]
 8004ef0:	444e      	add	r6, r9
 8004ef2:	eba5 0509 	sub.w	r5, r5, r9
 8004ef6:	6026      	str	r6, [r4, #0]
 8004ef8:	60a5      	str	r5, [r4, #8]
 8004efa:	463e      	mov	r6, r7
 8004efc:	42be      	cmp	r6, r7
 8004efe:	d900      	bls.n	8004f02 <__ssputs_r+0x86>
 8004f00:	463e      	mov	r6, r7
 8004f02:	6820      	ldr	r0, [r4, #0]
 8004f04:	4632      	mov	r2, r6
 8004f06:	4641      	mov	r1, r8
 8004f08:	f000 fab6 	bl	8005478 <memmove>
 8004f0c:	68a3      	ldr	r3, [r4, #8]
 8004f0e:	1b9b      	subs	r3, r3, r6
 8004f10:	60a3      	str	r3, [r4, #8]
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	4433      	add	r3, r6
 8004f16:	6023      	str	r3, [r4, #0]
 8004f18:	2000      	movs	r0, #0
 8004f1a:	e7db      	b.n	8004ed4 <__ssputs_r+0x58>
 8004f1c:	462a      	mov	r2, r5
 8004f1e:	f000 fba5 	bl	800566c <_realloc_r>
 8004f22:	4606      	mov	r6, r0
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d1e1      	bne.n	8004eec <__ssputs_r+0x70>
 8004f28:	6921      	ldr	r1, [r4, #16]
 8004f2a:	4650      	mov	r0, sl
 8004f2c:	f000 fabe 	bl	80054ac <_free_r>
 8004f30:	e7c7      	b.n	8004ec2 <__ssputs_r+0x46>
	...

08004f34 <_svfiprintf_r>:
 8004f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f38:	4698      	mov	r8, r3
 8004f3a:	898b      	ldrh	r3, [r1, #12]
 8004f3c:	061b      	lsls	r3, r3, #24
 8004f3e:	b09d      	sub	sp, #116	; 0x74
 8004f40:	4607      	mov	r7, r0
 8004f42:	460d      	mov	r5, r1
 8004f44:	4614      	mov	r4, r2
 8004f46:	d50e      	bpl.n	8004f66 <_svfiprintf_r+0x32>
 8004f48:	690b      	ldr	r3, [r1, #16]
 8004f4a:	b963      	cbnz	r3, 8004f66 <_svfiprintf_r+0x32>
 8004f4c:	2140      	movs	r1, #64	; 0x40
 8004f4e:	f000 fb19 	bl	8005584 <_malloc_r>
 8004f52:	6028      	str	r0, [r5, #0]
 8004f54:	6128      	str	r0, [r5, #16]
 8004f56:	b920      	cbnz	r0, 8004f62 <_svfiprintf_r+0x2e>
 8004f58:	230c      	movs	r3, #12
 8004f5a:	603b      	str	r3, [r7, #0]
 8004f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f60:	e0d1      	b.n	8005106 <_svfiprintf_r+0x1d2>
 8004f62:	2340      	movs	r3, #64	; 0x40
 8004f64:	616b      	str	r3, [r5, #20]
 8004f66:	2300      	movs	r3, #0
 8004f68:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6a:	2320      	movs	r3, #32
 8004f6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f74:	2330      	movs	r3, #48	; 0x30
 8004f76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005120 <_svfiprintf_r+0x1ec>
 8004f7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f7e:	f04f 0901 	mov.w	r9, #1
 8004f82:	4623      	mov	r3, r4
 8004f84:	469a      	mov	sl, r3
 8004f86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f8a:	b10a      	cbz	r2, 8004f90 <_svfiprintf_r+0x5c>
 8004f8c:	2a25      	cmp	r2, #37	; 0x25
 8004f8e:	d1f9      	bne.n	8004f84 <_svfiprintf_r+0x50>
 8004f90:	ebba 0b04 	subs.w	fp, sl, r4
 8004f94:	d00b      	beq.n	8004fae <_svfiprintf_r+0x7a>
 8004f96:	465b      	mov	r3, fp
 8004f98:	4622      	mov	r2, r4
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	f7ff ff6d 	bl	8004e7c <__ssputs_r>
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	f000 80aa 	beq.w	80050fc <_svfiprintf_r+0x1c8>
 8004fa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004faa:	445a      	add	r2, fp
 8004fac:	9209      	str	r2, [sp, #36]	; 0x24
 8004fae:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 80a2 	beq.w	80050fc <_svfiprintf_r+0x1c8>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f04f 32ff 	mov.w	r2, #4294967295
 8004fbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fc2:	f10a 0a01 	add.w	sl, sl, #1
 8004fc6:	9304      	str	r3, [sp, #16]
 8004fc8:	9307      	str	r3, [sp, #28]
 8004fca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fce:	931a      	str	r3, [sp, #104]	; 0x68
 8004fd0:	4654      	mov	r4, sl
 8004fd2:	2205      	movs	r2, #5
 8004fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd8:	4851      	ldr	r0, [pc, #324]	; (8005120 <_svfiprintf_r+0x1ec>)
 8004fda:	f7fb f8f9 	bl	80001d0 <memchr>
 8004fde:	9a04      	ldr	r2, [sp, #16]
 8004fe0:	b9d8      	cbnz	r0, 800501a <_svfiprintf_r+0xe6>
 8004fe2:	06d0      	lsls	r0, r2, #27
 8004fe4:	bf44      	itt	mi
 8004fe6:	2320      	movmi	r3, #32
 8004fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fec:	0711      	lsls	r1, r2, #28
 8004fee:	bf44      	itt	mi
 8004ff0:	232b      	movmi	r3, #43	; 0x2b
 8004ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8004ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8004ffc:	d015      	beq.n	800502a <_svfiprintf_r+0xf6>
 8004ffe:	9a07      	ldr	r2, [sp, #28]
 8005000:	4654      	mov	r4, sl
 8005002:	2000      	movs	r0, #0
 8005004:	f04f 0c0a 	mov.w	ip, #10
 8005008:	4621      	mov	r1, r4
 800500a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800500e:	3b30      	subs	r3, #48	; 0x30
 8005010:	2b09      	cmp	r3, #9
 8005012:	d94e      	bls.n	80050b2 <_svfiprintf_r+0x17e>
 8005014:	b1b0      	cbz	r0, 8005044 <_svfiprintf_r+0x110>
 8005016:	9207      	str	r2, [sp, #28]
 8005018:	e014      	b.n	8005044 <_svfiprintf_r+0x110>
 800501a:	eba0 0308 	sub.w	r3, r0, r8
 800501e:	fa09 f303 	lsl.w	r3, r9, r3
 8005022:	4313      	orrs	r3, r2
 8005024:	9304      	str	r3, [sp, #16]
 8005026:	46a2      	mov	sl, r4
 8005028:	e7d2      	b.n	8004fd0 <_svfiprintf_r+0x9c>
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	1d19      	adds	r1, r3, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	9103      	str	r1, [sp, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	bfbb      	ittet	lt
 8005036:	425b      	neglt	r3, r3
 8005038:	f042 0202 	orrlt.w	r2, r2, #2
 800503c:	9307      	strge	r3, [sp, #28]
 800503e:	9307      	strlt	r3, [sp, #28]
 8005040:	bfb8      	it	lt
 8005042:	9204      	strlt	r2, [sp, #16]
 8005044:	7823      	ldrb	r3, [r4, #0]
 8005046:	2b2e      	cmp	r3, #46	; 0x2e
 8005048:	d10c      	bne.n	8005064 <_svfiprintf_r+0x130>
 800504a:	7863      	ldrb	r3, [r4, #1]
 800504c:	2b2a      	cmp	r3, #42	; 0x2a
 800504e:	d135      	bne.n	80050bc <_svfiprintf_r+0x188>
 8005050:	9b03      	ldr	r3, [sp, #12]
 8005052:	1d1a      	adds	r2, r3, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	9203      	str	r2, [sp, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	bfb8      	it	lt
 800505c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005060:	3402      	adds	r4, #2
 8005062:	9305      	str	r3, [sp, #20]
 8005064:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005130 <_svfiprintf_r+0x1fc>
 8005068:	7821      	ldrb	r1, [r4, #0]
 800506a:	2203      	movs	r2, #3
 800506c:	4650      	mov	r0, sl
 800506e:	f7fb f8af 	bl	80001d0 <memchr>
 8005072:	b140      	cbz	r0, 8005086 <_svfiprintf_r+0x152>
 8005074:	2340      	movs	r3, #64	; 0x40
 8005076:	eba0 000a 	sub.w	r0, r0, sl
 800507a:	fa03 f000 	lsl.w	r0, r3, r0
 800507e:	9b04      	ldr	r3, [sp, #16]
 8005080:	4303      	orrs	r3, r0
 8005082:	3401      	adds	r4, #1
 8005084:	9304      	str	r3, [sp, #16]
 8005086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800508a:	4826      	ldr	r0, [pc, #152]	; (8005124 <_svfiprintf_r+0x1f0>)
 800508c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005090:	2206      	movs	r2, #6
 8005092:	f7fb f89d 	bl	80001d0 <memchr>
 8005096:	2800      	cmp	r0, #0
 8005098:	d038      	beq.n	800510c <_svfiprintf_r+0x1d8>
 800509a:	4b23      	ldr	r3, [pc, #140]	; (8005128 <_svfiprintf_r+0x1f4>)
 800509c:	bb1b      	cbnz	r3, 80050e6 <_svfiprintf_r+0x1b2>
 800509e:	9b03      	ldr	r3, [sp, #12]
 80050a0:	3307      	adds	r3, #7
 80050a2:	f023 0307 	bic.w	r3, r3, #7
 80050a6:	3308      	adds	r3, #8
 80050a8:	9303      	str	r3, [sp, #12]
 80050aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ac:	4433      	add	r3, r6
 80050ae:	9309      	str	r3, [sp, #36]	; 0x24
 80050b0:	e767      	b.n	8004f82 <_svfiprintf_r+0x4e>
 80050b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80050b6:	460c      	mov	r4, r1
 80050b8:	2001      	movs	r0, #1
 80050ba:	e7a5      	b.n	8005008 <_svfiprintf_r+0xd4>
 80050bc:	2300      	movs	r3, #0
 80050be:	3401      	adds	r4, #1
 80050c0:	9305      	str	r3, [sp, #20]
 80050c2:	4619      	mov	r1, r3
 80050c4:	f04f 0c0a 	mov.w	ip, #10
 80050c8:	4620      	mov	r0, r4
 80050ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ce:	3a30      	subs	r2, #48	; 0x30
 80050d0:	2a09      	cmp	r2, #9
 80050d2:	d903      	bls.n	80050dc <_svfiprintf_r+0x1a8>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0c5      	beq.n	8005064 <_svfiprintf_r+0x130>
 80050d8:	9105      	str	r1, [sp, #20]
 80050da:	e7c3      	b.n	8005064 <_svfiprintf_r+0x130>
 80050dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80050e0:	4604      	mov	r4, r0
 80050e2:	2301      	movs	r3, #1
 80050e4:	e7f0      	b.n	80050c8 <_svfiprintf_r+0x194>
 80050e6:	ab03      	add	r3, sp, #12
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	462a      	mov	r2, r5
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <_svfiprintf_r+0x1f8>)
 80050ee:	a904      	add	r1, sp, #16
 80050f0:	4638      	mov	r0, r7
 80050f2:	f3af 8000 	nop.w
 80050f6:	1c42      	adds	r2, r0, #1
 80050f8:	4606      	mov	r6, r0
 80050fa:	d1d6      	bne.n	80050aa <_svfiprintf_r+0x176>
 80050fc:	89ab      	ldrh	r3, [r5, #12]
 80050fe:	065b      	lsls	r3, r3, #25
 8005100:	f53f af2c 	bmi.w	8004f5c <_svfiprintf_r+0x28>
 8005104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005106:	b01d      	add	sp, #116	; 0x74
 8005108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510c:	ab03      	add	r3, sp, #12
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	462a      	mov	r2, r5
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <_svfiprintf_r+0x1f8>)
 8005114:	a904      	add	r1, sp, #16
 8005116:	4638      	mov	r0, r7
 8005118:	f000 f87a 	bl	8005210 <_printf_i>
 800511c:	e7eb      	b.n	80050f6 <_svfiprintf_r+0x1c2>
 800511e:	bf00      	nop
 8005120:	08005788 	.word	0x08005788
 8005124:	08005792 	.word	0x08005792
 8005128:	00000000 	.word	0x00000000
 800512c:	08004e7d 	.word	0x08004e7d
 8005130:	0800578e 	.word	0x0800578e

08005134 <_printf_common>:
 8005134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005138:	4616      	mov	r6, r2
 800513a:	4699      	mov	r9, r3
 800513c:	688a      	ldr	r2, [r1, #8]
 800513e:	690b      	ldr	r3, [r1, #16]
 8005140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005144:	4293      	cmp	r3, r2
 8005146:	bfb8      	it	lt
 8005148:	4613      	movlt	r3, r2
 800514a:	6033      	str	r3, [r6, #0]
 800514c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005150:	4607      	mov	r7, r0
 8005152:	460c      	mov	r4, r1
 8005154:	b10a      	cbz	r2, 800515a <_printf_common+0x26>
 8005156:	3301      	adds	r3, #1
 8005158:	6033      	str	r3, [r6, #0]
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	0699      	lsls	r1, r3, #26
 800515e:	bf42      	ittt	mi
 8005160:	6833      	ldrmi	r3, [r6, #0]
 8005162:	3302      	addmi	r3, #2
 8005164:	6033      	strmi	r3, [r6, #0]
 8005166:	6825      	ldr	r5, [r4, #0]
 8005168:	f015 0506 	ands.w	r5, r5, #6
 800516c:	d106      	bne.n	800517c <_printf_common+0x48>
 800516e:	f104 0a19 	add.w	sl, r4, #25
 8005172:	68e3      	ldr	r3, [r4, #12]
 8005174:	6832      	ldr	r2, [r6, #0]
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	42ab      	cmp	r3, r5
 800517a:	dc26      	bgt.n	80051ca <_printf_common+0x96>
 800517c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005180:	1e13      	subs	r3, r2, #0
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	bf18      	it	ne
 8005186:	2301      	movne	r3, #1
 8005188:	0692      	lsls	r2, r2, #26
 800518a:	d42b      	bmi.n	80051e4 <_printf_common+0xb0>
 800518c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005190:	4649      	mov	r1, r9
 8005192:	4638      	mov	r0, r7
 8005194:	47c0      	blx	r8
 8005196:	3001      	adds	r0, #1
 8005198:	d01e      	beq.n	80051d8 <_printf_common+0xa4>
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	68e5      	ldr	r5, [r4, #12]
 800519e:	6832      	ldr	r2, [r6, #0]
 80051a0:	f003 0306 	and.w	r3, r3, #6
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	bf08      	it	eq
 80051a8:	1aad      	subeq	r5, r5, r2
 80051aa:	68a3      	ldr	r3, [r4, #8]
 80051ac:	6922      	ldr	r2, [r4, #16]
 80051ae:	bf0c      	ite	eq
 80051b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b4:	2500      	movne	r5, #0
 80051b6:	4293      	cmp	r3, r2
 80051b8:	bfc4      	itt	gt
 80051ba:	1a9b      	subgt	r3, r3, r2
 80051bc:	18ed      	addgt	r5, r5, r3
 80051be:	2600      	movs	r6, #0
 80051c0:	341a      	adds	r4, #26
 80051c2:	42b5      	cmp	r5, r6
 80051c4:	d11a      	bne.n	80051fc <_printf_common+0xc8>
 80051c6:	2000      	movs	r0, #0
 80051c8:	e008      	b.n	80051dc <_printf_common+0xa8>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4652      	mov	r2, sl
 80051ce:	4649      	mov	r1, r9
 80051d0:	4638      	mov	r0, r7
 80051d2:	47c0      	blx	r8
 80051d4:	3001      	adds	r0, #1
 80051d6:	d103      	bne.n	80051e0 <_printf_common+0xac>
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e0:	3501      	adds	r5, #1
 80051e2:	e7c6      	b.n	8005172 <_printf_common+0x3e>
 80051e4:	18e1      	adds	r1, r4, r3
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	2030      	movs	r0, #48	; 0x30
 80051ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ee:	4422      	add	r2, r4
 80051f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f8:	3302      	adds	r3, #2
 80051fa:	e7c7      	b.n	800518c <_printf_common+0x58>
 80051fc:	2301      	movs	r3, #1
 80051fe:	4622      	mov	r2, r4
 8005200:	4649      	mov	r1, r9
 8005202:	4638      	mov	r0, r7
 8005204:	47c0      	blx	r8
 8005206:	3001      	adds	r0, #1
 8005208:	d0e6      	beq.n	80051d8 <_printf_common+0xa4>
 800520a:	3601      	adds	r6, #1
 800520c:	e7d9      	b.n	80051c2 <_printf_common+0x8e>
	...

08005210 <_printf_i>:
 8005210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005214:	7e0f      	ldrb	r7, [r1, #24]
 8005216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005218:	2f78      	cmp	r7, #120	; 0x78
 800521a:	4691      	mov	r9, r2
 800521c:	4680      	mov	r8, r0
 800521e:	460c      	mov	r4, r1
 8005220:	469a      	mov	sl, r3
 8005222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005226:	d807      	bhi.n	8005238 <_printf_i+0x28>
 8005228:	2f62      	cmp	r7, #98	; 0x62
 800522a:	d80a      	bhi.n	8005242 <_printf_i+0x32>
 800522c:	2f00      	cmp	r7, #0
 800522e:	f000 80d8 	beq.w	80053e2 <_printf_i+0x1d2>
 8005232:	2f58      	cmp	r7, #88	; 0x58
 8005234:	f000 80a3 	beq.w	800537e <_printf_i+0x16e>
 8005238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800523c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005240:	e03a      	b.n	80052b8 <_printf_i+0xa8>
 8005242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005246:	2b15      	cmp	r3, #21
 8005248:	d8f6      	bhi.n	8005238 <_printf_i+0x28>
 800524a:	a101      	add	r1, pc, #4	; (adr r1, 8005250 <_printf_i+0x40>)
 800524c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005250:	080052a9 	.word	0x080052a9
 8005254:	080052bd 	.word	0x080052bd
 8005258:	08005239 	.word	0x08005239
 800525c:	08005239 	.word	0x08005239
 8005260:	08005239 	.word	0x08005239
 8005264:	08005239 	.word	0x08005239
 8005268:	080052bd 	.word	0x080052bd
 800526c:	08005239 	.word	0x08005239
 8005270:	08005239 	.word	0x08005239
 8005274:	08005239 	.word	0x08005239
 8005278:	08005239 	.word	0x08005239
 800527c:	080053c9 	.word	0x080053c9
 8005280:	080052ed 	.word	0x080052ed
 8005284:	080053ab 	.word	0x080053ab
 8005288:	08005239 	.word	0x08005239
 800528c:	08005239 	.word	0x08005239
 8005290:	080053eb 	.word	0x080053eb
 8005294:	08005239 	.word	0x08005239
 8005298:	080052ed 	.word	0x080052ed
 800529c:	08005239 	.word	0x08005239
 80052a0:	08005239 	.word	0x08005239
 80052a4:	080053b3 	.word	0x080053b3
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	1d1a      	adds	r2, r3, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	602a      	str	r2, [r5, #0]
 80052b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0a3      	b.n	8005404 <_printf_i+0x1f4>
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	6829      	ldr	r1, [r5, #0]
 80052c0:	0606      	lsls	r6, r0, #24
 80052c2:	f101 0304 	add.w	r3, r1, #4
 80052c6:	d50a      	bpl.n	80052de <_printf_i+0xce>
 80052c8:	680e      	ldr	r6, [r1, #0]
 80052ca:	602b      	str	r3, [r5, #0]
 80052cc:	2e00      	cmp	r6, #0
 80052ce:	da03      	bge.n	80052d8 <_printf_i+0xc8>
 80052d0:	232d      	movs	r3, #45	; 0x2d
 80052d2:	4276      	negs	r6, r6
 80052d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d8:	485e      	ldr	r0, [pc, #376]	; (8005454 <_printf_i+0x244>)
 80052da:	230a      	movs	r3, #10
 80052dc:	e019      	b.n	8005312 <_printf_i+0x102>
 80052de:	680e      	ldr	r6, [r1, #0]
 80052e0:	602b      	str	r3, [r5, #0]
 80052e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052e6:	bf18      	it	ne
 80052e8:	b236      	sxthne	r6, r6
 80052ea:	e7ef      	b.n	80052cc <_printf_i+0xbc>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	6820      	ldr	r0, [r4, #0]
 80052f0:	1d19      	adds	r1, r3, #4
 80052f2:	6029      	str	r1, [r5, #0]
 80052f4:	0601      	lsls	r1, r0, #24
 80052f6:	d501      	bpl.n	80052fc <_printf_i+0xec>
 80052f8:	681e      	ldr	r6, [r3, #0]
 80052fa:	e002      	b.n	8005302 <_printf_i+0xf2>
 80052fc:	0646      	lsls	r6, r0, #25
 80052fe:	d5fb      	bpl.n	80052f8 <_printf_i+0xe8>
 8005300:	881e      	ldrh	r6, [r3, #0]
 8005302:	4854      	ldr	r0, [pc, #336]	; (8005454 <_printf_i+0x244>)
 8005304:	2f6f      	cmp	r7, #111	; 0x6f
 8005306:	bf0c      	ite	eq
 8005308:	2308      	moveq	r3, #8
 800530a:	230a      	movne	r3, #10
 800530c:	2100      	movs	r1, #0
 800530e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005312:	6865      	ldr	r5, [r4, #4]
 8005314:	60a5      	str	r5, [r4, #8]
 8005316:	2d00      	cmp	r5, #0
 8005318:	bfa2      	ittt	ge
 800531a:	6821      	ldrge	r1, [r4, #0]
 800531c:	f021 0104 	bicge.w	r1, r1, #4
 8005320:	6021      	strge	r1, [r4, #0]
 8005322:	b90e      	cbnz	r6, 8005328 <_printf_i+0x118>
 8005324:	2d00      	cmp	r5, #0
 8005326:	d04d      	beq.n	80053c4 <_printf_i+0x1b4>
 8005328:	4615      	mov	r5, r2
 800532a:	fbb6 f1f3 	udiv	r1, r6, r3
 800532e:	fb03 6711 	mls	r7, r3, r1, r6
 8005332:	5dc7      	ldrb	r7, [r0, r7]
 8005334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005338:	4637      	mov	r7, r6
 800533a:	42bb      	cmp	r3, r7
 800533c:	460e      	mov	r6, r1
 800533e:	d9f4      	bls.n	800532a <_printf_i+0x11a>
 8005340:	2b08      	cmp	r3, #8
 8005342:	d10b      	bne.n	800535c <_printf_i+0x14c>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	07de      	lsls	r6, r3, #31
 8005348:	d508      	bpl.n	800535c <_printf_i+0x14c>
 800534a:	6923      	ldr	r3, [r4, #16]
 800534c:	6861      	ldr	r1, [r4, #4]
 800534e:	4299      	cmp	r1, r3
 8005350:	bfde      	ittt	le
 8005352:	2330      	movle	r3, #48	; 0x30
 8005354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800535c:	1b52      	subs	r2, r2, r5
 800535e:	6122      	str	r2, [r4, #16]
 8005360:	f8cd a000 	str.w	sl, [sp]
 8005364:	464b      	mov	r3, r9
 8005366:	aa03      	add	r2, sp, #12
 8005368:	4621      	mov	r1, r4
 800536a:	4640      	mov	r0, r8
 800536c:	f7ff fee2 	bl	8005134 <_printf_common>
 8005370:	3001      	adds	r0, #1
 8005372:	d14c      	bne.n	800540e <_printf_i+0x1fe>
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	b004      	add	sp, #16
 800537a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537e:	4835      	ldr	r0, [pc, #212]	; (8005454 <_printf_i+0x244>)
 8005380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005384:	6829      	ldr	r1, [r5, #0]
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	f851 6b04 	ldr.w	r6, [r1], #4
 800538c:	6029      	str	r1, [r5, #0]
 800538e:	061d      	lsls	r5, r3, #24
 8005390:	d514      	bpl.n	80053bc <_printf_i+0x1ac>
 8005392:	07df      	lsls	r7, r3, #31
 8005394:	bf44      	itt	mi
 8005396:	f043 0320 	orrmi.w	r3, r3, #32
 800539a:	6023      	strmi	r3, [r4, #0]
 800539c:	b91e      	cbnz	r6, 80053a6 <_printf_i+0x196>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f023 0320 	bic.w	r3, r3, #32
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	2310      	movs	r3, #16
 80053a8:	e7b0      	b.n	800530c <_printf_i+0xfc>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	f043 0320 	orr.w	r3, r3, #32
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	2378      	movs	r3, #120	; 0x78
 80053b4:	4828      	ldr	r0, [pc, #160]	; (8005458 <_printf_i+0x248>)
 80053b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053ba:	e7e3      	b.n	8005384 <_printf_i+0x174>
 80053bc:	0659      	lsls	r1, r3, #25
 80053be:	bf48      	it	mi
 80053c0:	b2b6      	uxthmi	r6, r6
 80053c2:	e7e6      	b.n	8005392 <_printf_i+0x182>
 80053c4:	4615      	mov	r5, r2
 80053c6:	e7bb      	b.n	8005340 <_printf_i+0x130>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	6826      	ldr	r6, [r4, #0]
 80053cc:	6961      	ldr	r1, [r4, #20]
 80053ce:	1d18      	adds	r0, r3, #4
 80053d0:	6028      	str	r0, [r5, #0]
 80053d2:	0635      	lsls	r5, r6, #24
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	d501      	bpl.n	80053dc <_printf_i+0x1cc>
 80053d8:	6019      	str	r1, [r3, #0]
 80053da:	e002      	b.n	80053e2 <_printf_i+0x1d2>
 80053dc:	0670      	lsls	r0, r6, #25
 80053de:	d5fb      	bpl.n	80053d8 <_printf_i+0x1c8>
 80053e0:	8019      	strh	r1, [r3, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	6123      	str	r3, [r4, #16]
 80053e6:	4615      	mov	r5, r2
 80053e8:	e7ba      	b.n	8005360 <_printf_i+0x150>
 80053ea:	682b      	ldr	r3, [r5, #0]
 80053ec:	1d1a      	adds	r2, r3, #4
 80053ee:	602a      	str	r2, [r5, #0]
 80053f0:	681d      	ldr	r5, [r3, #0]
 80053f2:	6862      	ldr	r2, [r4, #4]
 80053f4:	2100      	movs	r1, #0
 80053f6:	4628      	mov	r0, r5
 80053f8:	f7fa feea 	bl	80001d0 <memchr>
 80053fc:	b108      	cbz	r0, 8005402 <_printf_i+0x1f2>
 80053fe:	1b40      	subs	r0, r0, r5
 8005400:	6060      	str	r0, [r4, #4]
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	6123      	str	r3, [r4, #16]
 8005406:	2300      	movs	r3, #0
 8005408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540c:	e7a8      	b.n	8005360 <_printf_i+0x150>
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	462a      	mov	r2, r5
 8005412:	4649      	mov	r1, r9
 8005414:	4640      	mov	r0, r8
 8005416:	47d0      	blx	sl
 8005418:	3001      	adds	r0, #1
 800541a:	d0ab      	beq.n	8005374 <_printf_i+0x164>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	079b      	lsls	r3, r3, #30
 8005420:	d413      	bmi.n	800544a <_printf_i+0x23a>
 8005422:	68e0      	ldr	r0, [r4, #12]
 8005424:	9b03      	ldr	r3, [sp, #12]
 8005426:	4298      	cmp	r0, r3
 8005428:	bfb8      	it	lt
 800542a:	4618      	movlt	r0, r3
 800542c:	e7a4      	b.n	8005378 <_printf_i+0x168>
 800542e:	2301      	movs	r3, #1
 8005430:	4632      	mov	r2, r6
 8005432:	4649      	mov	r1, r9
 8005434:	4640      	mov	r0, r8
 8005436:	47d0      	blx	sl
 8005438:	3001      	adds	r0, #1
 800543a:	d09b      	beq.n	8005374 <_printf_i+0x164>
 800543c:	3501      	adds	r5, #1
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	9903      	ldr	r1, [sp, #12]
 8005442:	1a5b      	subs	r3, r3, r1
 8005444:	42ab      	cmp	r3, r5
 8005446:	dcf2      	bgt.n	800542e <_printf_i+0x21e>
 8005448:	e7eb      	b.n	8005422 <_printf_i+0x212>
 800544a:	2500      	movs	r5, #0
 800544c:	f104 0619 	add.w	r6, r4, #25
 8005450:	e7f5      	b.n	800543e <_printf_i+0x22e>
 8005452:	bf00      	nop
 8005454:	08005799 	.word	0x08005799
 8005458:	080057aa 	.word	0x080057aa

0800545c <memcpy>:
 800545c:	440a      	add	r2, r1
 800545e:	4291      	cmp	r1, r2
 8005460:	f100 33ff 	add.w	r3, r0, #4294967295
 8005464:	d100      	bne.n	8005468 <memcpy+0xc>
 8005466:	4770      	bx	lr
 8005468:	b510      	push	{r4, lr}
 800546a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800546e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005472:	4291      	cmp	r1, r2
 8005474:	d1f9      	bne.n	800546a <memcpy+0xe>
 8005476:	bd10      	pop	{r4, pc}

08005478 <memmove>:
 8005478:	4288      	cmp	r0, r1
 800547a:	b510      	push	{r4, lr}
 800547c:	eb01 0402 	add.w	r4, r1, r2
 8005480:	d902      	bls.n	8005488 <memmove+0x10>
 8005482:	4284      	cmp	r4, r0
 8005484:	4623      	mov	r3, r4
 8005486:	d807      	bhi.n	8005498 <memmove+0x20>
 8005488:	1e43      	subs	r3, r0, #1
 800548a:	42a1      	cmp	r1, r4
 800548c:	d008      	beq.n	80054a0 <memmove+0x28>
 800548e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005496:	e7f8      	b.n	800548a <memmove+0x12>
 8005498:	4402      	add	r2, r0
 800549a:	4601      	mov	r1, r0
 800549c:	428a      	cmp	r2, r1
 800549e:	d100      	bne.n	80054a2 <memmove+0x2a>
 80054a0:	bd10      	pop	{r4, pc}
 80054a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054aa:	e7f7      	b.n	800549c <memmove+0x24>

080054ac <_free_r>:
 80054ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ae:	2900      	cmp	r1, #0
 80054b0:	d044      	beq.n	800553c <_free_r+0x90>
 80054b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054b6:	9001      	str	r0, [sp, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f1a1 0404 	sub.w	r4, r1, #4
 80054be:	bfb8      	it	lt
 80054c0:	18e4      	addlt	r4, r4, r3
 80054c2:	f000 f913 	bl	80056ec <__malloc_lock>
 80054c6:	4a1e      	ldr	r2, [pc, #120]	; (8005540 <_free_r+0x94>)
 80054c8:	9801      	ldr	r0, [sp, #4]
 80054ca:	6813      	ldr	r3, [r2, #0]
 80054cc:	b933      	cbnz	r3, 80054dc <_free_r+0x30>
 80054ce:	6063      	str	r3, [r4, #4]
 80054d0:	6014      	str	r4, [r2, #0]
 80054d2:	b003      	add	sp, #12
 80054d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054d8:	f000 b90e 	b.w	80056f8 <__malloc_unlock>
 80054dc:	42a3      	cmp	r3, r4
 80054de:	d908      	bls.n	80054f2 <_free_r+0x46>
 80054e0:	6825      	ldr	r5, [r4, #0]
 80054e2:	1961      	adds	r1, r4, r5
 80054e4:	428b      	cmp	r3, r1
 80054e6:	bf01      	itttt	eq
 80054e8:	6819      	ldreq	r1, [r3, #0]
 80054ea:	685b      	ldreq	r3, [r3, #4]
 80054ec:	1949      	addeq	r1, r1, r5
 80054ee:	6021      	streq	r1, [r4, #0]
 80054f0:	e7ed      	b.n	80054ce <_free_r+0x22>
 80054f2:	461a      	mov	r2, r3
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	b10b      	cbz	r3, 80054fc <_free_r+0x50>
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	d9fa      	bls.n	80054f2 <_free_r+0x46>
 80054fc:	6811      	ldr	r1, [r2, #0]
 80054fe:	1855      	adds	r5, r2, r1
 8005500:	42a5      	cmp	r5, r4
 8005502:	d10b      	bne.n	800551c <_free_r+0x70>
 8005504:	6824      	ldr	r4, [r4, #0]
 8005506:	4421      	add	r1, r4
 8005508:	1854      	adds	r4, r2, r1
 800550a:	42a3      	cmp	r3, r4
 800550c:	6011      	str	r1, [r2, #0]
 800550e:	d1e0      	bne.n	80054d2 <_free_r+0x26>
 8005510:	681c      	ldr	r4, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	6053      	str	r3, [r2, #4]
 8005516:	4421      	add	r1, r4
 8005518:	6011      	str	r1, [r2, #0]
 800551a:	e7da      	b.n	80054d2 <_free_r+0x26>
 800551c:	d902      	bls.n	8005524 <_free_r+0x78>
 800551e:	230c      	movs	r3, #12
 8005520:	6003      	str	r3, [r0, #0]
 8005522:	e7d6      	b.n	80054d2 <_free_r+0x26>
 8005524:	6825      	ldr	r5, [r4, #0]
 8005526:	1961      	adds	r1, r4, r5
 8005528:	428b      	cmp	r3, r1
 800552a:	bf04      	itt	eq
 800552c:	6819      	ldreq	r1, [r3, #0]
 800552e:	685b      	ldreq	r3, [r3, #4]
 8005530:	6063      	str	r3, [r4, #4]
 8005532:	bf04      	itt	eq
 8005534:	1949      	addeq	r1, r1, r5
 8005536:	6021      	streq	r1, [r4, #0]
 8005538:	6054      	str	r4, [r2, #4]
 800553a:	e7ca      	b.n	80054d2 <_free_r+0x26>
 800553c:	b003      	add	sp, #12
 800553e:	bd30      	pop	{r4, r5, pc}
 8005540:	20000214 	.word	0x20000214

08005544 <sbrk_aligned>:
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	4e0e      	ldr	r6, [pc, #56]	; (8005580 <sbrk_aligned+0x3c>)
 8005548:	460c      	mov	r4, r1
 800554a:	6831      	ldr	r1, [r6, #0]
 800554c:	4605      	mov	r5, r0
 800554e:	b911      	cbnz	r1, 8005556 <sbrk_aligned+0x12>
 8005550:	f000 f8bc 	bl	80056cc <_sbrk_r>
 8005554:	6030      	str	r0, [r6, #0]
 8005556:	4621      	mov	r1, r4
 8005558:	4628      	mov	r0, r5
 800555a:	f000 f8b7 	bl	80056cc <_sbrk_r>
 800555e:	1c43      	adds	r3, r0, #1
 8005560:	d00a      	beq.n	8005578 <sbrk_aligned+0x34>
 8005562:	1cc4      	adds	r4, r0, #3
 8005564:	f024 0403 	bic.w	r4, r4, #3
 8005568:	42a0      	cmp	r0, r4
 800556a:	d007      	beq.n	800557c <sbrk_aligned+0x38>
 800556c:	1a21      	subs	r1, r4, r0
 800556e:	4628      	mov	r0, r5
 8005570:	f000 f8ac 	bl	80056cc <_sbrk_r>
 8005574:	3001      	adds	r0, #1
 8005576:	d101      	bne.n	800557c <sbrk_aligned+0x38>
 8005578:	f04f 34ff 	mov.w	r4, #4294967295
 800557c:	4620      	mov	r0, r4
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	20000218 	.word	0x20000218

08005584 <_malloc_r>:
 8005584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005588:	1ccd      	adds	r5, r1, #3
 800558a:	f025 0503 	bic.w	r5, r5, #3
 800558e:	3508      	adds	r5, #8
 8005590:	2d0c      	cmp	r5, #12
 8005592:	bf38      	it	cc
 8005594:	250c      	movcc	r5, #12
 8005596:	2d00      	cmp	r5, #0
 8005598:	4607      	mov	r7, r0
 800559a:	db01      	blt.n	80055a0 <_malloc_r+0x1c>
 800559c:	42a9      	cmp	r1, r5
 800559e:	d905      	bls.n	80055ac <_malloc_r+0x28>
 80055a0:	230c      	movs	r3, #12
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	2600      	movs	r6, #0
 80055a6:	4630      	mov	r0, r6
 80055a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ac:	4e2e      	ldr	r6, [pc, #184]	; (8005668 <_malloc_r+0xe4>)
 80055ae:	f000 f89d 	bl	80056ec <__malloc_lock>
 80055b2:	6833      	ldr	r3, [r6, #0]
 80055b4:	461c      	mov	r4, r3
 80055b6:	bb34      	cbnz	r4, 8005606 <_malloc_r+0x82>
 80055b8:	4629      	mov	r1, r5
 80055ba:	4638      	mov	r0, r7
 80055bc:	f7ff ffc2 	bl	8005544 <sbrk_aligned>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	4604      	mov	r4, r0
 80055c4:	d14d      	bne.n	8005662 <_malloc_r+0xde>
 80055c6:	6834      	ldr	r4, [r6, #0]
 80055c8:	4626      	mov	r6, r4
 80055ca:	2e00      	cmp	r6, #0
 80055cc:	d140      	bne.n	8005650 <_malloc_r+0xcc>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	4631      	mov	r1, r6
 80055d2:	4638      	mov	r0, r7
 80055d4:	eb04 0803 	add.w	r8, r4, r3
 80055d8:	f000 f878 	bl	80056cc <_sbrk_r>
 80055dc:	4580      	cmp	r8, r0
 80055de:	d13a      	bne.n	8005656 <_malloc_r+0xd2>
 80055e0:	6821      	ldr	r1, [r4, #0]
 80055e2:	3503      	adds	r5, #3
 80055e4:	1a6d      	subs	r5, r5, r1
 80055e6:	f025 0503 	bic.w	r5, r5, #3
 80055ea:	3508      	adds	r5, #8
 80055ec:	2d0c      	cmp	r5, #12
 80055ee:	bf38      	it	cc
 80055f0:	250c      	movcc	r5, #12
 80055f2:	4629      	mov	r1, r5
 80055f4:	4638      	mov	r0, r7
 80055f6:	f7ff ffa5 	bl	8005544 <sbrk_aligned>
 80055fa:	3001      	adds	r0, #1
 80055fc:	d02b      	beq.n	8005656 <_malloc_r+0xd2>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	442b      	add	r3, r5
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	e00e      	b.n	8005624 <_malloc_r+0xa0>
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	1b52      	subs	r2, r2, r5
 800560a:	d41e      	bmi.n	800564a <_malloc_r+0xc6>
 800560c:	2a0b      	cmp	r2, #11
 800560e:	d916      	bls.n	800563e <_malloc_r+0xba>
 8005610:	1961      	adds	r1, r4, r5
 8005612:	42a3      	cmp	r3, r4
 8005614:	6025      	str	r5, [r4, #0]
 8005616:	bf18      	it	ne
 8005618:	6059      	strne	r1, [r3, #4]
 800561a:	6863      	ldr	r3, [r4, #4]
 800561c:	bf08      	it	eq
 800561e:	6031      	streq	r1, [r6, #0]
 8005620:	5162      	str	r2, [r4, r5]
 8005622:	604b      	str	r3, [r1, #4]
 8005624:	4638      	mov	r0, r7
 8005626:	f104 060b 	add.w	r6, r4, #11
 800562a:	f000 f865 	bl	80056f8 <__malloc_unlock>
 800562e:	f026 0607 	bic.w	r6, r6, #7
 8005632:	1d23      	adds	r3, r4, #4
 8005634:	1af2      	subs	r2, r6, r3
 8005636:	d0b6      	beq.n	80055a6 <_malloc_r+0x22>
 8005638:	1b9b      	subs	r3, r3, r6
 800563a:	50a3      	str	r3, [r4, r2]
 800563c:	e7b3      	b.n	80055a6 <_malloc_r+0x22>
 800563e:	6862      	ldr	r2, [r4, #4]
 8005640:	42a3      	cmp	r3, r4
 8005642:	bf0c      	ite	eq
 8005644:	6032      	streq	r2, [r6, #0]
 8005646:	605a      	strne	r2, [r3, #4]
 8005648:	e7ec      	b.n	8005624 <_malloc_r+0xa0>
 800564a:	4623      	mov	r3, r4
 800564c:	6864      	ldr	r4, [r4, #4]
 800564e:	e7b2      	b.n	80055b6 <_malloc_r+0x32>
 8005650:	4634      	mov	r4, r6
 8005652:	6876      	ldr	r6, [r6, #4]
 8005654:	e7b9      	b.n	80055ca <_malloc_r+0x46>
 8005656:	230c      	movs	r3, #12
 8005658:	603b      	str	r3, [r7, #0]
 800565a:	4638      	mov	r0, r7
 800565c:	f000 f84c 	bl	80056f8 <__malloc_unlock>
 8005660:	e7a1      	b.n	80055a6 <_malloc_r+0x22>
 8005662:	6025      	str	r5, [r4, #0]
 8005664:	e7de      	b.n	8005624 <_malloc_r+0xa0>
 8005666:	bf00      	nop
 8005668:	20000214 	.word	0x20000214

0800566c <_realloc_r>:
 800566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005670:	4680      	mov	r8, r0
 8005672:	4614      	mov	r4, r2
 8005674:	460e      	mov	r6, r1
 8005676:	b921      	cbnz	r1, 8005682 <_realloc_r+0x16>
 8005678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800567c:	4611      	mov	r1, r2
 800567e:	f7ff bf81 	b.w	8005584 <_malloc_r>
 8005682:	b92a      	cbnz	r2, 8005690 <_realloc_r+0x24>
 8005684:	f7ff ff12 	bl	80054ac <_free_r>
 8005688:	4625      	mov	r5, r4
 800568a:	4628      	mov	r0, r5
 800568c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005690:	f000 f838 	bl	8005704 <_malloc_usable_size_r>
 8005694:	4284      	cmp	r4, r0
 8005696:	4607      	mov	r7, r0
 8005698:	d802      	bhi.n	80056a0 <_realloc_r+0x34>
 800569a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800569e:	d812      	bhi.n	80056c6 <_realloc_r+0x5a>
 80056a0:	4621      	mov	r1, r4
 80056a2:	4640      	mov	r0, r8
 80056a4:	f7ff ff6e 	bl	8005584 <_malloc_r>
 80056a8:	4605      	mov	r5, r0
 80056aa:	2800      	cmp	r0, #0
 80056ac:	d0ed      	beq.n	800568a <_realloc_r+0x1e>
 80056ae:	42bc      	cmp	r4, r7
 80056b0:	4622      	mov	r2, r4
 80056b2:	4631      	mov	r1, r6
 80056b4:	bf28      	it	cs
 80056b6:	463a      	movcs	r2, r7
 80056b8:	f7ff fed0 	bl	800545c <memcpy>
 80056bc:	4631      	mov	r1, r6
 80056be:	4640      	mov	r0, r8
 80056c0:	f7ff fef4 	bl	80054ac <_free_r>
 80056c4:	e7e1      	b.n	800568a <_realloc_r+0x1e>
 80056c6:	4635      	mov	r5, r6
 80056c8:	e7df      	b.n	800568a <_realloc_r+0x1e>
	...

080056cc <_sbrk_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	4d06      	ldr	r5, [pc, #24]	; (80056e8 <_sbrk_r+0x1c>)
 80056d0:	2300      	movs	r3, #0
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	f7fb fa7e 	bl	8000bd8 <_sbrk>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_sbrk_r+0x1a>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_sbrk_r+0x1a>
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	2000021c 	.word	0x2000021c

080056ec <__malloc_lock>:
 80056ec:	4801      	ldr	r0, [pc, #4]	; (80056f4 <__malloc_lock+0x8>)
 80056ee:	f000 b811 	b.w	8005714 <__retarget_lock_acquire_recursive>
 80056f2:	bf00      	nop
 80056f4:	20000220 	.word	0x20000220

080056f8 <__malloc_unlock>:
 80056f8:	4801      	ldr	r0, [pc, #4]	; (8005700 <__malloc_unlock+0x8>)
 80056fa:	f000 b80c 	b.w	8005716 <__retarget_lock_release_recursive>
 80056fe:	bf00      	nop
 8005700:	20000220 	.word	0x20000220

08005704 <_malloc_usable_size_r>:
 8005704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005708:	1f18      	subs	r0, r3, #4
 800570a:	2b00      	cmp	r3, #0
 800570c:	bfbc      	itt	lt
 800570e:	580b      	ldrlt	r3, [r1, r0]
 8005710:	18c0      	addlt	r0, r0, r3
 8005712:	4770      	bx	lr

08005714 <__retarget_lock_acquire_recursive>:
 8005714:	4770      	bx	lr

08005716 <__retarget_lock_release_recursive>:
 8005716:	4770      	bx	lr

08005718 <_init>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	bf00      	nop
 800571c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571e:	bc08      	pop	{r3}
 8005720:	469e      	mov	lr, r3
 8005722:	4770      	bx	lr

08005724 <_fini>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	bf00      	nop
 8005728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572a:	bc08      	pop	{r3}
 800572c:	469e      	mov	lr, r3
 800572e:	4770      	bx	lr
